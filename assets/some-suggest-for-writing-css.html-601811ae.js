import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as c,c as p,d as l,a as n,b as s,f as e,e as t}from"./app-fdf13f0b.js";const r="/assets/css-write-1.jpg",d="/assets/css-write-2.jpg",u={},v=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"前言"),n("p",null,"想要写出高质量的 CSS 代码。那么这篇记录将大大提升你撰写 CSS 代码的效率。")],-1),m=t(`<h2 id="明白何谓-margin-collapse" tabindex="-1"><a class="header-anchor" href="#明白何谓-margin-collapse" aria-hidden="true">#</a> 明白何谓 Margin Collapse</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>不同于其他很多属性。盒模型中垂直方向上的 <code>Margin</code> 会在相遇时发生崩塌。也就是说当某个元素的底部 <code>Margin</code> 与另一个元素的顶部 <code>Margin</code> 相邻时。只有二者中的较大值会被保留下来。</p></div><p><code>For Example:</code></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.square</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 80px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.red</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> #f44336<span class="token punctuation">;</span>
  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.blue</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> #2196f3<span class="token punctuation">;</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上述例子中我们会发现。红色和蓝色方块的外边距并没有相加得到 <code>70px</code> 。而是只有红色的下外边距保留了下来。我们可以使用一些方法来避免这种行为。不过建议来说还是尽量统一使用 <code>margin-bottom</code> 属性。这样就显得和谐多了。</p><h2 id="使用-flexbox-进行布局" tabindex="-1"><a class="header-anchor" href="#使用-flexbox-进行布局" aria-hidden="true">#</a> 使用 Flexbox 进行布局</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在传统的布局中我们习惯使用 <code>Floats</code> 或者 <code>inline-blocks</code> 。不过它们更适合于格式化文档。而不是整个网站。而 <code>Flexbox</code> 则是专门的用于进行布局的工具。 <code>Flexbox</code> 模型允许开发者使用很多便捷可扩展的属性来进行布局。</p></div><p><code>For Example:</code></p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.container</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> -webkit-flex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于之前在本博客里详细介绍过 Flexbox 的布局方式, 所以这里就不再重复, 童鞋们可自行在本博客中搜索。</p><h2 id="使用-css-reset" tabindex="-1"><a class="header-anchor" href="#使用-css-reset" aria-hidden="true">#</a> 使用 CSS Reset</h2>`,11),k={class:"hint-container tip"},b=n("p",{class:"hint-container-title"},"提示",-1),h={href:"http://necolas.github.io/normalize.css/",target:"_blank",rel:"noopener noreferrer"},g={href:"http://jgthms.com/minireset.css/",target:"_blank",rel:"noopener noreferrer"},f={href:"http://github.com/filipelinhares/ress",target:"_blank",rel:"noopener noreferrer"},_=t(`<p>而如果你不打算用某个外在的库, 那么建议可以使用如下的基本规则:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">*</span> <span class="token punctuation">{</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的规则看起来没啥用, 不过如果不同的浏览器在默认情况下为你设置了不同的 <code>外边距/内边距</code> 的默认值, 还是会挺麻烦的。</p><h2 id="一切应为-border-box" tabindex="-1"><a class="header-anchor" href="#一切应为-border-box" aria-hidden="true">#</a> 一切应为 Border-box</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>虽然很多初学者并不了解 <code>box-sizing</code> 这个属性, 但是它确实相当的重要。而最好的理解它的方式就是看看它的两种取值</p></div><ul><li><p>默认值为 <code>content-box</code> , 即当我们设置某个元素的 <code>heght/width</code> 属性时, 仅仅会作用于其内容尺寸。而所有的内边距与边都是在其之上的累加, 譬如某个 <code>&lt;div&gt;</code> 标签设置为宽 100, 内边距为 10, 那么最终元素会占用 <code>120(100 + 2*10)</code> 的像素。</p></li><li><p><code>border-box</code> : 内边距与边是包含在了 <code>width/height</code> 之内, 譬如设置了 <code>width:100px</code> 的 <code>&lt;div&gt;</code> 无论其内边距或者边长设置为多少, 其占有的大小都是 <code>100px</code> 。</p></li></ul><p>将元素设置为 <code>border-box</code> 会很方便你进行样式布局, 这样的话你就可以在父元素设置高宽限制而不担心子元素的内边距或者边打破了这种限制。</p><h2 id="以背景图方式使用-images" tabindex="-1"><a class="header-anchor" href="#以背景图方式使用-images" aria-hidden="true">#</a> 以背景图方式使用 Images</h2><p>如果需要在响应式的环境下展示图片, 有个简单的小技巧就是使用该图片作为某个 <code>&lt;div&gt;</code> 的背景图而不是直接使用 img 标签。</p><p>基于这种方式配合上 <code>background-size</code> 与 <code>background-position</code> 这两个属性, 可以很方便地按比例缩放:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">img</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&quot;//cdn.tutorialzine.com/wp-content/uploads/2016/08/bicycle.jpg&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>
  <span class="token property">background-position</span><span class="token punctuation">:</span> center center<span class="token punctuation">;</span>
  <span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">section</span> <span class="token punctuation">{</span>
  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),x={href:"http://tutorialzine.com/2016/04/quick-tip-get-to-know-css-object-fit-position/",target:"_blank",rel:"noopener noreferrer"},S=t(`<h2 id="better-table-borders" tabindex="-1"><a class="header-anchor" href="#better-table-borders" aria-hidden="true">#</a> Better Table Borders</h2><p>HTML 中使用 Tables 进行布局一直是个很头疼的问题, 它们使用起来很简单, 但是无法进行响应式操作, 并且也不方便进行全局样式设置。</p><p>譬如, 如果你打算为 Table 的边与单元的边添加样式, 可能得到的结果如下:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">table</span> <span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 600px<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #505050<span class="token punctuation">;</span>
  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #505050<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">td</span> <span class="token punctuation">{</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #505050<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 10px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+'" alt="CSS 代码编写" tabindex="0" loading="lazy"><figcaption>CSS 代码编写</figcaption></figure><p>这里存在的问题是出现了很多的重复的边, 会导致视觉上不协调的情况, 那么我们可以通过设置 <code>border-collapse:collapse</code> 来进行处理:<br></p><figure><img src="'+d+`" alt="CSS 代码编写" tabindex="0" loading="lazy"><figcaption>CSS 代码编写</figcaption></figure><h2 id="注释格式优化" tabindex="-1"><a class="header-anchor" href="#注释格式优化" aria-hidden="true">#</a> 注释格式优化</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>CSS 虽然谈不上一门编程语言但是其仍然需要添加注释以保障整体代码的可读性, 只要添加些简单的注释不仅可以方便你更好地组织整个样式表还能够让你的同事或者未来的自己更好地理解。</p></div><p>对于 CSS 中整块的注释或者使用在 <code>Media-Query</code> 中的注释, 建议是使用如下形式:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/*---------------
    #Header
---------------*/</span>
<span class="token selector">header</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token selector">header nav</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment">/*---------------
    #Slideshow
---------------*/</span>
<span class="token selector">.slideshow</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而设计的细节说明或者一些不重要的组件可以用如下单行注释的方式:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/*   Footer Buttons   */</span>
<span class="token selector">.footer button</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token selector">.footer button:hover</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同时, 不要忘了 <code>CSS</code> 中是没有 <code>//</code> 这种注释方式的:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/*  Do  */</span>
<span class="token selector">p</span> <span class="token punctuation">{</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>
  <span class="token comment">/*border: 1px solid #222;*/</span>
<span class="token punctuation">}</span>

<span class="token comment">/*  Don&#39;t  */</span>
<span class="token selector">p</span> <span class="token punctuation">{</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>
  // <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #222<span class="token punctuation">;</span><span class="token comment">/* 错误的注释 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用-kebab-case-命名变量" tabindex="-1"><a class="header-anchor" href="#使用-kebab-case-命名变量" aria-hidden="true">#</a> 使用 Kebab-case 命名变量</h2><p>对于样式类名或者 ID 名的命名都需要在多个单词之间添加 <code>-</code> 符号, CSS 本身是大小写不敏感的因此你是用不了 <code>camelCase</code> 的, 另一方面, 很久之前也不支持下划线, 所以现在的默认的命名方式就是使用 <code>-</code> :</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/*  Do     */</span>
<span class="token selector">.footer-column-left</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token comment">/*  Don&#39;t  */</span>
<span class="token selector">.footerColumnLeft</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token selector">.footer_column_left</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),y={href:"http://en.bem.info/",target:"_blank",rel:"noopener noreferrer"},C={href:"http://css-tricks.com/bem-101/",target:"_blank",rel:"noopener noreferrer"},w=t(`<h2 id="避免重复代码" tabindex="-1"><a class="header-anchor" href="#避免重复代码" aria-hidden="true">#</a> 避免重复代码</h2><p>大部分元素的 CSS 属性都是从 DOM 树根部继承而来, 这也是其命名为级联样式表的由来。我们以 font 属性为例, 该属性往往是继承自父属性, 因此我们并不需要再单独地为元素设置该属性。</p><p>我们只需要在 html 或者 body 中添加该属性然后使其层次传递下去即可:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">html</span> <span class="token punctuation">{</span>
  <span class="token property">font</span><span class="token punctuation">:</span> normal 16px/1.4 sans-serif<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用-transform-添加-css-animations" tabindex="-1"><a class="header-anchor" href="#使用-transform-添加-css-animations" aria-hidden="true">#</a> 使用 transform 添加 CSS Animations</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>不建议直接改变元素的 <code>width</code> 与 <code>height</code> 属性或者 <code>left/top/bottom/right</code> 这些属性来达到动画效果, 而应该优先使用 <code>transform()</code> 属性来提供更平滑的变换效果, 并且能使得代码的可读性会更好</p></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.ball</span> <span class="token punctuation">{</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> 0.4s ease-out<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* Not Cool*/</span>
<span class="token selector">.ball.slide-out</span> <span class="token punctuation">{</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/* Cool*/</span>
<span class="token selector">.ball.slide-out</span> <span class="token punctuation">{</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>450px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Transform</code> 的几个属性 <code>translate</code> 、 <code>rotate</code> 、 <code>scale</code> 都具有比较好的浏览器兼容性可以放心使用。</p><h2 id="不要重复造轮子" tabindex="-1"><a class="header-anchor" href="#不要重复造轮子" aria-hidden="true">#</a> 不要重复造轮子</h2><p>现在 CSS 社区已经非常庞大, 并且不断地有新的各式各样的库开源出来。这些库可以帮助我们解决从小的代码片到用于构建完整的响应式应用的全框架。</p>`,10),T={href:"http://github.com/",target:"_blank",rel:"noopener noreferrer"},M={href:"http://codepen.io/",target:"_blank",rel:"noopener noreferrer"},z=t(`<h2 id="尽可能使用低优先级的选择器" tabindex="-1"><a class="header-anchor" href="#尽可能使用低优先级的选择器" aria-hidden="true">#</a> 尽可能使用低优先级的选择器</h2><p>并不是所有的 CSS 选择器的优先级都一样, 很多初学者在使用 CSS 选择器的时候都是考虑以新的特性去复写全部的继承特性, 不过这一点在某个元素多状态时就麻烦了。</p><p>譬如下面这个例子:</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">a</span> <span class="token punctuation">{</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 15px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">a#blue-btn</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">a.active</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),L=n("code",null,".active",-1),P=n("code",null,"button",-1),j=n("code",null,"ID",-1),A={href:"http://developer.mozilla.org/en-US/docs/Web/CSS/Specificity",target:"_blank",rel:"noopener noreferrer"},F=n("code",null,"ID(#id) > Class(.class) > Type(header)",-1),B=t(`<h2 id="避免使用-important" tabindex="-1"><a class="header-anchor" href="#避免使用-important" aria-hidden="true">#</a> 避免使用 !important</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>认真的说, 千万要避免使用 <code>!important</code> , 这可能会导致你在未来的开发中无尽的属性重写, 你应该选择更合适的 CSS 选择器。而唯一的可以使用 <code>!important</code> 属性的场景就是当你想去复写某些行内样式的时候, 不过行内样式本身也是需要避免的。</p></div><h2 id="使用-text-transform-属性设置文本大写" tabindex="-1"><a class="header-anchor" href="#使用-text-transform-属性设置文本大写" aria-hidden="true">#</a> 使用 text-transform 属性设置文本大写</h2><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>movie-poster<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Star Wars: The Force Awakens<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.movie-poster</span> <span class="token punctuation">{</span>
  <span class="token property">text-transform</span><span class="token punctuation">:</span> uppercase<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="em-rem-以及-pixel" tabindex="-1"><a class="header-anchor" href="#em-rem-以及-pixel" aria-hidden="true">#</a> Em, Rem, 以及 Pixel</h2><p>已经有很多关于人们应该如何使用 <code>em</code> , <code>rem</code> , 以及 <code>px</code> 作为元素尺寸与文本尺寸的讨论, 而笔者认为, 这三个尺寸单位都有其适用与不适用的地方。</p><p>不同的开发与项目都有其特定的设置, 因此并没有通用的规则来决定应该使用哪个单位, 这里是我总结的几个考虑:</p><ul><li><strong>em</strong> -------------------- 其基本单位即为当前元素的 <code>font-size</code> 值, 经常适用于 <code>media-queries</code> 中, <code>em</code> 是特别适用于响应式开发中。</li><li><strong>rem</strong> -------------------- 其是相对于 <code>html</code> 属性的单位, 可以保证文本段落真正的响应式尺寸特性。</li><li><strong>px</strong> -------------------- <code>Pixels</code> 并没有任何的动态扩展性, 它们往往用于描述绝对单位, 并且可以在设置值与最终的显示效果之间保留一定的一致性。</li></ul><h2 id="在大型项目中使用预处理器" tabindex="-1"><a class="header-anchor" href="#在大型项目中使用预处理器" aria-hidden="true">#</a> 在大型项目中使用预处理器</h2>`,10),N={href:"http://sass-lang.com/",target:"_blank",rel:"noopener noreferrer"},q={href:"http://lesscss.org/",target:"_blank",rel:"noopener noreferrer"},D={href:"http://postcss.org/",target:"_blank",rel:"noopener noreferrer"},V={href:"http://stylus-lang.com/",target:"_blank",rel:"noopener noreferrer"},E=t(`<p>这里我们以 Sass 为例:</p><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code><span class="token property"><span class="token variable">$accent-color</span></span><span class="token punctuation">:</span> #2196f3<span class="token punctuation">;</span>

<span class="token selector">a </span><span class="token punctuation">{</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 10px 15px<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">$accent-color</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">a:hover </span><span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">darken</span><span class="token punctuation">(</span><span class="token variable">$accent-color</span><span class="token punctuation">,</span> 10%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用-autoprefixers-来提升浏览器兼容性" tabindex="-1"><a class="header-anchor" href="#使用-autoprefixers-来提升浏览器兼容性" aria-hidden="true">#</a> 使用 Autoprefixers 来提升浏览器兼容性</h2><p>使用特定的浏览器前缀是 CSS 开发中常见的工作之一, 不同的浏览器、不同的属性对于前缀的要求也不一样, 这就使得我们无法在编码过程中记住所有的前缀规则。并且在写样式代码的时候还需要加上特定的浏览器前缀支持也是个麻烦活, 幸亏现在也是有很多工具可以辅助我们进行这样的开发:</p>`,4),I={href:"http://autoprefixer.github.io/",target:"_blank",rel:"noopener noreferrer"},H={href:"http://github.com/sindresorhus/sublime-autoprefixer",target:"_blank",rel:"noopener noreferrer"},O={href:"http://atom.io/packages/autoprefixer",target:"_blank",rel:"noopener noreferrer"},W={href:"http://github.com/postcss/autoprefixer",target:"_blank",rel:"noopener noreferrer"},R=n("h2",{id:"在生产环境下使用-minified-代码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#在生产环境下使用-minified-代码","aria-hidden":"true"},"#"),s(" 在生产环境下使用 Minified 代码")],-1),G=n("p",null,"为了提升页面的加载速度, 在生产环境下我们应该默认使用压缩之后的资源代码。在压缩的过程中, 会将所有的空白与重复剔除掉从而减少整个文件的体积大小。",-1),$=n("p",null,"当然, 经过压缩之后的代码毫无可读性, 因此在开发阶段我们还是应该使用普通的版本。对于 CSS 的压缩有很多的现行工具:",-1),J={href:"http://cssminifier.com/",target:"_blank",rel:"noopener noreferrer"},K={href:"http://csscompressor.com/",target:"_blank",rel:"noopener noreferrer"},Q={href:"http://packagecontrol.io/packages/Minify",target:"_blank",rel:"noopener noreferrer"},U={href:"http://atom.io/packages/atom-minify",target:"_blank",rel:"noopener noreferrer"},X={href:"http://github.com/matthiasmullie/minify",target:"_blank",rel:"noopener noreferrer"},Y={href:"http://github.com/css/csso",target:"_blank",rel:"noopener noreferrer"},Z={href:"http://cssnano.co/",target:"_blank",rel:"noopener noreferrer"},nn=n("p",null,"选择哪个工具肯定是依赖于你自己的工作流啦~",-1),sn=n("h2",{id:"多参阅-caniuse",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#多参阅-caniuse","aria-hidden":"true"},"#"),s(" 多参阅 Caniuse")],-1),an={href:"http://caniuse.com/",target:"_blank",rel:"noopener noreferrer"},en=n("h2",{id:"validate-校验",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#validate-校验","aria-hidden":"true"},"#"),s(" Validate: 校验")],-1),tn=n("p",null,"对于 CSS 的校验可能不如 HTML 校验或者 JavaScript 校验那么重要, 不过在正式发布之前用 Lint 工具校验一波你的 CSS 代码还是很有意义的。它会告诉你代码中潜在的错误, 提示你一些不符合最佳实践的代码以及给你一些提升代码性能的建议。",-1),on=n("p",null,[s("就像 "),n("strong",null,"Minifers"),s(" 与 "),n("strong",null,"Autoprefixers"),s(", 也有很多可用的工具:")],-1),cn={href:"http://jigsaw.w3.org/css-validator/",target:"_blank",rel:"noopener noreferrer"},pn={href:"http://csslint.net/",target:"_blank",rel:"noopener noreferrer"},ln={href:"http://packagecontrol.io/packages/W3CValidators",target:"_blank",rel:"noopener noreferrer"},rn={href:"http://atom.io/packages/csslint",target:"_blank",rel:"noopener noreferrer"},dn={href:"http://stylelint.io/",target:"_blank",rel:"noopener noreferrer"},un={href:"http://www.npmjs.com/package/css-validator",target:"_blank",rel:"noopener noreferrer"};function vn(mn,kn){const a=i("ExternalLinkIcon");return c(),p("div",null,[v,l(" more "),m,n("div",k,[b,n("p",null,[s("虽然这些年来随着浏览器的迅速发展与规范的统一, 浏览器特性碎片化的情况有所改善, 但是在不同的浏览器之间仍然存在着很多的行为差异。而解决这种问题的最好的办法就是使用某个 CSS Reset 来为所有的元素设置统一的样式, 保证你能在相对统一干净的样式表的基础上开始工作。目前流行的 Reset 库有 "),n("a",h,[s("normalize.css"),e(a)]),s(", "),n("a",g,[s("minireset"),e(a)]),s(" 以及 "),n("a",f,[s("ress"),e(a)]),s(" , 它们都可以修正很多已知的浏览器之间的差异性。")])]),_,n("p",null,[s("不过这种方式也是存在缺陷的, 譬如你无法设置图片的懒加载、图片无法被搜索引擎或者其他类似的工具抓取到, 有个不错的属性叫 "),n("a",x,[s("object-fit"),e(a)]),s(" 可以解决这个问题, 不过该属性目前的浏览器支持并不是很完善。")]),S,n("p",null,[s("而涉及到具体的变量命名规范时, 建议是使用 "),n("a",y,[s("BEM"),e(a)]),s(" 规范, 只要遵循一些简单的原则即可以保证基于组件风格的命名一致性。你也可以参考 "),n("a",C,[s("CSS Tricks"),e(a)]),s(" 来获得更多的细节描述。")]),w,n("p",null,[s("所以如果下次你再碰到什么 CSS 问题的时候, 在打算撸起袖子自己上之前可以尝试在 "),n("a",T,[s("GitHub"),e(a)]),s(" 或者 "),n("a",M,[s("CodePen"),e(a)]),s(" 上搜索可行方案。")]),z,n("p",null,[s("我们本来希望将 "),L,s(" 类添加到按钮上然后使其显示为红色, 不过在上面这个例子中很明显起不了作用, 因为 "),P,s(" 已经以 "),j,s(" 选择器设置过了背景色, 也就是所谓的 "),n("a",A,[s("Higher Selector Specificity"),e(a)]),s("。一般来说, 选择器的优先级顺序为: "),F]),B,n("p",null,[s("估计你肯定听说过 "),n("a",N,[s("Sass"),e(a)]),s(" , "),n("a",q,[s("Less"),e(a)]),s(" , "),n("a",D,[s("PostCSS"),e(a)]),s(" , "),n("a",V,[s("Stylus"),e(a)]),s(" 这些预处理器与对应的语法。Preprocessors 可以允许我们将未来的 CSS 特性应用在当前的代码开发中, 譬如变量支持、函数、嵌套式的选择器以及很多其他的特性。")]),E,n("ul",null,[n("li",null,[s("Online tools -------------------- "),n("strong",null,[n("a",I,[s("Autoprefixer"),e(a)])])]),n("li",null,[s("Text editor plugins -------------------- "),n("strong",null,[n("a",H,[s("Sublime Text"),e(a)])]),s(" , "),n("strong",null,[n("a",O,[s("Atom"),e(a)])])]),n("li",null,[s("Libraries -------------------- "),n("strong",null,[n("a",W,[s("Autoprefixer"),e(a)])]),s(" (PostCSS)")])]),R,G,$,n("ul",null,[n("li",null,[s("Online tools -------------------- "),n("strong",null,[n("a",J,[s("CSS Minifier"),e(a)])]),s(" (API included), "),n("strong",null,[n("a",K,[s("CSS Compressor"),e(a)])])]),n("li",null,[s("Text editor plugins -------------------- "),n("strong",null,[n("a",Q,[s("Sublime Text"),e(a)])]),s(" , "),n("strong",null,[n("a",U,[s("Atom"),e(a)])])]),n("li",null,[s("Libraries -------------------- "),n("strong",null,[n("a",X,[s("Minfiy"),e(a)])]),s(" (PHP), "),n("strong",null,[n("a",Y,[s("CSSO"),e(a)])]),s(" and "),n("strong",null,[n("a",Z,[s("CSSNano"),e(a)])]),s(" (PostCSS, Grunt, Gulp)")])]),nn,sn,n("p",null,[s("不同的浏览器在兼容性上差异很大, 因此如果我们可以针对我们所需要适配的浏览器, 在 "),n("a",an,[s("caniuse"),e(a)]),s(" 上我们可以查询某个特性的浏览器版本适配性, 是否需要添加特定的前缀或者在某个平台上是否存在 Bug 等等。不过光光使用 caniuse 肯定是不够的, 我们还需要使用些额外的服务来进行检测。")]),en,tn,on,n("ul",null,[n("li",null,[s("Online tools: "),n("strong",null,[n("a",cn,[s("W3 Validator"),e(a)])]),s(" , "),n("strong",null,[n("a",pn,[s("CSS Lint"),e(a)])])]),n("li",null,[s("Text editor plugins: "),n("strong",null,[n("a",ln,[s("Sublime Text"),e(a)])]),s(" , "),n("strong",null,[n("a",rn,[s("Atom"),e(a)])]),s(" Libraries: "),n("strong",null,[n("a",dn,[s("stylelint"),e(a)])]),s(" (Node.js, PostCSS), "),n("strong",null,[n("a",un,[s("css-validator"),e(a)])]),s(" (Node.js)")])])])}const gn=o(u,[["render",vn],["__file","some-suggest-for-writing-css.html.vue"]]);export{gn as default};
