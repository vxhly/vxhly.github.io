import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c,d as p,a as n,b as s,f as i,e as l}from"./app-44879862.js";const d="/assets/layout-moblie.gif",u={},r=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"前言"),n("p",null,"解决移动端网页的自适应, 让开发变得更加简洁。")],-1),k=l(`<h2 id="mate-标签" tabindex="-1"><a class="header-anchor" href="#mate-标签" aria-hidden="true">#</a> mate 标签</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>首先要让页面大小铺满屏幕又不能溢出。只需要在 html 的 head 标签内加入 viewport（如下）, 参数分别表示: 页面宽度＝屏幕宽度, 最大和最小伸缩比都是 1, 不允许用户拉缩。</p></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span>
  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>viewport<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>width=device-width,initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>width</strong>: viewport 的宽度, 可以指定为一个像素值, 如: 640, 或者为特殊的值, 如: device-width （设备的宽度）。</li><li><strong>initial-scale</strong>: 初始缩放比例, 即当浏览器第一次加载页面时的缩放比例。值为 1.0 即原始尺寸。</li><li><strong>maximum-scale</strong>: 允许浏览者缩放到的最大比例, 一般设为 1.0, 即原始尺寸。</li><li><strong>minimum-scale</strong>: 允许浏览者缩放到的最小比例, 一般设为 1.0, 即原始尺寸。</li><li><strong>user-scalable</strong>: 浏览者是否可以手动缩放, yes 或 no 。</li></ul><h2 id="使用百分比自适应" tabindex="-1"><a class="header-anchor" href="#使用百分比自适应" aria-hidden="true">#</a> 使用百分比自适应</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>把长度单位转换为百分比来表示, 这样在不同的宽度下, 元素的长宽也会随之变化。</p></div><ul><li>优点: 宽度之间无缝衔接, 操作起来也相对比较方便。</li><li>缺点: 字体大小需要另外一套自适应方法来调整；当屏幕宽度大于 <code>700px</code> 后, 继续按照百分比元素会偏大, 这个时候调整起来会比较麻烦。</li></ul><h2 id="rem-em-自适应" tabindex="-1"><a class="header-anchor" href="#rem-em-自适应" aria-hidden="true">#</a> rem, em 自适应</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>用媒体查询的方法, 确定在不同屏幕宽度下, 改变 html 或 body 的 font-size。再用 rem , em 替代 px 作为单位实现自适应。</p></div><ul><li>优点: 可以根据不同屏幕宽度来设置, 可以完美解决上面说的屏幕偏大时的比例问题。字体的大小也不存在问题。</li><li>缺点: 根据宽度区间来设置, 无法实现无缝变换。</li></ul><h2 id="引入-javascript-代码" tabindex="-1"><a class="header-anchor" href="#引入-javascript-代码" aria-hidden="true">#</a> 引入 JavaScript 代码</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>这些兼容方法各有优缺点, 都不算完美, 怎样才能把优点结合在一起, 同时避免缺点呢? 引入 JavaScript 方法源码, 方法原理: 使页面 html 的 font-size 会根据屏幕的宽度自动调整, 而且屏幕宽度和所设字体大小的商是一定的, 然后按照固定比例缩小后作为 rem 的单位长度实现自适应。</p></div><h3 id="方法源码一-需引入-jquery" tabindex="-1"><a class="header-anchor" href="#方法源码一-需引入-jquery" aria-hidden="true">#</a> 方法源码一（需引入 jQuery）</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">Zepto</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">$</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取文档的根节点</span>
  <span class="token keyword">var</span> doc <span class="token operator">=</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">setFontSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取当前窗口的宽度</span>
    <span class="token keyword">var</span> winWidth <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 640 宽度以上进行限制</span>
    <span class="token keyword">var</span> size <span class="token operator">=</span> <span class="token punctuation">(</span>winWidth <span class="token operator">/</span> <span class="token number">640</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">;</span>
    doc<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token operator">?</span> size <span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;px&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 防止在 html 未加载完毕时执行,保证获取正确的页宽</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 初始化</span>
    <span class="token function">setFontSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="方法源码二-javascript-原生代码" tabindex="-1"><a class="header-anchor" href="#方法源码二-javascript-原生代码" aria-hidden="true">#</a> 方法源码二（JavaScript 原生代码）</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">doc<span class="token punctuation">,</span> win</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 获取文档的根节点</span>
  <span class="token keyword">var</span> docEl <span class="token operator">=</span> doc<span class="token punctuation">.</span>documentElement<span class="token punctuation">;</span>
  <span class="token comment">// 判断移动端是否发生方向改变</span>
  <span class="token keyword">var</span> resizeEvt <span class="token operator">=</span>
    <span class="token string">&quot;orientationchange&quot;</span> <span class="token keyword">in</span> window <span class="token operator">?</span> <span class="token string">&quot;orientationchange&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;resize&quot;</span><span class="token punctuation">;</span>

  <span class="token keyword">var</span> <span class="token function-variable function">recalc</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取对象的宽度</span>
    <span class="token keyword">var</span> clientWidth <span class="token operator">=</span> docEl<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>clientWidth<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>clientWidth <span class="token operator">&gt;=</span> <span class="token number">640</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      docEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token string">&quot;100px&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      docEl<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token number">100</span> <span class="token operator">*</span> <span class="token punctuation">(</span>clientWidth <span class="token operator">/</span> <span class="token number">640</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;px&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>doc<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

  win<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>resizeEvt<span class="token punctuation">,</span> recalc<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  doc<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;DOMContentLoaded&quot;</span><span class="token punctuation">,</span> recalc<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> window<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>以上两个方法源码是 rem 布局的核心代码。 如果你的页面不需要引入 jQuery, 建议你使用 JavaScript 原生代码。 代码大意: 如果页面的宽度超过了 640px, 那么页面中 html 的 font-size 恒为 100px, 否则, 页面中 html 的 font-size 的大小为: <code>100 \\ (当前页面宽度 / 640)</code></p></div><h3 id="为什么是-640px" tabindex="-1"><a class="header-anchor" href="#为什么是-640px" aria-hidden="true">#</a> 为什么是 640px?</h3><p>对于手机屏幕来说, <code>640px</code> 的页面宽度是一个安全的最大宽度, 保证了移动端页面两边不会留白。注意这里的 <code>px</code> 是 <code>css</code> 逻辑像素, 与设备的物理像素是有区别的。 如果要切移动端页面, 你可以先把效果图宽度等比例缩放到 <code>640px</code> , 很好用。</p><h3 id="为什么要设置-html-的-font-size" tabindex="-1"><a class="header-anchor" href="#为什么要设置-html-的-font-size" aria-hidden="true">#</a> 为什么要设置 html 的 font-size?</h3><p><code>rem</code> 就是根元素（即: <code>html</code> ）的字体大小。 <code>html</code> 中的所有标签样式凡是涉及到尺寸的（如: <code>height</code> , <code>width</code> , <code>padding</code> , <code>margin</code> , <code>font-size</code> 。甚至 <code>left</code> , <code>top</code> 等）你都可以放心大胆的用 <code>rem</code> 作单位。 如果你把 <code>html</code> 的 <code>font-size</code> 设为 <code>20px</code> , 前面说过, <code>rem</code> 就是 <code>html</code> 的字体大小, 那么 <code>1rem = 20px</code> 。</p><h3 id="模拟为什么要使用-iphone-4" tabindex="-1"><a class="header-anchor" href="#模拟为什么要使用-iphone-4" aria-hidden="true">#</a> 模拟为什么要使用 iphone 4?</h3><p>假设你部门的设计师给你的页面标准宽度为 <code>640px</code> , 则页面中所有的 <code>宽高</code> 全部除以 2 , Chrome 浏览器 模拟手机页面 设置手机型号为 <code>IPhone 4</code> 。 这也就是为什么要将所有的宽高除以 2 的原因: <code>IPhone 4</code> 标准 宽 是 <code>320 px</code> 。 然后正常的用 <code>px</code> 为单位 写你的 <code>css</code> , 你所需要做的就是你写的页面, 要在 <code>IPhone 4</code> 完全正确显示。 如果你说, 那设计那边给的不是 <code>640px</code> 标准怎么办? 你只要让你的页面按照设计图在 <code>iphone 4</code> 上正确显示, 就木问题。</p><h3 id="rem-单位是如何换算的" tabindex="-1"><a class="header-anchor" href="#rem-单位是如何换算的" aria-hidden="true">#</a> rem 单位是如何换算的?</h3><p>页面 <code>css</code> 全部写完之后, 将所有的 <code>px</code> 转换为以 <code>rem</code> 为单位的数字。 例如 我设置 <code>body</code> 的 <code>width: 320px；</code> 则根据设置的 <code>font - size</code> 值, 转换为 <code>rem</code> , 则是 <code>width: 16 rem；</code> 【320 / 20 (你设置的标准 <code>font - size</code> ) = 16】。</p><h3 id="如何使用插件换算" tabindex="-1"><a class="header-anchor" href="#如何使用插件换算" aria-hidden="true">#</a> 如何使用插件换算?</h3>`,27),m=n("code",null,"css",-1),v=n("code",null,"px",-1),h=n("code",null,"rem",-1),b=n("code",null,"cssrem",-1),f={href:"http://github.com/flashlizi/cssrem",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"sublime text",-1),g=n("br",null,null,-1),w=n("figure",null,[n("img",{src:d,alt:"cssrem",tabindex:"0",loading:"lazy"}),n("figcaption",null,"cssrem")],-1);function _(y,z){const a=t("ExternalLinkIcon");return o(),c("div",null,[r,p(" more "),k,n("p",null,[s("如果你说一个页面的 "),m,s(" 有几百行, 写完再去改太麻烦了, 那可以用 "),v,s(" 转换成 "),h,s(" 的插件。 我这里有一款推荐: "),b,s(" （下载使用网址 "),n("a",f,[s("cssrem"),i(a)]),s("）。 该插件是 "),x,s(" 的一款插件。"),g]),w])}const E=e(u,[["render",_],["__file","layout-project-for-moblie.html.vue"]]);export{E as default};
