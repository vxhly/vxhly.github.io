import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as d,e as a}from"./app-5294595a.js";const h={},r=a('<div class="hint-container tip"><p class="hint-container-title">前言</p><p><code>系统架构设计师</code> 考试中下午案例分析题知识点汇总。本篇是架构设计专题部分。</p></div><h2 id="软件架构风格" tabindex="-1"><a class="header-anchor" href="#软件架构风格" aria-hidden="true">#</a> 软件架构风格</h2><h3 id="面向对象架构风格" tabindex="-1"><a class="header-anchor" href="#面向对象架构风格" aria-hidden="true">#</a> 面向对象架构风格</h3><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>1.一个对象对外隐藏了自己的详细信息;2.对象将数据和操作封装在一起;3.继承和封装方法为对象服用提供了技术支持</td><td>如果一个对象要调用另一个对象，则必须知道它的标识和名称</td></tr></tbody></table><h3 id="事件驱动的系统-隐式调用风格" tabindex="-1"><a class="header-anchor" href="#事件驱动的系统-隐式调用风格" aria-hidden="true">#</a> 事件驱动的系统/隐式调用风格</h3><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>1.事件发布者不需要知道哪些构件会响应事件</td><td>1.构件放弃了对计算的控制权，完全由系统来决定;2.存在数据传输问题</td></tr></tbody></table><h3 id="基于规则的系统架构风格" tabindex="-1"><a class="header-anchor" href="#基于规则的系统架构风格" aria-hidden="true">#</a> 基于规则的系统架构风格</h3><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>1.规则数据可以动态改变，灵活性好;2.定义新的规则，即可扩展</td><td>1.实时解释规则、性能较差</td></tr></tbody></table><h3 id="管道过滤器风格" tabindex="-1"><a class="header-anchor" href="#管道过滤器风格" aria-hidden="true">#</a> 管道过滤器风格</h3><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>1.简单性;2.支持复用;3.便于系统分析</td><td>1.不适合用来设计交互式应用系统;2.由于没有通用的数据传输标准，因此每个过滤器都需要解析输入数据和合成数据;3.难以进行错误处理。</td></tr></tbody></table><h3 id="仓库风格" tabindex="-1"><a class="header-anchor" href="#仓库风格" aria-hidden="true">#</a> 仓库风格</h3><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>1.便于多客户共享大量数据,而不必关心数据是何时产生的、由谁提供的及通过何种途径来提供。</td><td>1.对共享数据结构，不同知识源要达成一致; 2.需要同步机制和加锁机制来保证数据的完整性和一致性，增大了系统设计的复杂度</td></tr></tbody></table><h3 id="解释器风格" tabindex="-1"><a class="header-anchor" href="#解释器风格" aria-hidden="true">#</a> 解释器风格</h3><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>1.可移植性好</td><td>1.由于使用了特定了语言和自定义操作规则，因此增加了系统运行的开销;2.解释器系统难以设计和测试。</td></tr></tbody></table><h3 id="分层架构风格" tabindex="-1"><a class="header-anchor" href="#分层架构风格" aria-hidden="true">#</a> 分层架构风格</h3><table><thead><tr><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>1.设计者可以将系统分解为一个增量的步骤序列从而完成复杂的业务逻辑;2.每一层最多和相邻的上下两层进行交互，只给相邻层提供相同的接口。</td><td>1.并非所有系统都能够按照层次来进行划分。2.很难找到一种合适和正确的层次划分方法。3.传输数据需要经过多个层次。4.多层结构难以调试。</td></tr></tbody></table><h2 id="软件架构评估" tabindex="-1"><a class="header-anchor" href="#软件架构评估" aria-hidden="true">#</a> 软件架构评估</h2><h3 id="质量属性" tabindex="-1"><a class="header-anchor" href="#质量属性" aria-hidden="true">#</a> 质量属性</h3><ul><li><code>性能</code>: 处理任务所需时间或者单位时间内的处理量</li><li><code>可靠性</code>: 正常运行的时间比例, 出现故障多久能启用系统</li><li><code>安全性</code>: 系统的向合法用户提供服务并且阻止非法用户的能力</li><li><code>可维护性</code>: 错误发生后进局部性修改, 对其他构件负面影响最小</li><li><code>可扩展性</code>: 使用新构件、改进或删除原有构件或特性</li><li><code>结构重组性</code>: 重新组织构件及构件关系、灵活配置构件</li><li><code>可移植性</code>: 多样的环境(硬件平台、语言、操作系统等)</li><li><code>易用性</code>: 在指定条件下使用时，软件产品被理解、学习、使用和吸引用户的能力</li></ul><h3 id="质量特性" tabindex="-1"><a class="header-anchor" href="#质量特性" aria-hidden="true">#</a> 质量特性</h3><ul><li><code>敏感点</code>: 为了实现某种特定的质量属性，一个或多个构件所具有的特性。 <ul><li>对查询请求处理时间的要求将影响系统的数据传输协议和处理过程的设计</li></ul></li><li><code>权衡点</code>: 指影响多个质量特性，并对多个质量特性来说都是敏感点的质量特性。 <ul><li>改变业务数据编码方式会对系统的性能和安全性产生影响</li></ul></li><li><code>风险</code>: 不以标准术语出现。某些做法有一些隐患可能导致一些问题。 <ul><li>对系统某业务逻辑的描述尚未达成共识，这可能导致部分业务功能模块的重复，影响系统的可修改性;</li></ul></li><li><code>非风险</code>: 某些做法是可行的、可接受的。 <ul><li>业务处理时间小于 30 毫秒，则将请求响应时间设定为 1 秒钟是可以接受的</li></ul></li></ul>',21),i=[r];function l(c,o){return e(),d("div",null,i)}const b=t(h,[["render",l],["__file","architecture-design.html.vue"]]);export{b as default};
