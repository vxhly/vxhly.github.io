import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as r,c as l,a as e,b as o,f as n,d as c,e as s}from"./app-b8b4b755.js";const d={},p={class:"hint-container tip"},g=e("p",{class:"hint-container-title"},"前言",-1),h={href:"http://en.wikipedia.org/wiki/Representational_state_transfer",target:"_blank",rel:"noopener noreferrer"},u=e("code",null,"RESTful API",-1),_=e("h2",{id:"先言",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#先言","aria-hidden":"true"},"#"),o(" 先言")],-1),m={class:"hint-container tip"},T=e("p",{class:"hint-container-title"},"提示",-1),f={href:"http://www.ruanyifeng.com/blog/2014/05/restful_api.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/aisuhua/restful-api-design-references",target:"_blank",rel:"noopener noreferrer"},P=e("p",null,"REST API 一般用来将某种资源和允许的对资源的操作暴露给外界, 使调用者能够以正确的方式操作资源。这里, 在输入输出的处理上, 要符合 HTTP/1.1（不久的将来, 要符合 HTTP/2.0）的 RFC, 保证接口的一致性。",-1),v=e("h2",{id:"协议",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#协议","aria-hidden":"true"},"#"),o(" 协议")],-1),k={href:"http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html",target:"_blank",rel:"noopener noreferrer"},E=e("h2",{id:"域名",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#域名","aria-hidden":"true"},"#"),o(" 域名")],-1),A=e("p",null,"应该尽量将 API 部署在专用域名之下。",-1),I={href:"https://api.example.com",target:"_blank",rel:"noopener noreferrer"},x=e("p",null,"如果确定 API 很简单, 不会有进一步扩展, 可以考虑放在主域名下。",-1),R={href:"https://example.org/api/",target:"_blank",rel:"noopener noreferrer"},q=e("h2",{id:"版本-versioning",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#版本-versioning","aria-hidden":"true"},"#"),o(" 版本（Versioning）")],-1),y=e("p",null,"应该将 API 的版本号放入 URL。",-1),H={href:"https://api.example.com/v1/",target:"_blank",rel:"noopener noreferrer"},U={href:"http://developer.github.com/v3/media/#request-specific-version",target:"_blank",rel:"noopener noreferrer"},S=e("h2",{id:"路径-endpoint",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#路径-endpoint","aria-hidden":"true"},"#"),o(" 路径（Endpoint）")],-1),w=e("p",null,'路径又称"终点"（endpoint）, 表示 API 的具体网址。 在 RESTful 架构中, 每个网址代表一种资源（resource）, 所以网址中不能有动词, 只能有名词, 而且所用的名词往往与数据库的表格名对应。一般来说, 数据库中的表都是同种记录的"集合"（collection）, 所以 API 中的名词也应该使用复数。 举例来说, 有一个 API 提供动物园（zoo）的信息, 还包括各种动物和雇员的信息, 则它的路径应该设计成下面这样。',-1),z={href:"https://api.example.com/v1/zoos",target:"_blank",rel:"noopener noreferrer"},D={href:"https://api.example.com/v1/animals",target:"_blank",rel:"noopener noreferrer"},G={href:"https://api.example.com/v1/employees",target:"_blank",rel:"noopener noreferrer"},C=s('<h2 id="restful-api-规范" tabindex="-1"><a class="header-anchor" href="#restful-api-规范" aria-hidden="true">#</a> RESTful API 规范</h2><ul><li>URI 请求采用小写字母, 数字, 部分特殊符号（非制表符, 该特殊符号特指 _、&amp;、?）组成。</li><li>URI 请求中不采用大小写混合的驼峰命名方式, 尽量采用全小写单词, 如果需要连接多个单词, 则采用连接符 <code>_</code> 连接单词</li><li>URI 中不包含文件名, 例如 <code>/api/test.php</code></li><li>URI 中不包含 HTTP 动词, 动作由请求包体中的 method 决定, 语义化能够一眼看出当前的操作</li><li>URI 不能过长, 任何 HTTP 协议客户端和服务器都应当支持 8000 字节的首行（方法名 + URI + HTTP 版本号）, 可以理解成支持 7980+ 字节的 URI</li><li>非 ID 形式的全部通过使用 ? 传参形式, 并且使用 encodeURI 或者 encodeURIComponent 进行编码</li><li>使用复数形式的单词表示大量的数据, 例如 <code>/api/users</code></li><li>根据需求添加 版本号, 例如 <code>/api/v1/users</code></li><li>根据需求添加 SecretKey, 特指某些对外服务盈利的接口</li><li>过深的导航容易导致 url 膨胀, 不易维护, 如 GET /zoos/1/areas/3/animals/4, 尽量使用查询参数代替路径中的实体导航, 如 GET /animals?zoo=1&amp;area=3</li><li>对于一些需要用户验证的查用 <code>OAuth</code> 或者 <code>JWT</code> , 并且添加 HTTP Authorization 请求头</li><li>关于 <code>Content-Type</code> 采用 <code>application/json;charset=UTF-8</code> 或者 <code> application/x-www-form-urlencoded;charset=UTF-8</code></li></ul><h2 id="http-动词" tabindex="-1"><a class="header-anchor" href="#http-动词" aria-hidden="true">#</a> HTTP 动词</h2><p>对于资源的具体操作类型, 由 HTTP 动词表示。 常用的 HTTP 动词有下面五个（括号里是对应的 SQL 命令）。</p><ul><li><strong>GET（SELECT）</strong> =&gt; 从服务器取出资源（一项或多项）。</li><li><strong>POST（CREATE）</strong> =&gt; 在服务器新建一个资源。</li><li><strong>PUT（UPDATE）</strong> =&gt; 在服务器更新资源（客户端提供改变后的完整资源）。</li><li><strong>PATCH（UPDATE）</strong> =&gt; 在服务器更新资源（客户端提供改变的属性）。</li><li><strong>DELETE（DELETE）</strong> =&gt; 从服务器删除资源。</li></ul><p>还有两个不常用的 HTTP 动词。</p><ul><li><strong>HEAD</strong> =&gt; 获取资源的元数据。</li><li><strong>OPTIONS</strong> =&gt; 获取信息, 关于资源的哪些属性是客户端可以改变的。</li></ul><p>下面是一些例子。</p><ul><li><strong>GET</strong> <code>/zoos</code> =&gt; 列出所有动物园</li><li><strong>POST</strong> <code>/zoos</code> =&gt; 新建一个动物园</li><li><strong>GET</strong> <code>/zoos/ID</code> =&gt; 获取某个指定动物园的信息</li><li><strong>PUT</strong> <code>/zoos/ID</code> =&gt; 更新某个指定动物园的信息（提供该动物园的全部信息）</li><li><strong>PATCH</strong> <code>/zoos/ID</code> =&gt; 更新某个指定动物园的信息（提供该动物园的部分信息）</li><li><strong>DELETE</strong> <code>/zoos/ID</code> =&gt; 删除某个动物园</li><li><strong>GET</strong> <code>/zoos/ID/animals</code> =&gt; 列出某个指定动物园的所有动物</li><li><strong>DELETE</strong> <code>/zoos/ID/animals/ID</code> =&gt; 删除某个指定动物园的指定动物</li></ul><h2 id="过滤信息-filtering" tabindex="-1"><a class="header-anchor" href="#过滤信息-filtering" aria-hidden="true">#</a> 过滤信息（Filtering）</h2><p>如果记录数量很多, 服务器不可能都将它们返回给用户。AP I 应该提供参数, 过滤返回结果。 下面是一些常见的参数。</p><ul><li><code>?limit=10</code> =&gt; 指定返回记录的数量</li><li><code>?offset=10</code> =&gt; 指定返回记录的开始位置。</li><li><code>?page=2&amp;per_page=100</code> =&gt; 指定第几页, 以及每页的记录数。</li><li><code>?sortby=nameℴ=asc</code> =&gt; 指定返回结果按照哪个属性排序, 以及排序顺序。</li><li><code>?animal_type_id=1</code> =&gt; 指定筛选条件</li></ul><p>参数的设计允许存在冗余, 即允许 API 路径和 URL 参数偶尔有重复。比如, GET <code>/zoo/ID/animals</code> 与 GET <code>/animals?zoo_id=ID</code> 的含义是相同的。</p><h2 id="状态码-status-codes" tabindex="-1"><a class="header-anchor" href="#状态码-status-codes" aria-hidden="true">#</a> 状态码（Status Codes）</h2><p>服务器向用户返回的状态码和提示信息, 常见的有以下一些（方括号中是该状态码对应的 HTTP 动词）。</p><h3 id="请求成功" tabindex="-1"><a class="header-anchor" href="#请求成功" aria-hidden="true">#</a> 请求成功</h3><ul><li><strong>200</strong> <code>OK</code> -&gt; 【 <code>GET</code> 】 =&gt; 服务器成功返回用户请求的数据, 该操作是幂等的（Idempotent）。</li><li><strong>201</strong> <code>CREATED</code> -&gt; 【 <code>POST/PUT/PATCH</code> 】 =&gt; 对象创建成功并返回相应资源数据, 如 <code>POST</code> 成功；创建完成后响应头中应该携带头标 <code>Location</code> , 指向新建资源的地址</li><li><strong>202</strong> <code>Accepted</code> -&gt; 【 <code>*</code> 】 =&gt; 接受请求, 但无法立即完成创建行为, 比如其中涉及到一个需要花费若干小时才能完成的任务。返回的实体中应该包含当前状态的信息, 以及指向处理状态监视器或状态预测的指针, 以便客户端能够获取最新状态。</li><li><strong>204</strong> <code>No Content </code> -&gt; 【 <code>DELETE/PATCH</code> 】 =&gt; 请求执行成功, 不返回相应资源数据</li></ul><h3 id="重定向" tabindex="-1"><a class="header-anchor" href="#重定向" aria-hidden="true">#</a> 重定向</h3><p>重定向的新地址都需要在响应头 Location 中返回</p><ul><li><strong>301</strong> <code>Moved Permanently </code> -&gt; 【 <code>*</code> 】 =&gt; 被请求的资源已永久移动到新位置</li><li><strong>302</strong> <code>Found</code> -&gt; 【 <code>*</code> 】 =&gt; 请求的资源现在临时从不同的 URI 响应请求</li><li><strong>303</strong> <code>See Other</code> -&gt; 【 <code>*</code> 】 =&gt; 应当前请求的响应可以在另一个 URI 上被找到, 客户端应该使用 GET 方法进行请求。比如在创建已经被创建的资源时, 可以返回 303</li><li><strong>307</strong> <code>Temporary Redirect </code> -&gt; 【 <code>*</code> 】 =&gt; 对应当前请求的响应可以在另一个 URI 上被找到, 客户端应该保持原有的请求方法进行请求</li></ul><h3 id="条件请求" tabindex="-1"><a class="header-anchor" href="#条件请求" aria-hidden="true">#</a> 条件请求</h3><ul><li><strong>304</strong> <code>Not Modified</code> -&gt; 【 <code>GET/HEAD</code> 】 =&gt; 未改变说明无需再次传输请求的内容, 也就是说可以使用缓存的内容。这通常是在一些安全的方法（safe）, 资源自从上次请求后没有再次发生变化, 主要使用场景在于实现数据缓存</li><li><strong>409</strong> <code>Conflict </code> -&gt; 【 <code>GET/HEAD</code> 】 =&gt; 请求操作和资源的当前状态存在冲突。主要使用场景在于实现并发控制</li><li><strong>412</strong> <code>Precondition Failed</code> -&gt; 【 <code>GET/HEAD</code> 】 =&gt; 服务器在验证在请求的头字段中给出先决条件时, 没能满足其中的一个或多个。主要使用场景在于实现并发控制</li></ul><h3 id="客户端错误" tabindex="-1"><a class="header-anchor" href="#客户端错误" aria-hidden="true">#</a> 客户端错误</h3><ul><li><strong>400</strong> <code>Bad Request</code> -&gt; 【 <code>POST/PUT/PATCH</code> 】 =&gt; 请求体包含语法错误, 用户发出的请求有错误, 服务器没有进行新建或修改数据的操作, 该操作是幂等的。</li><li><strong>401</strong> <code>Unauthorized</code> -&gt; 【 <code>*</code> 】 =&gt; 表示用户没有权限（令牌、用户名、密码错误）。需要验证用户身份, 如果服务器就算是身份验证后也不允许客户访问资源, 应该响应 403 Forbidden 。如果请求里有 Authorization 头, 那么必须返回一个 WWW-Authenticate 头</li><li><strong>403</strong> <code>Forbidden</code> -&gt; 【 <code>*</code> 】 =&gt; 服务器拒绝执行, 表示用户得到授权（与 401 错误相对）, 但是访问是被禁止的。</li><li><strong>404</strong> <code>Not Found</code> -&gt; 【 <code>*</code> 】 =&gt; 用户发出的请求针对的是不存在的记录, 服务器没有进行操作, 该操作是幂等的。</li><li><strong>406</strong> <code>Not Acceptable</code> -&gt; 【 <code>GET</code> 】 =&gt; 用户请求的格式不可得（比如用户请求 JSON 格式, 但是只有 XML 格式）。服务器不支持客户端请求的内容格式, 但响应里会包含服务端能够给出的格式的数据, 并在 Content-Type 中声明格式名称</li><li><strong>410</strong> <code>Gone</code> -&gt; 【 <code>GET</code> 】 =&gt; 用户请求的资源被永久删除, 且不会再得到的。被请求的资源已被删除, 只有在确定了这种情况是永久性的时候才可以使用, 否则建议使用 404 Not Found</li><li><strong>413</strong> <code>Payload Too Large</code> -&gt; 【 <code>POST/PUT</code> 】=&gt; POST 或者 PUT 请求的消息实体过大</li><li><strong>415</strong> <code>Unsupported Media Type</code> -&gt; 【 <code>GET</code> 】=&gt; 服务器不支持请求中提交的数据的格式</li><li><strong>422</strong> <code>Unprocessable Entity</code> -&gt; 【 <code>POST/PUT/PATCH</code> 】=&gt; 请求格式正确, 但是由于含有语义错误, 无法响应</li><li><strong>428</strong> <code>Precondition Required</code> -&gt; 【 <code>GET</code> 】 =&gt; 要求先决条件, 如果想要请求能成功必须满足一些预设的条件</li></ul><h3 id="服务端错误" tabindex="-1"><a class="header-anchor" href="#服务端错误" aria-hidden="true">#</a> 服务端错误</h3><ul><li><strong>500</strong> <code>INTERNAL SERVER ERROR</code> -&gt; 【 <code>*</code> 】 =&gt; 服务器遇到了一个未曾预料的状况, 导致了它无法完成对请求的处理。</li><li><strong>501</strong> <code>Not Implemented</code> -&gt; 【 <code>*</code> 】 =&gt; 服务器不支持当前请求所需要的某个功能。</li><li><strong>502</strong> <code>Bad Gateway</code> -&gt; 【 <code>*</code> 】 =&gt; 作为网关或者代理工作的服务器尝试执行请求时, 从上游服务器接收到无效的响应。</li><li><strong>503</strong> <code>Service Unavailable</code> -&gt; 【 <code>*</code> 】 =&gt; 由于临时的服务器维护或者过载, 服务器当前无法处理请求。这个状况是临时的, 并且将在一段时间以后恢复。</li></ul>',26),L={href:"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html",target:"_blank",rel:"noopener noreferrer"},O=s('<h2 id="错误处理-error-handling" tabindex="-1"><a class="header-anchor" href="#错误处理-error-handling" aria-hidden="true">#</a> 错误处理（Error handling）</h2><ol><li>不要发生了错误但给 2xx 响应, 客户端可能会缓存成功的 http 请求；</li><li>正确设置 http 状态码, 不要自定义；</li><li>Response body 提供 1) 错误的代码（日志/问题追查）；2) 错误的描述文本（展示给用户）。</li><li>如果状态码是 4xx, 就应该向用户返回出错信息。一般来说, 返回的信息中将 error 作为键名, 出错信息作为键值即可。</li></ol><p>业务类异常必须提供 2 种信息:</p><ul><li>如果抛出该类异常, HTTP 响应状态码应该设成什么；</li><li>异常的文本描述；</li></ul><p>在 Controller 层使用统一的异常拦截器:</p><ul><li>设置 HTTP 响应状态码: 对业务类异常, 用它指定的 HTTP code；对非业务类异常, 统一 500；</li><li>Response Body 的错误码: 异常类名</li><li>Response Body 的错误描述: 对业务类异常, 用它指定的错误文本；对非业务类异常, 线上可以统一文案如“服务器端错误, 请稍后再试”, 开发或测试环境中用异常的 stacktrace, 服务器端提供该行为的开关。</li></ul><h2 id="返回结果" tabindex="-1"><a class="header-anchor" href="#返回结果" aria-hidden="true">#</a> 返回结果</h2><p>针对不同操作, 服务器向用户返回的结果应该符合以下规范。</p><ul><li><strong>Get</strong> <code>/collection</code> =&gt; 返回资源对象的列表（数组）</li><li><strong>Get</strong> <code>/collection/resource</code> =&gt; 返回单个资源对象</li><li><strong>POST</strong> <code>/collection</code> =&gt; 返回新生成的资源对象</li><li><strong>PUT</strong> <code>/collection/resource</code> =&gt; 返回完整的资源对象</li><li><strong>PATCH</strong> <code>/collection/resource</code> =&gt; 返回完整的资源对象</li><li><strong>DELETE</strong> <code>/collection/resource</code> =&gt; 返回一个空文档</li></ul><h2 id="hypermedia-api" tabindex="-1"><a class="header-anchor" href="#hypermedia-api" aria-hidden="true">#</a> Hypermedia API</h2>',10),N={href:"http://api.github.com/",target:"_blank",rel:"noopener noreferrer"},j=s(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;link&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;rel&quot;</span><span class="token operator">:</span> <span class="token string">&quot;collection https://www.example.com/zoos&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;href&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://api.example.com/zoos&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;title&quot;</span><span class="token operator">:</span> <span class="token string">&quot;List of zoos&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;application/vnd.yourformat+json&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码表示, 文档中有一个 link 属性, 用户读取这个属性就知道下一步该调用什么 API 了。rel 表示这个 API 与当前网址的关系（collection 关系, 并给出该 collection 的网址）, href 表示 API 的路径, title 表示 API 的标题, type 表示返回类型。</p>`,2),F={href:"http://en.wikipedia.org/wiki/HATEOAS",target:"_blank",rel:"noopener noreferrer"},B={href:"http://api.github.com/",target:"_blank",rel:"noopener noreferrer"},V=s(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;current_user_url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://api.github.com/user&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;authorizations_url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://api.github.com/authorizations&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),M={href:"http://api.github.com/user",target:"_blank",rel:"noopener noreferrer"},W=s(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Requires authentication&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;documentation_url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://developer.github.com/v3&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码表示, 服务器给出了提示信息, 以及文档的网址。</p><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2>`,3),J={href:"http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html",target:"_blank",rel:"noopener noreferrer"},K=e("li",null,"（2）服务器返回的数据格式, 应该尽量使用 JSON, 避免使用 XML。",-1);function X(Q,Y){const t=i("ExternalLinkIcon");return r(),l("div",null,[e("div",p,[g,e("p",null,[o('网络应用程序, 分为前端和后端两个部分。这时候必须有一种统一的机制, 方便不同的前端设备与后端进行通信。这导致 API 构架的流行, 甚至出现 "API First" 的设计思想。'),e("a",h,[u,o(),n(t)]),o(" 是目前比较成熟的一套互联网应用程序的 API 设计理论。")])]),c(" more "),_,e("div",m,[T,e("p",null,[o("该篇博文为补充 "),e("a",f,[o("RESTful API 设计指南- 阮一峰的网络日志"),n(t)])]),e("p",null,[e("a",b,[o("RESTful API 设计参考文献列表, 可帮助你更加彻底的了解 REST 风格的接口设计"),n(t)]),o("。")]),P]),v,e("p",null,[o("API 与用户的通信协议, 总是使用 "),e("a",k,[o("https"),n(t)]),o(" 协议。")]),E,A,e("p",null,[e("a",I,[o("https://api.example.com"),n(t)])]),x,e("p",null,[e("a",R,[o("https://example.org/api/"),n(t)])]),q,y,e("p",null,[e("a",H,[o("https://api.example.com/v1/"),n(t)])]),e("p",null,[o("另一种做法是, 将版本号放在 HTTP 头信息中, 但不如放入 URL 方便和直观。"),e("a",U,[o("Github"),n(t)]),o(" 采用这种做法。")]),S,w,e("ul",null,[e("li",null,[e("a",z,[o("https://api.example.com/v1/zoos"),n(t)])]),e("li",null,[e("a",D,[o("https://api.example.com/v1/animals"),n(t)])]),e("li",null,[e("a",G,[o("https://api.example.com/v1/employees"),n(t)]),o("、")])]),C,e("p",null,[o("状态码的完全列表参见"),e("a",L,[o("这里"),n(t)]),o("。")]),O,e("p",null,[o("RESTful API 最好做到 Hypermedia, 即返回结果中提供链接, 连向其他 API 方法, 使得用户不查文档, 也知道下一步应该做什么。 比如, 当用户向 "),e("a",N,[o("api.github.com"),n(t)]),o(" 的根目录发出请求, 会得到这样一个文档。")]),j,e("p",null,[o("Hypermedia API 的设计被称为 "),e("a",F,[o("HATEOAS"),n(t)]),o("。Github 的 API 就是这种设计, 访问 "),e("a",B,[o("api.github.com"),n(t)]),o(" 会得到一个所有可用 API 的网址列表。")]),V,e("p",null,[o("从上面可以看到, 如果想获取当前用户的信息, 应该去访问 "),e("a",M,[o("api.github.com/user"),n(t)]),o(", 然后就得到了下面结果。")]),W,e("ul",null,[e("li",null,[o("（1）API 的身份认证应该使用 "),e("a",J,[o("OAuth 2.0"),n(t)]),o(" 框架。")]),K])])}const ee=a(d,[["render",X],["__file","restfui-api.html.vue"]]);export{ee as default};
