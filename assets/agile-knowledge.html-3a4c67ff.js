import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as a,d,a as i,e as t}from"./app-89f8fb1f.js";const r="/assets/Iron-Triangle.png",h={},n=i("div",{class:"hint-container tip"},[i("p",{class:"hint-container-title"},"前言"),i("p",null,"在 PMP 中存在大量的敏捷知识点, 本篇将记录相关的重点知识。")],-1),c=t('<h2 id="预测型-瀑布型-的特点" tabindex="-1"><a class="header-anchor" href="#预测型-瀑布型-的特点" aria-hidden="true">#</a> 预测型（瀑布型）的特点</h2><ul><li>用计划驱动, 需求必须明确, 一开始就要收集详细的需求</li><li>如果需求经常发生变化, 需要通过变更流程修改计划</li><li>一开始就要编写大量的文档</li><li>客户参与度不高, 他们认为在收集需求的时候已经讲得很清楚了</li><li>需要花大量的时间来汇报当前的项目状态</li><li>价值只有到项目结束的时候才能显现, 造成了较高风险</li><li>无法灵活应对市场变化</li></ul><h2 id="mvp-minimum-viable-product-最小可行产品" tabindex="-1"><a class="header-anchor" href="#mvp-minimum-viable-product-最小可行产品" aria-hidden="true">#</a> MVP (Minimum Viable Product) 最小可行产品</h2><p>开发团队通过提供最小可行产品获取用户反馈, 并在这个最小化可行产品上持续快速迭代, 直到产品到达一个相对稳定的阶段。MVP 对于创业团队来说很重要, 可以快速验证团队的目标, 快速试错。</p><h2 id="敏捷宣言-4-大价值观" tabindex="-1"><a class="header-anchor" href="#敏捷宣言-4-大价值观" aria-hidden="true">#</a> 敏捷宣言（4 大价值观）</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>敏捷是一种通过创造变化和响应变化在不确定和混乱的环境中取得成功的能力。</p></div><p>我们正在通过亲自开发和帮助他人开发, 发现开发软件的更好方法。通过这项工作, 我们开始更重视：</p><ul><li>个体和交互 胜于 流程和工具</li><li>工作的软件 胜于 详尽的文档</li><li>客户合作 胜于 合同谈判</li><li>响应变化 胜于 遵循计划</li></ul><p>也就是说, 右栏中的项目固然有价值, 但我们更重视左栏中的项目</p><h2 id="敏捷十二原则" tabindex="-1"><a class="header-anchor" href="#敏捷十二原则" aria-hidden="true">#</a> 敏捷十二原则</h2><ul><li>准则 1：我们的最高目标是, 通过尽早和持续地交付有价值的软件来满足客户。(及早、持续不断、价值驱动交付、客户满意)</li><li>准则 2：欢迎对需求提出变更, 即使在项目开发后期也不例外。敏捷过程要善于利用需求变更, 帮助客户获得竞争优势。(拥抱变更、提高客户竞争优势)</li><li>准则 3：要经常交付可用的软件, 周期从几周到几个月不等, 且越短越好。(频繁交付、短周期)</li><li>准则 4：项目实施过程中, 业务人员与开发人员必须始终通力合作。(业务和开发相互合作、每天如此)</li><li>准则 5：要善于激励项目人员, 给予他们所需的环境和支持, 并相信他们能够完成任务。(提供环境、支持团队、对团队辅以信任)</li><li>准则 6：无论是对开发团队还是团队内部, 信息传达最有效的沟通方法是面对面的交谈。(面对面沟通效果最好、也可使用虚拟环境)</li><li>准则 7：可用的软件是衡量进度的首要衡量指标。(根据可工作的软件度量)</li><li>准则 8：敏捷过程提倡可持续的开发。项目发起人、开发人员和用户应该保持步调。(可持续开发、步调稳定)</li><li>准则 9：对技术的精益求精以及对设计的不断完善将提高敏捷性。(重构)</li><li>准则 10：简洁, 即尽最大可能减少不必要的工作。这是一门艺术。(简洁、专注团队)</li><li>准则 11：最佳的架构、需求和设计出自于自组织团队。(自组织团队)</li><li>准则 12：团队要定期反省怎么做才能更有效, 并相应地调整团队的行为。(定期回顾、不断改进)</li></ul><h2 id="敏捷项目章程" tabindex="-1"><a class="header-anchor" href="#敏捷项目章程" aria-hidden="true">#</a> 敏捷项目章程</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>敏捷项目章程中应包含 3 个关键信息：愿景, 任务和成功标准。</p></div><p>敏捷项目也是有项目章程的。</p><p>项目章程是重要的管理文件, 需要所有干系人的参与。</p><p>虽然专家建议章程应不超过一页, 但是因为所有的干系人必须参与进来并且达成一致意见, 所以创建项目章程是非常具有挑战性的。</p><h2 id="敏捷阶段框架" tabindex="-1"><a class="header-anchor" href="#敏捷阶段框架" aria-hidden="true">#</a> 敏捷阶段框架</h2><p>相较于结构化项目管理的启动、规划、执行、监控、收尾五大过程组, 部分流派将敏捷也做了一个五阶段框架：构想、推演、探索、适应、结束。他们不能直接跟结构化项目管理中五大过程组完全匹配对应, 但是可以粗略这样对应。</p><p>构想阶段, 得到产品愿景；推演阶段, 得到用户故事清单、产品待办事项列表、产品发布计划等；探索阶段, 执行得到完成的用户故事；适应阶段对完成的进行把关；结束阶段, 完结整个项目。</p><h2 id="四种生命周期及对比" tabindex="-1"><a class="header-anchor" href="#四种生命周期及对比" aria-hidden="true">#</a> 四种生命周期及对比</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>计划始终贯穿其中, 每种生命周期都有计划要素, 不同之处在于完成多少计划以及何时完成</p></div><ul><li>预测型生命周期：一种更为传统的方法, 提前进行大量的计划工作, 然后一次性执行；执行是一个连续的过程。也称为瀑布式。</li><li>迭代型生命周期：这种方法允许对未完成的工作进行反馈, 从而改进和修改该工作。</li><li>增量型生命周期：这种方法向客户提供各个已完成的, 可能立即使用的可交付成果。</li><li>敏捷(适应型)生命周期：这种方法既有迭代, 也有增量, 便于完善工作, 频繁交付。</li><li>混合型生命周期：可以实现预测向敏捷的过渡、可以在风险不大, 具有中低程度不确定性的项目中尝试</li></ul><table><thead><tr><th>方法</th><th>需求</th><th>活动</th><th>交付</th><th>目标</th></tr></thead><tbody><tr><td>预测型</td><td>固定</td><td>整个项目仅一次执行</td><td>一次交付</td><td>管理成本</td></tr><tr><td>迭代型</td><td>动态</td><td>反复执行直至修正</td><td>一次交付</td><td>解决方案的正确</td></tr><tr><td>增量型</td><td>动态</td><td>对给定增量执行一次</td><td>频繁更小规模交付</td><td>速度</td></tr><tr><td>敏捷型</td><td>动态</td><td>反复执行直至修正</td><td>频繁更小规模交付</td><td>通过频繁小规模交付和反馈实现的客户价值</td></tr></tbody></table><h2 id="仆人式领导" tabindex="-1"><a class="header-anchor" href="#仆人式领导" aria-hidden="true">#</a> 仆人式领导</h2><p>特征：建立社区、倾听、同理心、成长承诺、治愈能力、管理能力、意识、洞察力、说服力、化繁为简能力。</p><ol><li>帮助、促进团队发展。</li><li>为团队消除障碍。</li><li>为他人贡献铺路。</li><li>教育相关方, 使其了解为什么要敏捷以及如何敏捷。</li><li>通过指导、鼓励和帮助为团队提供支持。</li><li>通过技术项目管理活动, 如量化风险分析来帮助团队。</li><li>庆祝团队的成功, 为团队与外部团队合作提供支持, 并起到桥梁作用。</li></ol><h2 id="敏捷团队特征" tabindex="-1"><a class="header-anchor" href="#敏捷团队特征" aria-hidden="true">#</a> 敏捷团队特征</h2><ol><li>团队规模：3-9 名。</li><li>理想情况下, 集中办公。</li><li>100%专职成员、跨职能团队、通才型专家、自我激励自律的成员。</li><li>鼓励自我管理团队, 由团队成员决定谁执行下一阶段工作。</li><li>敏捷团队与仆人式领导一起茁壮成长, 领导支持团队的工作方法。</li><li>团队频繁创造产品增量, 团队集体对工作负责并共同拥有完成工作所需的所有必要技能。</li><li>限制在制品（WIP）、彼此依赖实现交付。</li><li>以各种方式开展合作（结对、群集、群体开发）。</li><li>敏捷项目要求拥有小规模全功能的团队, 人员不足时, 项目经理也可能要实现部分技术工作。</li></ol><h2 id="项目经理作为仆人式领导的职责" tabindex="-1"><a class="header-anchor" href="#项目经理作为仆人式领导的职责" aria-hidden="true">#</a> 项目经理作为仆人式领导的职责</h2><ol><li>帮助、促进团队发展。</li><li>为团队消除障碍。</li><li>为他人贡献铺路。</li><li>教育相关方, 使其了解为什么要敏捷以及如何敏捷。</li><li>通过指导、鼓励和帮助为团队提供支持。</li><li>通过技术项目管理活动, 如量化风险分析来帮助团队。</li><li>庆祝团队成功, 为团队与外部团队合作提供支持, 并起到桥梁作用。</li></ol><h2 id="敏捷中常见的四大会议" tabindex="-1"><a class="header-anchor" href="#敏捷中常见的四大会议" aria-hidden="true">#</a> 敏捷中常见的四大会议</h2><ul><li>迭代规划会议 <ul><li>确定下一个迭代要完成那些用户故事, 将大家一致认可的用户故事放入迭代待办事项清单中。</li></ul></li><li>每日站会 <ul><li>团队每天进行沟通的内部短会, 因一版只有 15 分钟且站立进行。</li><li>团队成员只需要讲三点内容：昨天做了什么, 今天计划要做什么, 遇到什么问题。</li></ul></li><li>迭代评审会议 <ul><li>在迭代结束前演示成果并接受评价的会议。</li></ul></li><li>回顾总结会议 <ul><li>哪些做得好, 哪些可以做得更好, 下次迭代准备做哪些改进。</li></ul></li></ul><h2 id="铁三角和敏捷三角" tabindex="-1"><a class="header-anchor" href="#铁三角和敏捷三角" aria-hidden="true">#</a> 铁三角和敏捷三角</h2><figure><img src="'+r+'" alt="铁三角和敏捷三角" tabindex="0" loading="lazy"><figcaption>铁三角和敏捷三角</figcaption></figure><p>传统项目铁三角：范围相对固定, 成本进度是变量；敏捷铁三角, 成本进度相对固定, 范围是变量；敏捷三角强调价值和质量, 约束（范围、进度、成本）。</p><h2 id="敏捷发布规则" tabindex="-1"><a class="header-anchor" href="#敏捷发布规则" aria-hidden="true">#</a> 敏捷发布规则</h2><h3 id="版本计划" tabindex="-1"><a class="header-anchor" href="#版本计划" aria-hidden="true">#</a> 版本计划</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>版本计划规定每个版本（原型）的发布时间</p></div><h3 id="发布计划" tabindex="-1"><a class="header-anchor" href="#发布计划" aria-hidden="true">#</a> 发布计划</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>发布计划规定每个版本的发布需要完成的迭代次数和每次迭代的时间</p></div><ul><li>产品愿景驱动产品路线图</li><li>产品路线图驱动发布规则</li><li>发布规则决定迭代计划</li></ul><h3 id="迭代计划" tabindex="-1"><a class="header-anchor" href="#迭代计划" aria-hidden="true">#</a> 迭代计划</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>迭代计划规定一个迭代期内所需实现的用户故事和时间要求</p></div><ul><li>迭代计划安排功能开发</li><li>通过用户故事交付的功能优先级排序（按故事点估算）</li><li>为交付用户故事所创建的任务（按小时估算）</li></ul><h2 id="极限编程" tabindex="-1"><a class="header-anchor" href="#极限编程" aria-hidden="true">#</a> 极限编程</h2><ul><li><code>计划游戏( Planning Game )</code>：快速制定计划、随着细节的不断变化而完善;</li><li><code>小型发布( Small Release )</code>：系统的设计要能够尽可能早地交付, 在非常短的周期内以递增的方式发布新版本, 可以很容易地估计每个迭代周期的进度, 便于控制工作量和风险；同时, 也可以及时处理用户的反馈;</li><li><code>系统隐喻( System Metaphor )</code>：找到合适的比喻传达信息;</li><li><code>简单设计( Simple Design )</code>：只处理当前的需求使设计保持简单;</li><li><code>测试驱动( Test-driven )</code>：先写测试代码再编写程序 TDD。（类似的还有 ATDD 验收测试驱动开发, BDD 行为驱动开发）;</li><li><code>重构( Refactoring )</code>：重新审视需求和设计, 重新明确地描述它们, 以符合新的和现有的需求；在不改变系统行为的前提下, 重新调整、优化系统的内部结构以减少复杂性、消除冗余、增加灵活性和提高性能;</li><li><code>结对编程( Pair Programming )</code>：由两个程序员在同一台电脑上共同编写解决同一问题的代码。通常一个人负责写编码, 而另一个负责保证代码的正确性与可读性;</li><li><code>集体所有权（Collective Ownership）</code>：任何人在任何时候都可以在系统中的任何位置更改任何代码。每个成员都有更改代码的权利, 所有的人对于全部代码负责;</li><li><code>持续集成( Continuous Integration )</code>：可以按日甚至按小时为客户提供可运行的版本；提倡在一天中集成系统多次, 而且随着需求的改变, 要不断的进行回归测试, 避免了一次系统集成的恶梦;</li><li><code>每周工作40小时( 40-hour Week )</code>：要求项目团队人员每周工作时间不能超过 40 小时, 加班不得连续超过两周, 否则反而会影响生产率;</li><li><code>现场客户( On-site Customer )</code>：在团队中加入一位真正的、起作用的用户, 他将全职负责回答问题;</li><li><code>编码标准( Code Standards )</code>：强调通过指定严格的代码规范来进行沟通, 尽可能减少不必要的文档。</li></ul><h2 id="工具" tabindex="-1"><a class="header-anchor" href="#工具" aria-hidden="true">#</a> 工具</h2><ul><li><code>【价值流程图】</code>：查看显出浪费的时间</li><li><code>【产品路线图】</code>：显示预期的可交付成果序列</li><li><code>【燃起图】</code>：可以对照预期应完成的工作来跟踪已完成的工作量</li><li><code>【燃尽图】</code>：可以显示剩余故事点的数量或已减少的风险敞口的数量</li></ul>',48);function o(s,p){return e(),a("div",null,[n,d(" more "),c])}const m=l(h,[["render",o],["__file","agile-knowledge.html.vue"]]);export{m as default};
