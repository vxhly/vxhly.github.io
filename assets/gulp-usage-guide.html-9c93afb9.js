import{_ as o,V as l,W as p,Z as c,X as s,Y as n,a0 as e,$ as t,G as i}from"./framework-0ab02afe.js";const u={},r=s("div",{class:"hint-container tip"},[s("p",{class:"hint-container-title"},"前言"),s("p",null,"本文主要介绍如何使用 Gulp.js, 来帮助你构建一个自动化的前端开发流程。总结并归类自身使用中所遇到的方法、问题, 便于新人上手和理解, 同时也作为一份 Gulp 参考文档来使用, 让你对 Gulp 有个更深入的了解。")],-1),d=t('<h2 id="gulp-是什么" tabindex="-1"><a class="header-anchor" href="#gulp-是什么" aria-hidden="true">#</a> Gulp 是什么</h2><p>Gulp 是基于 <code>Node.js</code> 的一个构建工具（自动任务运行器）, 开发者可以使用它构建自动化工作流程（前端集成开发环境）。一些常见、重复的任务, 例如: 网页自动刷新、CSS 预处理、代码检测、压缩图片、等等, 只需用简单的命令就能全部完成。使用它, 可以简化工作, 让你把重点放在功能开发上；同时减少人为失误, 提高开发效率和项目质量, 让专注更为专注。如果你之前接触过 Grunt, 那上手 Gulp 就会觉得非常容易理解。</p><h2 id="为什么使用-gulp-而不使用-grunt" tabindex="-1"><a class="header-anchor" href="#为什么使用-gulp-而不使用-grunt" aria-hidden="true">#</a> 为什么使用 Gulp 而不使用 Grunt</h2><p>构建前端自动化的工具有很多, 如: <code>Grunt</code> , <code>Brunch</code> , <code>Broccoli</code> 等, 而目前过内最流行的属于 Grunt, 之前我也在用使用, 那为什么选择 Gulp 来代替 Grunt？</p><p>简单的总结一下, 有三点:</p><ul><li>简洁: Gulp 侧重 <code>“代码优于配置”(code over configuration)</code> 。最直观的感受, 更为简单和清晰, 不需要像 Grunt 一样写一堆庞大的配置文件。</li><li>高效: Gulp 基于 <code>Node Streams（流</code> ）来构建任务, 避免磁盘反复 <code>I/O（读取/写入）</code> 。每个任务都是单独执行（坚持做一件事并且做好它）, 这使得它速度更快、更为纯粹。</li><li>易学: Gulp 核心 API 只有 4 个。简洁的 API 易于上手, 学习过程比较平滑。</li></ul><h2 id="gulp-核心-api" tabindex="-1"><a class="header-anchor" href="#gulp-核心-api" aria-hidden="true">#</a> Gulp 核心 API</h2><p>Gulp 的核心 API 只有 4 个: <code>src</code> 、 <code>dest</code> 、 <code>task</code> 、 <code>watch</code></p><ul><li><code>gulp.src(globs[, options])</code> =&gt; 指明源文件路径。<strong>globs</strong>: 路径模式匹配; <strong>options</strong>: 可选参数；</li><li><code>gulp.dest(path[, options])</code> =&gt; 指明处理后的文件输出路径。<strong>path</strong>: 路径（一个任务可以有多个输出路径）；<strong>options</strong>: 可选参数；</li><li><code>gulp.task(name[, deps], fn)</code> =&gt; 注册任务。<strong>name</strong>: 任务名称（通过 gulp name 来执行这个任务）; <strong>deps</strong>: 可选的数组, 在本任务运行中所需要所依赖的其他任务（当前任务在依赖任务执行完毕后才会执行）; <strong>fn</strong>: 任务函数（function 方法）；</li><li><code>gulp.watch(glob [, opts], tasks)</code> =&gt; 监视文件的变化并运行相应的任务。<strong>glob</strong>: 路径模式匹配; <strong>opts</strong>: 可以选配置对象; <strong>taks</strong>: 执行的任务；</li></ul>',9),h={href:"http://github.com/gulpjs/gulp/blob/master/docs/API.md",target:"_blank",rel:"noopener noreferrer"},g=t(`<h2 id="安装-gulp" tabindex="-1"><a class="header-anchor" href="#安装-gulp" aria-hidden="true">#</a> 安装 Gulp</h2><p>安装 Gulp 之前要确定系统中安装了 Node.js, 有了之后只需创建一个工作目录, 以下操作均在工作目录下执行。</p><h3 id="全局安装" tabindex="-1"><a class="header-anchor" href="#全局安装" aria-hidden="true">#</a> 全局安装</h3><p>深入设置任务之前, 需先安装 gulp:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> gulp <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这会将 gulp 安装到全域环境下, 让你可以存取 gulp 的 CLI。</p><h3 id="本地安装" tabindex="-1"><a class="header-anchor" href="#本地安装" aria-hidden="true">#</a> 本地安装</h3><p>接着, 需要在本地的工在目录进行安装。切换至你的工作目录, 执行以下命令（当然执行之前要先确定该目录下有 <code>package.json</code> 文件, 如果没有可以通过 <code>npm init</code> 进行创建）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> gulp --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述指令将 gulp 安装到本地的工作目录, 并纪录于 <code>package.json</code> 中的 <code>devDependencies</code> 选项内。</p><h2 id="安装-gulp-插件" tabindex="-1"><a class="header-anchor" href="#安装-gulp-插件" aria-hidden="true">#</a> 安装 Gulp 插件</h2><h3 id="推荐插件" tabindex="-1"><a class="header-anchor" href="#推荐插件" aria-hidden="true">#</a> 推荐插件</h3>`,12),k={href:"http://github.com/schickling/gulp-webserver",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/vohof/gulp-livereload",target:"_blank",rel:"noopener noreferrer"},v=s("strong",null,"Sass",-1),b={href:"http://github.com/sindresorhus/gulp-ruby-sass",target:"_blank",rel:"noopener noreferrer"},f=s("strong",null,"Autoprefixer",-1),_={href:"http://github.com/Metrime/gulp-autoprefixer",target:"_blank",rel:"noopener noreferrer"},x=s("strong",null,"CSS",-1),q={href:"http://github.com/jonathanepollack/gulp-minify-css",target:"_blank",rel:"noopener noreferrer"},G=s("strong",null,"JSHint",-1),j={href:"http://github.com/wearefractal/gulp-jshint",target:"_blank",rel:"noopener noreferrer"},w={href:"http://github.com/wearefractal/gulp-concat",target:"_blank",rel:"noopener noreferrer"},y={href:"http://github.com/terinjokes/gulp-uglify",target:"_blank",rel:"noopener noreferrer"},I={href:"http://github.com/sindresorhus/gulp-imagemin",target:"_blank",rel:"noopener noreferrer"},N={href:"http://github.com/vohof/gulp-livereload",target:"_blank",rel:"noopener noreferrer"},S={href:"http://github.com/peter-vilja/gulp-clean",target:"_blank",rel:"noopener noreferrer"},A={href:"http://github.com/jgable/gulp-cache/",target:"_blank",rel:"noopener noreferrer"},P={href:"http://github.com/mikaelbr/gulp-notify",target:"_blank",rel:"noopener noreferrer"},V=t(`<h3 id="通过-npm-进行安装" tabindex="-1"><a class="header-anchor" href="#通过-npm-进行安装" aria-hidden="true">#</a> 通过 npm 进行安装</h3><p><code>Install Format:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token punctuation">[</span>Module_Name<span class="token punctuation">]</span> --save-dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="gulp-任务配置" tabindex="-1"><a class="header-anchor" href="#gulp-任务配置" aria-hidden="true">#</a> Gulp 任务配置</h2><h3 id="创建-gulpfile-js-文件" tabindex="-1"><a class="header-anchor" href="#创建-gulpfile-js-文件" aria-hidden="true">#</a> 创建 gulpfile.js 文件</h3><p>在项目根目录中, 创建 <code>gulpfile.js</code> 文件, 用来配置和定义任务（ <code>task</code> ）。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">touch</span> gulpfile.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="我的安装插件" tabindex="-1"><a class="header-anchor" href="#我的安装插件" aria-hidden="true">#</a> 我的安装插件</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> gulp --save-dev               <span class="token comment"># 基础库</span>
<span class="token function">npm</span> <span class="token function">install</span> gulp-livereload --save-dev    <span class="token comment"># 网页自动刷新</span>
<span class="token function">npm</span> <span class="token function">install</span> gulp-webserver --save-dev     <span class="token comment"># 本地服务器</span>
<span class="token function">npm</span> <span class="token function">install</span> gulp-notify --save-dev        <span class="token comment"># 更新</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="我的-gulpfile-js-配置" tabindex="-1"><a class="header-anchor" href="#我的-gulpfile-js-配置" aria-hidden="true">#</a> 我的 gulpfile.js 配置</h3><p>打开 <code>gulpfile.js</code> 文件, 填写相关配置。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 引入 gulp</span>
<span class="token keyword">var</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;gulp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 基础库</span>

<span class="token comment">// 引入 gulp 插件</span>
<span class="token keyword">var</span> livereload <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;gulp-livereload&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 网页自动刷新（服务器控制客户端同步刷新）</span>
<span class="token keyword">var</span> webserver <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;gulp-webserver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 本地服务器</span>

<span class="token comment">// 注册任务</span>
gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">&quot;webserver&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  gulp
    <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">&quot;./&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 服务器目录（./ 代表根目录）</span>
    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>
      <span class="token function">webserver</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token comment">// 运行 gulp-webserver</span>
        <span class="token literal-property property">livereload</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 启用 LiveReload</span>
        <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 服务器启动时自动打开网页</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 监听任务</span>
gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">&quot;watch&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  gulp<span class="token punctuation">.</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token string">&quot;*.html&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;html&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 监听根目录下所有 .html 文件</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 默认任务</span>
gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;webserver&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;watch&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function B(C,L){const a=i("ExternalLinkIcon");return l(),p("div",null,[r,c(" more "),d,s("p",null,[s("a",h,[n("API 帮助文档"),e(a)])]),g,s("ul",null,[s("li",null,[n("静态服务器 ("),s("a",k,[n("gulp-webserver"),e(a)]),n(")")]),s("li",null,[n("网页自动刷新 ([gulp-livereload]["),s("a",m,[n("https://github.com/vohof/gulp-livereload"),e(a)]),n("])")]),s("li",null,[n("编译 "),v,n(" ("),s("a",b,[n("gulp-ruby-sass"),e(a)]),n(")")]),s("li",null,[f,n(" ("),s("a",_,[n("gulp-autoprefixer"),e(a)]),n(")")]),s("li",null,[n("缩小化(minify) "),x,n(" ("),s("a",q,[n("gulp-minify-css"),e(a)]),n(")")]),s("li",null,[G,n(" ("),s("a",j,[n("gulp-jshint"),e(a)]),n(")")]),s("li",null,[n("拼接 ("),s("a",w,[n("gulp-concat"),e(a)]),n(")")]),s("li",null,[n("丑化(Uglify) ("),s("a",y,[n("gulp-uglify"),e(a)]),n(")")]),s("li",null,[n("图片压缩 ("),s("a",I,[n("gulp-imagemin"),e(a)]),n(")")]),s("li",null,[n("即时重整(LiveReload) ("),s("a",N,[n("gulp-livereload"),e(a)]),n(")")]),s("li",null,[n("清理档案 ("),s("a",S,[n("gulp-clean"),e(a)]),n(")")]),s("li",null,[n("图片快取, 只有更改过得图片会进行压缩 ("),s("a",A,[n("gulp-cache"),e(a)]),n(")")]),s("li",null,[n("更动通知 ("),s("a",P,[n("gulp-notify"),e(a)]),n(")")])]),V])}const M=o(u,[["render",B],["__file","gulp-usage-guide.html.vue"]]);export{M as default};
