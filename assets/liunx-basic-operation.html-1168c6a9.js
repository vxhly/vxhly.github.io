import{_ as t,V as i,W as c,Z as d,X as a,Y as n,a0 as l,$ as s,G as o}from"./framework-dfdacaa9.js";const r="/assets/liunx-basic-1.png",p="/assets/liunx-basic-2.png",u="/assets/liunx-basic-3.png",h="/assets/liunx-basic-4.png",m={},v=a("div",{class:"hint-container tip"},[a("p",{class:"hint-container-title"},"前言"),a("p",null,"本篇是 Liunx 的学习笔记系列第五篇, 这一篇将介绍 Liunx 的基础操作。很多人觉得 Liunx 非常难学, 但不其然, 只要掌握一些基础的命令操作, Liunx 还是非常好上手的。")],-1),b=s(`<h2 id="liunx-终端" tabindex="-1"><a class="header-anchor" href="#liunx-终端" aria-hidden="true">#</a> Liunx 终端</h2><h3 id="终端和控制台的区别" tabindex="-1"><a class="header-anchor" href="#终端和控制台的区别" aria-hidden="true">#</a> 终端和控制台的区别</h3><p>终端 (Terminal) 和控制台 (Console) 是有区别的</p><p>终端本质上是对应着 Liunx 上的 <code>/dev/tty</code> 设备, Liunx 的多用户登陆就是通过不同的 <code>/dev/tty</code> 设备完成的, Liunx 默认提供了 6 个纯命令行界面的 <code>&quot;terminal&quot;</code> （准确的说这里应该是 6 个 <code>virtual consoles</code> ）来让用户登录, 你可以通过使用 <code>[Ctrl]+[Alt]+[F1]～[F6]</code> 进行切换, 不过在在线实验环境中可能无法切换, 因为特殊功能按键会被你主机系统劫持。当你切换到其中一个终端后想要切换回图形界面, 你可以按下 <code>[Ctrl]+[Alt]+[F7]</code> 来完成</p><h3 id="shell" tabindex="-1"><a class="header-anchor" href="#shell" aria-hidden="true">#</a> Shell</h3><p>Shell 是指&quot;提供给使用者使用界面&quot;的软件（命令解析器）, 类似于 DOS 下的 command (命令行)和后来的 cmd.exe。之所以被称作 shell 是因为它隐藏了操作系统底层的细节。就像是个 Shell (壳), 有壳就有核, 这里的核就是指的 UNIX/Liunx 内核。</p><h3 id="重要的快捷键-只列出常用的" tabindex="-1"><a class="header-anchor" href="#重要的快捷键-只列出常用的" aria-hidden="true">#</a> 重要的快捷键（只列出常用的）</h3><table><thead><tr><th>按键</th><th>作用</th></tr></thead><tbody><tr><td><strong>Tab</strong></td><td>进行命令补全</td></tr><tr><td><strong>Ctrl+c</strong></td><td>强行终止当前程序（最常用, 你可以放心它并不会使终端退出)</td></tr><tr><td><strong>Ctrl+d</strong></td><td>这个才是强制退出终端的(不用敲 exit 了)</td></tr><tr><td><strong>Ctrl+s</strong></td><td>暂定当前程序, 暂停后按下任意键恢复运行(网络交互有用)</td></tr><tr><td><strong>Ctrl+z</strong></td><td>将当前程序放到后台运行, 恢复到前台为命令 fg</td></tr><tr><td><strong>Ctrl+u</strong></td><td>删除光标所在的整行</td></tr><tr><td><strong>Ctrl+l</strong></td><td>清屏, 最常用</td></tr><tr><td><strong>Ctrl+k</strong></td><td>删除从光标所在位置到行末</td></tr><tr><td><strong>Alt+Backspace</strong></td><td>向前删除一个单词</td></tr><tr><td><strong>Shift+PgUp</strong></td><td>将终端显示向上滚动</td></tr><tr><td><strong>Shift+PgDn</strong></td><td>将终端显示向下滚动</td></tr></tbody></table><h3 id="使用通配符" tabindex="-1"><a class="header-anchor" href="#使用通配符" aria-hidden="true">#</a> 使用通配符</h3><p><code>举例:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">touch</span> love_<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">10</span><span class="token punctuation">}</span>_Liunx.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+r+'" alt="使用通配符" tabindex="0" loading="lazy"><figcaption>使用通配符</figcaption></figure><h3 id="shell-常用通配符" tabindex="-1"><a class="header-anchor" href="#shell-常用通配符" aria-hidden="true">#</a> shell 常用通配符</h3><table><thead><tr><th>通配符</th><th>作用</th></tr></thead><tbody><tr><td><strong>*</strong></td><td>匹配 0 或多个字符</td></tr><tr><td><strong>?</strong></td><td>匹配任意一个字符</td></tr><tr><td><strong>[list]</strong></td><td>匹配 list 中的任意单一字符</td></tr><tr><td><strong>[!list]</strong></td><td>匹配 除 list 中的任意单一字符以外的字符</td></tr><tr><td><strong>[c1-c2]</strong></td><td>匹配 c1-c2 中的任意单一字符 如: <code>[0-9] [a-z]</code></td></tr><tr><td><strong>{string1, string2, ...}</strong></td><td>匹配 sring1 或 string2 (或更多)其一字符串</td></tr><tr><td><strong>{c1..c2}</strong></td><td>匹配 c1-c2 中全部字符 如 <code>{1..10}</code></td></tr></tbody></table><h2 id="命令手册速查" tabindex="-1"><a class="header-anchor" href="#命令手册速查" aria-hidden="true">#</a> 命令手册速查</h2>',15),k={href:"http://man.linuxde.net/",target:"_blank",rel:"noopener noreferrer"},g=s(`<h2 id="liunx-用户管理" tabindex="-1"><a class="header-anchor" href="#liunx-用户管理" aria-hidden="true">#</a> Liunx 用户管理</h2><h3 id="获取当前登录的用户" tabindex="-1"><a class="header-anchor" href="#获取当前登录的用户" aria-hidden="true">#</a> 获取当前登录的用户</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">who</span> <span class="token comment"># 获取当前登录的所有用户信息（包括远程登录）</span>
<span class="token function">whoami</span> <span class="token comment"># 获取当前登录的用户名</span>
<span class="token function">who</span> am i <span class="token comment"># 获取当前登录用户的信息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="获取当前登录的用户" tabindex="0" loading="lazy"><figcaption>获取当前登录的用户</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><p>第一列表示打开当前伪终端的用户的用户名<br> 第二列的 pts/0 中 pts 表示伪终端, 所谓伪是相对于 /dev/tty 设备而言的, 使用 <code>[Ctrl]+[Alt]+[F1]～[F7]</code> 进行切换的 /dev/tty 设备, 这是&quot;真终端&quot;, 伪终端就是当你在图形用户界面使用 /dev/tty7 时每打开一个终端就会产生一个伪终端, pts/0 后面那个数字就表示打开的伪终端序号<br> 第三列则表示当前伪终端的启动时间</p></div><h3 id="创建用户、切换用户" tabindex="-1"><a class="header-anchor" href="#创建用户、切换用户" aria-hidden="true">#</a> 创建用户、切换用户</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>adduser <span class="token punctuation">[</span>userName<span class="token punctuation">]</span>            <span class="token comment"># 通过询问的方式进行新增用户</span>
<span class="token function">useradd</span> <span class="token parameter variable">-m</span> <span class="token punctuation">[</span>userName<span class="token punctuation">]</span>         <span class="token comment"># 通过自行添加参数方式新增用户</span>
<span class="token function">useradd</span> <span class="token parameter variable">-u</span> <span class="token number">0</span> <span class="token parameter variable">-o</span> <span class="token punctuation">[</span>userName<span class="token punctuation">]</span>    <span class="token comment"># 添加 uid 为 0 的用户,即 root 用户的别名,拥有 root 的权限</span>
<span class="token function">userdel</span> <span class="token parameter variable">-r</span> <span class="token punctuation">[</span>userName<span class="token punctuation">]</span>         <span class="token comment"># 永久删除用户</span>
<span class="token function">id</span>                          <span class="token comment"># 查看用户的 uid 或 gid 等信息</span>
<span class="token function">su</span> -                        <span class="token comment"># 切换到 root 用户</span>
<span class="token function">su</span> - <span class="token punctuation">[</span>userName<span class="token punctuation">]</span>             <span class="token comment"># 切换某一个用户</span>
<span class="token function">passwd</span>                      <span class="token comment"># 为当前用户设置密码</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>用户信息将被保存至 <code>/etc/passwd</code>, 用户密码将被保存至 <code>/etc/shadow</code><br> 使用 root 用户可以修改其内容, 只需使用 wq!, 强制保存就好</p></div><h3 id="创建组、添加组成员" tabindex="-1"><a class="header-anchor" href="#创建组、添加组成员" aria-hidden="true">#</a> 创建组、添加组成员</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">groupadd</span> <span class="token punctuation">[</span>groupName<span class="token punctuation">]</span>                <span class="token comment"># 添加用户组</span>
<span class="token function">groupdel</span> <span class="token punctuation">[</span>groupName<span class="token punctuation">]</span>                <span class="token comment"># 删除用户组</span>
<span class="token function">usermod</span> <span class="token parameter variable">-G</span> <span class="token punctuation">[</span>groupName<span class="token punctuation">]</span> <span class="token punctuation">[</span>userName<span class="token punctuation">]</span>     <span class="token comment"># 将用户 添加至用户组,-G 附属组,-g 主属组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>组信息将被保存至 <code>/etc/group</code>, 组密码将保存至 <code>/etc/gshadow</code><br> 使用 root 用户可以修改其内容, 只需使用 wq!, 强制保存就好</p></div><h3 id="禁用和解锁用户" tabindex="-1"><a class="header-anchor" href="#禁用和解锁用户" aria-hidden="true">#</a> 禁用和解锁用户</h3><h4 id="passwd-方法" tabindex="-1"><a class="header-anchor" href="#passwd-方法" aria-hidden="true">#</a> passwd 方法</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">passwd</span> <span class="token parameter variable">-l</span> <span class="token punctuation">[</span>userName<span class="token punctuation">]</span>    <span class="token comment">#禁用</span>
<span class="token function">passwd</span> <span class="token parameter variable">-u</span> <span class="token punctuation">[</span>userName<span class="token punctuation">]</span>    <span class="token comment">#解锁</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="修改-etc-shadow-文件-root-用户" tabindex="-1"><a class="header-anchor" href="#修改-etc-shadow-文件-root-用户" aria-hidden="true">#</a> 修改 <code>/etc/shadow</code> 文件（root 用户）</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /etc/shadow
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>禁用则在密码位前手工添加 ! （启用删除 ! 即可）, 如:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>test:<span class="token operator">!</span><span class="token variable">$1</span><span class="token variable">$afiVSYfG</span><span class="token variable">$utdc2qWLNrqNcy63Ca8301</span>:16998:0:99999:7:::
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>test:<span class="token operator">!</span><span class="token operator">!</span><span class="token variable">$1</span><span class="token variable">$afiVSYfG</span><span class="token variable">$utdc2qWLNrqNcy63Ca8301</span>:16998:0:99999:7:::
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 <code>:wq!</code> 强制保存</p><h4 id="usermod-方法" tabindex="-1"><a class="header-anchor" href="#usermod-方法" aria-hidden="true">#</a> usermod 方法</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">usermod</span> <span class="token parameter variable">-L</span> <span class="token punctuation">[</span>userName<span class="token punctuation">]</span>    <span class="token comment">#禁用</span>
<span class="token function">usermod</span> <span class="token parameter variable">-U</span> <span class="token punctuation">[</span>userName<span class="token punctuation">]</span>    <span class="token comment">#解锁</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设置用户一登录就要修改密码" tabindex="-1"><a class="header-anchor" href="#设置用户一登录就要修改密码" aria-hidden="true">#</a> 设置用户一登录就要修改密码</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>chage <span class="token parameter variable">-d</span> <span class="token number">0</span> <span class="token punctuation">[</span>userName<span class="token punctuation">]</span>
<span class="token comment"># 这个命令其实是把密码修改日期归 0 了 （/etc/shadow 文件第 3 个字段）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查看当前登录的用户的环境变量" tabindex="-1"><a class="header-anchor" href="#查看当前登录的用户的环境变量" aria-hidden="true">#</a> 查看当前登录的用户的环境变量</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">env</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="liunx-文件权限" tabindex="-1"><a class="header-anchor" href="#liunx-文件权限" aria-hidden="true">#</a> Liunx 文件权限</h2><h3 id="查看文件权限" tabindex="-1"><a class="header-anchor" href="#查看文件权限" aria-hidden="true">#</a> 查看文件权限</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ls</span> <span class="token parameter variable">-l</span>       <span class="token comment"># 可以简写成 ll,注意有些版本的 Liunx 不支持</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="权限介绍" tabindex="-1"><a class="header-anchor" href="#权限介绍" aria-hidden="true">#</a> 权限介绍</h4><figure><img src="`+u+'" alt="权限介绍" tabindex="0" loading="lazy"><figcaption>权限介绍</figcaption></figure><br><figure><img src="'+h+`" alt="权限介绍" tabindex="0" loading="lazy"><figcaption>权限介绍</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><p>通常我们使用数字表示权限, 4 为读取权限, 2 为写入权限, 1 为执行权限。所以权限为 777 的为最高权限</p></div><h3 id="权限的设置" tabindex="-1"><a class="header-anchor" href="#权限的设置" aria-hidden="true">#</a> 权限的设置</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chmod</span> <span class="token number">777</span> text.txt    <span class="token comment"># 设置最高权限</span>
<span class="token function">chmod</span> o+w text.txt    <span class="token comment"># 为其他用户添加写权限</span>
<span class="token function">chmod</span> g-r text.txt    <span class="token comment"># 为组中的所有用户去除读权限</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="修改所属者和所属组" tabindex="-1"><a class="header-anchor" href="#修改所属者和所属组" aria-hidden="true">#</a> 修改所属者和所属组</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chown</span> root text.txt         <span class="token comment"># 修改所属者</span>
<span class="token function">chgrp</span> text text.txt         <span class="token comment"># 修该所属组</span>
<span class="token function">chown</span> root:text text.txt    <span class="token comment"># 修改所属者和所属组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="liunx-文件的基本操作-很重要且很常用" tabindex="-1"><a class="header-anchor" href="#liunx-文件的基本操作-很重要且很常用" aria-hidden="true">#</a> Liunx 文件的基本操作（很重要且很常用）</h2><h3 id="文件操作" tabindex="-1"><a class="header-anchor" href="#文件操作" aria-hidden="true">#</a> 文件操作</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">touch</span> <span class="token builtin class-name">test</span>                            <span class="token comment"># 新建一个空文件</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;this is a text&quot;</span> <span class="token operator">&gt;</span> test.txt      <span class="token comment"># 输出内容重定向到文件,&gt; 覆盖操作</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;this is a text&quot;</span> <span class="token operator">&gt;&gt;</span> test.txt     <span class="token comment"># 输出内容重定向到文件,&gt;&gt; 追加操作</span>
<span class="token function">rm</span> <span class="token parameter variable">-f</span> test.txt                        <span class="token comment"># 删除文件</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="目录操作" tabindex="-1"><a class="header-anchor" href="#目录操作" aria-hidden="true">#</a> 目录操作</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> <span class="token punctuation">[</span>folderName<span class="token punctuation">]</span>                        <span class="token comment"># 新建目录</span>
<span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token punctuation">[</span>path<span class="token punctuation">]</span>/<span class="token punctuation">[</span>folderName<span class="token punctuation">]</span>              <span class="token comment"># 若父级目录不存在,则一起创建</span>
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token punctuation">[</span>path<span class="token punctuation">]</span>/<span class="token punctuation">[</span>folderName<span class="token punctuation">]</span>                <span class="token comment"># 删除目录</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="复制操作" tabindex="-1"><a class="header-anchor" href="#复制操作" aria-hidden="true">#</a> 复制操作</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cp</span> <span class="token builtin class-name">test</span> <span class="token punctuation">[</span>path<span class="token punctuation">]</span>/<span class="token punctuation">[</span>folderName<span class="token punctuation">]</span>                       <span class="token comment"># 复制文件爱内</span>
<span class="token function">cp</span> <span class="token parameter variable">-r</span> <span class="token punctuation">[</span>path<span class="token punctuation">]</span>/<span class="token punctuation">[</span>folderName<span class="token punctuation">]</span> <span class="token punctuation">[</span>path<span class="token punctuation">]</span>/<span class="token punctuation">[</span>folderName<span class="token punctuation">]</span>     <span class="token comment"># 复制目录</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="移动、重命名操作" tabindex="-1"><a class="header-anchor" href="#移动、重命名操作" aria-hidden="true">#</a> 移动、重命名操作</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mv</span> <span class="token punctuation">[</span>fileName<span class="token punctuation">]</span> <span class="token punctuation">[</span>path<span class="token punctuation">]</span>/<span class="token punctuation">[</span>folderName<span class="token punctuation">]</span>           <span class="token comment"># 移动文件</span>
<span class="token function">mv</span> <span class="token punctuation">[</span>fileName1<span class="token punctuation">]</span> <span class="token punctuation">[</span>fileName2<span class="token punctuation">]</span>                  <span class="token comment"># 重命名</span>

<span class="token comment"># 先用通配符批量创建 5 个文件</span>
<span class="token function">touch</span> file<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">5</span><span class="token punctuation">}</span>.txt
<span class="token comment"># 批量将这 5 个后缀为 .txt 的文本文件重命名为以 .c 为后缀的文件</span>
<span class="token function">rename</span> <span class="token string">&#39;s/\\.txt/\\.c/&#39;</span> *.txt
<span class="token comment"># 批量将这 5 个文件,文件名改为大写</span>
<span class="token function">rename</span> <span class="token string">&#39;y/a-z/A-Z/&#39;</span> *.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="查看文件" tabindex="-1"><a class="header-anchor" href="#查看文件" aria-hidden="true">#</a> 查看文件</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> /etc/passwd
<span class="token function">tail</span> <span class="token parameter variable">-n</span> <span class="token number">5</span> /etc/passwd       <span class="token comment"># 只输出文件的末尾 5 行</span>
<span class="token function">file</span> /bin/ls                <span class="token comment"># 可以查看文件的类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>适用于快速查看文件, 都是用来打印文件内容到标准输出（终端), 相同的命令有: cat (正序)、tac (倒序)、tail(按要求输出)和 nl 命令</p><h2 id="搜索文件" tabindex="-1"><a class="header-anchor" href="#搜索文件" aria-hidden="true">#</a> 搜索文件</h2><h3 id="whereis" tabindex="-1"><a class="header-anchor" href="#whereis" aria-hidden="true">#</a> whereis</h3><p>直接从数据库中查询简单快速</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">whereis</span> <span class="token function">ls</span>      <span class="token comment"># 直接从数据库中查询简单快速</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="locate" tabindex="-1"><a class="header-anchor" href="#locate" aria-hidden="true">#</a> locate</h3><p>快而全</p><p>通过 <code>&quot;/var/lib/mlocate/mlocate.db&quot;</code> 数据库查找, 不过这个数据库也不是实时更新的, 系统会使用定时任务每天自动执行 updatedb 命令更新一次, 所以有时候你刚添加的文件, 它可能会找不到, 你就得自己执行一次 updatedb 命令（在我们的环境中必须先执行一次该命令）。它可以用来查找指定目录下的不同文件类型,</p><p>如: 查找 <code>/etc</code> 下所有以 sh 开头的文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">locate</span> /etc/sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意, 它不只是在 etc 目录下查找并会自动递归子目录进行查找 查找 <code>/usr/share/</code> 下所有 jpg 文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">locate</span> /usr/share/*.jpg
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意要添加 <strong>*</strong> 号前面的反斜杠转义, 否则会无法找到 只统计数目可以加上 -c 参数, -i 参数忽略大小写进行查找, whereis 的 -b, -m, -s 同样适用</p><h3 id="which" tabindex="-1"><a class="header-anchor" href="#which" aria-hidden="true">#</a> which</h3><p>避免了进入程序进行测试, 很有用</p><p>which 本身是 shell 内建的一个命令, 我们通常使用 which 来确定是否安装了某个指定的软件, 因为它只从 PATH 环境变量指定的路径中去搜索命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">which</span> <span class="token function">man</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="find" tabindex="-1"><a class="header-anchor" href="#find" aria-hidden="true">#</a> find</h3><p>太精和太细, 知道前面的命令就已经足够了</p><p>find 应该是这几个命令中最强大的了, 它不但可以通过文件类型、文件名进行查找而且可以根据文件的属性（如文件的时间戳, 文件的权限等）进行搜索</p><p>举个栗子: 在指定目录下搜索指定文件名的文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">find</span> /etc/ <span class="token parameter variable">-name</span> interfaces
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意 find 命令的路径是作为第一个参数的, 基本命令格式为 <code>find [path] [option] [action]</code></p><h2 id="简单文件系统操作" tabindex="-1"><a class="header-anchor" href="#简单文件系统操作" aria-hidden="true">#</a> 简单文件系统操作</h2><h3 id="查看磁盘和目录的容量" tabindex="-1"><a class="header-anchor" href="#查看磁盘和目录的容量" aria-hidden="true">#</a> 查看磁盘和目录的容量</h3><h4 id="使用-df-命令查看磁盘的容量" tabindex="-1"><a class="header-anchor" href="#使用-df-命令查看磁盘的容量" aria-hidden="true">#</a> 使用 df 命令查看磁盘的容量</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">df</span>            <span class="token comment"># 以 blocks 的大小展示</span>
<span class="token function">df</span> <span class="token parameter variable">-h</span>         <span class="token comment"># 人性化输出,以更易读的方式展示</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用-du-命令查看目录的容量" tabindex="-1"><a class="header-anchor" href="#使用-du-命令查看目录的容量" aria-hidden="true">#</a> 使用 du 命令查看目录的容量</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 默认同样以blocks的大小展示</span>
<span class="token function">du</span>
<span class="token comment"># 加上-h参数,以更易读的方式展示</span>
<span class="token function">du</span> <span class="token parameter variable">-h</span>

<span class="token comment"># 只查看1级目录的信息</span>
<span class="token function">du</span> <span class="token parameter variable">-h</span> <span class="token parameter variable">-d</span> <span class="token number">0</span> ~
<span class="token comment"># 查看2级$ du -h -d 1 ~</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="挂载光盘和卸载光盘" tabindex="-1"><a class="header-anchor" href="#挂载光盘和卸载光盘" aria-hidden="true">#</a> 挂载光盘和卸载光盘</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mount</span> /dev/cdrom /mnt/cdrom     <span class="token comment"># 挂载光盘</span>
<span class="token function">umount</span> /dev/cdrom               <span class="token comment"># 卸载光盘</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="wc-命令-简单小巧的计数工具" tabindex="-1"><a class="header-anchor" href="#wc-命令-简单小巧的计数工具" aria-hidden="true">#</a> wc 命令, 简单小巧的计数工具</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wc</span> /etc/passwd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>分别只输出行数、单词数、字节数、字符数和输入文本中最长一行的字节数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 行数</span>
<span class="token function">wc</span> <span class="token parameter variable">-l</span> /etc/passwd

<span class="token comment"># 单词数</span>
<span class="token function">wc</span> <span class="token parameter variable">-w</span> /etc/passwd

<span class="token comment"># 字节数</span>
<span class="token function">wc</span> <span class="token parameter variable">-c</span> /etc/passwd

<span class="token comment"># 字符数</span>
<span class="token function">wc</span> <span class="token parameter variable">-m</span> /etc/passwd

<span class="token comment"># 最长行字节数</span>
<span class="token function">wc</span> <span class="token parameter variable">-L</span> /etc/passwd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>对于西文字符来说, 一个字符就是一个字节, 但对于中文字符一个汉子是大于 2 个字节的, 具体数目是由字符编码决定的</p></div><h2 id="常用的文本处理命令" tabindex="-1"><a class="header-anchor" href="#常用的文本处理命令" aria-hidden="true">#</a> 常用的文本处理命令</h2><h3 id="tr-命令" tabindex="-1"><a class="header-anchor" href="#tr-命令" aria-hidden="true">#</a> tr 命令</h3><p>tr 命令可以用来删除一段文本信息中的某些文字。或者将其进行转换 使用方式:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tr</span> <span class="token punctuation">[</span>option<span class="token punctuation">]</span><span class="token punctuation">..</span>.SET1 <span class="token punctuation">[</span>SET2<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>常用选项:</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td><strong>-d</strong></td><td>删除和 set1 匹配的字符, 注意不是全词匹配也不是按字符顺序匹配</td></tr><tr><td><strong>-s</strong></td><td>去除 set1 指定的在输入文本中连续并重复的字符</td></tr></tbody></table><p><code>操作举例: </code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 删除 &quot;hello shiyanlou&quot; 中所有的&#39;o&#39;,&#39;l&#39;,&#39;h&#39;</span>
<span class="token builtin class-name">echo</span> <span class="token string">&#39;hello shiyanlou&#39;</span> <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-d</span> <span class="token string">&#39;olh&#39;</span>

<span class="token comment"># 将&quot;hello&quot; 中的ll,去重为一个l</span>
<span class="token builtin class-name">echo</span> <span class="token string">&#39;hello&#39;</span> <span class="token operator">|</span> <span class="token function">tr</span> <span class="token parameter variable">-s</span> <span class="token string">&#39;l&#39;</span>

<span class="token comment"># 将输入文本,全部转换为大写或小写输出</span>
<span class="token function">cat</span> /etc/passwd <span class="token operator">|</span> <span class="token function">tr</span> <span class="token string">&#39;[:lower:]&#39;</span> <span class="token string">&#39;[:upper:]&#39;</span>
<span class="token comment"># 上面的&#39;[:lower:]&#39; &#39;[:upper:]&#39;你也可以简单的写作&#39;[a-z]&#39; &#39;[A-Z]&#39;,当然反过来将大写变小写也是可以的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="col-命令" tabindex="-1"><a class="header-anchor" href="#col-命令" aria-hidden="true">#</a> col 命令</h3><p>col 命令可以将 Tab 换成对等数量的空格建, 或反转这个操作. 用来格式化代码超爽 使用方式:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>col <span class="token punctuation">[</span>option<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>常用的选项有:</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td><strong>-x</strong></td><td>将 Tab 转换为空格</td></tr><tr><td><strong>-h</strong></td><td>将空格转换为 Tab（默认选项）</td></tr></tbody></table><p><code>操作举例: </code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看/etc/protocols中的不可见字符,可以看到很多^I,这其实就是Tab键转义成可见字符的符号</span>
<span class="token function">cat</span> <span class="token parameter variable">-A</span> /etc/protocols

<span class="token comment"># 使用col -x将/etc/protocols中的Tab转换为空格,然后再使用cat查看,你发现^I不见了</span>
<span class="token function">cat</span> /etc/protocols <span class="token operator">|</span> col <span class="token parameter variable">-x</span> <span class="token operator">|</span> <span class="token function">cat</span> <span class="token parameter variable">-A</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="福利-使用-wget-克隆网站" tabindex="-1"><a class="header-anchor" href="#福利-使用-wget-克隆网站" aria-hidden="true">#</a> 福利-使用 wget 克隆网站</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> <span class="token parameter variable">-c</span> <span class="token parameter variable">-m</span> <span class="token parameter variable">-k</span> <span class="token parameter variable">-np</span> <span class="token parameter variable">-p</span> <span class="token parameter variable">-E</span> <span class="token parameter variable">-U</span> Mozilla –no-check-certificate <span class="token punctuation">[</span>URL<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,103);function f(x,w){const e=o("ExternalLinkIcon");return i(),c("div",null,[v,d(" more "),b,a("p",null,[n("Liunx 下命令成千上百, 有个速查手册也是不错的, "),a("a",k,[n("Liunx 命令速查手册"),l(e)])]),g])}const _=t(m,[["render",f],["__file","liunx-basic-operation.html.vue"]]);export{_ as default};
