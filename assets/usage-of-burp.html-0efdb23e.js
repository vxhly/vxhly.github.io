import{_ as t,V as r,W as o,Z as d,X as e,Y as i,a0 as n,$ as c,G as s}from"./framework-ac7be777.js";const p="/assets/burp-1.png",u="/assets/burp-2.png",l="/assets/burp-3.png",h="/assets/burp-4.png",g="/assets/burp-5.png",f="/assets/burp-6.png",b="/assets/burp-7.png",_="/assets/burp-8.png",m="/assets/burp-9.png",B="/assets/burp-10.png",S="/assets/burp-11.png",x={},y=e("div",{class:"hint-container tip"},[e("p",{class:"hint-container-title"},"前言"),e("p",null,"此系列笔记是网络渗透工具的使用方法, 本篇是介绍 Web 应用程序测试工具 BurpSuite 的使用方法。Burp Suite 其多种功能可以帮我们执行各种任务, 请求的拦截和修改, 扫描 web 应用程序漏洞, 以暴力破解登陆表单, 执行会话令牌等多种的随机性检查。")],-1),z=e("h2",{id:"burp-suite-环境",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#burp-suite-环境","aria-hidden":"true"},"#"),i(" Burp Suite 环境")],-1),k=e("code",null,"kali Liunx",-1),w=e("code",null,"windows",-1),V=e("br",null,null,-1),v={href:"http://portswigger.net/burp/download.html",target:"_blank",rel:"noopener noreferrer"},C=c('<h3 id="jdk-安装和环境变量配置" tabindex="-1"><a class="header-anchor" href="#jdk-安装和环境变量配置" aria-hidden="true">#</a> JDK 安装和环境变量配置</h3><p><code>windows</code> 下安装 Burp Suite 需要 Java 环境进行支持, 由于本博客之前是有写过 JDK 的安装和环境变量的配置, 所以这里不再提供。</p><h2 id="设置代理" tabindex="-1"><a class="header-anchor" href="#设置代理" aria-hidden="true">#</a> 设置代理</h2><p>Burp Suite 带有一个代理, 通过默认端口 <code>8080</code> 上运行, 使用这个代理, 我们可以截获并修改从客户端到 web 应用程序的数据包。<br></p><figure><img src="'+p+'" alt="Burp Suite" tabindex="0" loading="lazy"><figcaption>Burp Suite</figcaption></figure><p>这里我们使用 <code>Chrome</code> 浏览器, 在 <code>Chrome</code> 浏览器里也需要设置代理方式<br></p><figure><img src="'+u+'" alt="Burp Suite" tabindex="0" loading="lazy"><figcaption>Burp Suite</figcaption></figure><h2 id="拦截改包和暴力破解" tabindex="-1"><a class="header-anchor" href="#拦截改包和暴力破解" aria-hidden="true">#</a> 拦截改包和暴力破解</h2><h3 id="模拟登录" tabindex="-1"><a class="header-anchor" href="#模拟登录" aria-hidden="true">#</a> 模拟登录</h3><p>这里使用漏洞集成平台 <code>DVWA</code> 来进行测试</p><figure><img src="'+l+'" alt="Burp Suite" tabindex="0" loading="lazy"><figcaption>Burp Suite</figcaption></figure><h3 id="拦截请求包" tabindex="-1"><a class="header-anchor" href="#拦截请求包" aria-hidden="true">#</a> 拦截请求包</h3><p>随意输入密码（这里填写的密码为 <code>123</code> ）, 点击登录, 在 Burp Suite 里就可以看到拦截的请求包（前提是设置好代理）<br></p><figure><img src="'+h+'" alt="Burp Suite" tabindex="0" loading="lazy"><figcaption>Burp Suite</figcaption></figure><h3 id="修改请求包" tabindex="-1"><a class="header-anchor" href="#修改请求包" aria-hidden="true">#</a> 修改请求包</h3><p>将拦截到的数据包 <code>Send to Intruder</code> （也可以使用 <code>Ctrl+I</code> ）<br></p><figure><img src="'+g+'" alt="Burp Suite" tabindex="0" loading="lazy"><figcaption>Burp Suite</figcaption></figure><p>在 <code>Position</code> 选项中设置需要破解的变量。 <code>Burpsuite</code> 会自动设置许多变量, 单击 <code>Clear</code> 按钮, 把默认变量全部清除, 然后选中密码 <code>123</code> , 单击 <code>Add</code> 按钮将之设为需要破解的变量。由于只有一个变量, 因而 <code>Attack type</code> 攻击类型这里选择 <code>Sniper</code> 。<br></p><figure><img src="'+f+'" alt="Burp Suite" tabindex="0" loading="lazy"><figcaption>Burp Suite</figcaption></figure><h3 id="添加字典" tabindex="-1"><a class="header-anchor" href="#添加字典" aria-hidden="true">#</a> 添加字典</h3><p>在 <code>Payloads</code> 选项中进行设置, 由于只有一个变量, 因而 <code>Payload set</code> 自动设置为 1, <code>Payload type</code> 这里设置为 <code>Simple list</code> 。在下面的 <code>Payload Options</code> 中, 我们添加可能的密码, 或者密码。<br></p><figure><img src="'+b+'" alt="Burp Suite" tabindex="0" loading="lazy"><figcaption>Burp Suite</figcaption></figure><h3 id="开始破解" tabindex="-1"><a class="header-anchor" href="#开始破解" aria-hidden="true">#</a> 开始破解</h3><p>在菜单栏中选择 <code>Intruder/Start attack</code> , 就可以开始暴力破解。<br></p><figure><img src="'+_+'" alt="Burp Suite" tabindex="0" loading="lazy"><figcaption>Burp Suite</figcaption></figure><h3 id="分析" tabindex="-1"><a class="header-anchor" href="#分析" aria-hidden="true">#</a> 分析</h3><p>在 <code>Results</code> 中, 双击 <code>length</code> 进行排序, 在这里所有登录成功或者登录失败的记录全部在这里。<br></p><figure><img src="'+m+'" alt="Burp Suite" tabindex="0" loading="lazy"><figcaption>Burp Suite</figcaption></figure><p>选中请求字节包最大的, 在 <code>Response/Render</code> 里就可以看到 <code>Welcome to the password protected area admin</code> 成功登录的信息<br></p><figure><img src="'+B+'" alt="Burp Suite" tabindex="0" loading="lazy"><figcaption>Burp Suite</figcaption></figure><h2 id="decode-和-encode" tabindex="-1"><a class="header-anchor" href="#decode-和-encode" aria-hidden="true">#</a> Decode 和 Encode</h2><p>Decoder 转化成规范的形式编码数据, 或转化成各种形式编码和散列的原始数据。它能够智能识别多种编码格式, 使用启发式技术。</p><p>下面这张图是将一段 URL 进行 encode（编码）<br></p><figure><img src="'+S+'" alt="Burp Suite" tabindex="0" loading="lazy"><figcaption>Burp Suite</figcaption></figure>',34);function D(I,N){const a=s("ExternalLinkIcon");return r(),o("div",null,[y,d(" more "),z,e("p",null,[k,i(" 里已经集成了 Burp Suite 工具, "),w,i(" 下安装 Burp Suite 之前请确定你的电脑里有 Java 环境"),V,i(),e("a",v,[i("Burp Suite 官网下载地址"),n(a)])]),C])}const E=t(x,[["render",D],["__file","usage-of-burp.html.vue"]]);export{E as default};
