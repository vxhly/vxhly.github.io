import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as n,d as i,a as e,e as d}from"./app-25a88abe.js";const r="/assets/liunx-apache-2.png",t="/assets/liunx-apache-3.png",l="/assets/liunx-apache-4.png",o="/assets/liunx-apache-5.png",c="/assets/liunx-apache-6.png",p="/assets/liunx-apache-7.png",u="/assets/liunx-apache-15.png",h="/assets/liunx-apache-9.png",v="/assets/liunx-apache-8.png",m="/assets/liunx-apache-10.png",g="/assets/liunx-apache-11.png",b="/assets/liunx-apache-12.png",f="/assets/liunx-apache-13.png",x={},k=e("div",{class:"hint-container tip"},[e("p",{class:"hint-container-title"},"前言"),e("p",null,"本篇是 Liunx 的服务配置笔记系列第四篇, 这一篇将具体介绍 Red Hat Liunx 下 APACHE 服务的安全配置。所谓 APACHE 就是一个 WEB 服务器, 为 WEB 网页提供服务。")],-1),A=d(`<h2 id="配置文件的位置" tabindex="-1"><a class="header-anchor" href="#配置文件的位置" aria-hidden="true">#</a> 配置文件的位置</h2><p>主配置文件: <strong>/etc/httpd/conf/httpd.conf</strong></p><h2 id="服务的启动与停止" tabindex="-1"><a class="header-anchor" href="#服务的启动与停止" aria-hidden="true">#</a> 服务的启动与停止</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>APACHE 的服务名并不叫做 <code>http</code> , 而是 <code>httpd</code> 。<br> 修改配置文件过后一定要重启 <code>httpd</code> 服务。</p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">service</span> httpd status        <span class="token comment"># 状态</span>
<span class="token function">service</span> httpd start         <span class="token comment"># 启动</span>
<span class="token function">service</span> httpd stop          <span class="token comment"># 暂停</span>
<span class="token function">service</span> httpd restart       <span class="token comment"># 重启</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="安全配置" tabindex="-1"><a class="header-anchor" href="#安全配置" aria-hidden="true">#</a> 安全配置</h2><h3 id="修改网站的根目录" tabindex="-1"><a class="header-anchor" href="#修改网站的根目录" aria-hidden="true">#</a> 修改网站的根目录</h3><p><code>Default Configuration:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>DocumentRoot <span class="token string">&quot;/var/www/html&quot;</span>
<span class="token operator">&lt;</span>Directory <span class="token string">&quot;/var/www/html&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>APACHE 默认配置的网站根目录是在 <code>/var/www/html</code> 下, 我们可以根据需求修改它。修改这个配置项的时候, 还需同时修改 <code>&lt;Directory &quot;/var/www/html&quot;&gt;</code> 这个配置项。</p></div><p>修改主配置文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>DocumentRoot <span class="token string">&quot;/mnt/www&quot;</span>
<span class="token operator">&lt;</span>Directory <span class="token string">&quot;/mnt/www/&quot;</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用客户端进行验证" tabindex="-1"><a class="header-anchor" href="#使用客户端进行验证" aria-hidden="true">#</a> 使用客户端进行验证</h4><p>验证之前, 请重启服务。使用浏览器打开即可。</p><p>验证之前, 还需创建网站存放的目录, 然后在创建一个测试的网页进行测试。</p><p><code>For Example:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> /mnt/www/
<span class="token builtin class-name">echo</span> <span class="token string">&quot;this is test.&quot;</span> <span class="token operator">&gt;&gt;</span> /mnt/www/index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来, 在浏览器里输入你的服务器的 <code>IP</code> 地址就可以访问了。<br></p><figure><img src="`+r+`" alt="APACHE 服务安全配置" tabindex="0" loading="lazy"><figcaption>APACHE 服务安全配置</figcaption></figure><h3 id="配置目录的别名" tabindex="-1"><a class="header-anchor" href="#配置目录的别名" aria-hidden="true">#</a> 配置目录的别名</h3><p>修改主配置文件</p><p>目录别名设置, 就是浏览器访问 <code>http://[host]/test</code> 时, 实际上访问的是 <code>/var/www/html/test</code> 目录。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Alias /test <span class="token string">&quot;/var/www/html/test&quot;</span>

<span class="token operator">&lt;</span>Directory<span class="token operator">&gt;</span>
  Options Indexes
  Order allow,deny
  allow from all
<span class="token operator">&lt;</span>/Directory<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+t+`" alt="APACHE 服务安全配置" tabindex="0" loading="lazy"><figcaption>APACHE 服务安全配置</figcaption></figure><h4 id="使用客户端进行验证-1" tabindex="-1"><a class="header-anchor" href="#使用客户端进行验证-1" aria-hidden="true">#</a> 使用客户端进行验证</h4><p>验证之前, 请重启服务。使用浏览器打开即可。这时候就需要跟上目录名了。</p><p>验证之前, 还需要创建测试目录和测试网站文件。</p><p><code>For Example:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> /var/www/html/test
<span class="token builtin class-name">echo</span> <span class="token string">&quot;dir dir dir dir.&quot;</span> <span class="token operator">&gt;&gt;</span> /var/www/html/index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来, 在浏览器里输入 <code>IP/test</code> 就可以访问了。注意大小写敏感。<br></p><figure><img src="`+l+`" alt="APACHE 服务安全配置" tabindex="0" loading="lazy"><figcaption>APACHE 服务安全配置</figcaption></figure><h3 id="关闭版本信息的显示" tabindex="-1"><a class="header-anchor" href="#关闭版本信息的显示" aria-hidden="true">#</a> 关闭版本信息的显示</h3><p><code>Default Configuration:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ServerSignature On
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你访问一个不存在的目录, 默认是会显示 APACHE 的版本信息, 这是很不安全的, 建议关掉, 注意大小写敏感。还可以设置为 <code>Off</code> 和 <code>EMail</code> 。其中 <code>Off</code> 是隐藏信息, <code>EMail</code> 是会显示管理员的 email 信息的。</p><p>修改主配置文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ServerSignature Off
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="使用客户端进行验证-2" tabindex="-1"><a class="header-anchor" href="#使用客户端进行验证-2" aria-hidden="true">#</a> 使用客户端进行验证</h4><p>先看一下, 没有进行修改之前会显示什么吧！随便写一个目录, 访问它吧！</p><figure><img src="`+o+'" alt="APACHE 服务安全配置" tabindex="0" loading="lazy"><figcaption>APACHE 服务安全配置</figcaption></figure><p>修改好配置之后, 重新访问, 再次看一下有没有吧！</p><figure><img src="'+c+`" alt="APACHE 服务安全配置" tabindex="0" loading="lazy"><figcaption>APACHE 服务安全配置</figcaption></figure><h3 id="禁用目录浏览、符号连接追踪" tabindex="-1"><a class="header-anchor" href="#禁用目录浏览、符号连接追踪" aria-hidden="true">#</a> 禁用目录浏览、符号连接追踪</h3><p><code>Default Configuration:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>Directory <span class="token string">&quot;/var/www/html&quot;</span><span class="token operator">&gt;</span>
  Options Index FollowSymLinks
  AllowOverride None
  Order allow,deny
  Allow from all
<span class="token operator">&lt;</span>/Directory<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Index</code> 是定义是否开启目录浏览, 默认开启, 要关闭只需添加 <code>-</code> ； <code>FollowSymLinks</code> 是定义是否符号连接追踪, 默认开启, 要关闭只需添加 <code>-</code> 。</p><p>修改主配置文件</p><p>由于之前修改过网站根目录, 所以在这里直接使用。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>Directory <span class="token string">&quot;/mnt/html&quot;</span><span class="token operator">&gt;</span>
  Options <span class="token parameter variable">-Index</span> <span class="token parameter variable">-FollowSymLinks</span>
  AllowOverride None
  Order allow,deny
  Allow from all
<span class="token operator">&lt;</span>/Directory<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="APACHE 服务安全配置" tabindex="0" loading="lazy"><figcaption>APACHE 服务安全配置</figcaption></figure><h4 id="使用客户端进行验证-3" tabindex="-1"><a class="header-anchor" href="#使用客户端进行验证-3" aria-hidden="true">#</a> 使用客户端进行验证</h4><ul><li>配置禁用目录浏览, 说白了就是当一个目录下没有类似于 <code>index.php</code> 、 <code>index.html</code> 、 <code>default.php</code> 、 <code>defaule.html</code> 等这样子的主页, APACHE 默认会把该目录下的目录结构给列出来, 禁用就是阻止其列出。</li><li>配置禁用符号连接追踪, 说白了就是防止某个用户偶然创建的一个符号连接指向文件爱呢系统的某一部分。</li><li>配置白名单, 其实就是限制一些 IP 地址, 让其不能访问 APACHE。</li><li>这些配置, 在实际使用的过程中才会有体会, 这里就不再进行测试了。</li></ul><h3 id="开启白名单" tabindex="-1"><a class="header-anchor" href="#开启白名单" aria-hidden="true">#</a> 开启白名单</h3><p><code>Default Configuration:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>Directory <span class="token string">&quot;/var/www/html&quot;</span><span class="token operator">&gt;</span>
  Options Index FollowSymLinks
  AllowOverride None
  Order allow,deny
  Allow from all
<span class="token operator">&lt;</span>/Directory<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接修改 <code>Allow from</code> 这一项, <code>Allow from</code> 是定义白名单, 默认是允许所有 IP 地址访问, 要限制只需把 <code>all</code> 替换成允许访问的 IP 地址就好。</p><p>修改主配置文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>Directory <span class="token string">&quot;/mnt/html&quot;</span><span class="token operator">&gt;</span>
  Options <span class="token parameter variable">-Index</span> <span class="token parameter variable">-FollowSymLinks</span>
  AllowOverride None
  Order allow,deny
  Allow from <span class="token number">192.168</span>.1.0/24
<span class="token operator">&lt;</span>/Directory<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="限制-http-请求包上限" tabindex="-1"><a class="header-anchor" href="#限制-http-请求包上限" aria-hidden="true">#</a> 限制 http 请求包上限</h3><p>HTTP 协议包包含请求包和应答包。HTTP 请求包(GET、POST 等请求方法)由三个部分构成, 分别是: <code>方法-URI-协议/版本</code> , 请求头即请求正文；HTTP 应答包和 HTTP 请求包相似, 由三个部分构成, 分别是: <code>协议-状态代码-描述</code> , 应答头即应答正文。</p><h4 id="limitrequestline-指令" tabindex="-1"><a class="header-anchor" href="#limitrequestline-指令" aria-hidden="true">#</a> LimitRequestLine 指令</h4><p>设置 HTTP 请求行的字节数限制。</p><p>LimitRequestLine 指令允许服务器管理员增加或减少客户端 HTTP 请求行允许大小的限制。因为请求行包括 HTTP 方法、URI、协议版本, 所以 LimitRequestLine 指令会限制请求 URI 的长度。服务器会需要这个值足够大以装载它所有的资源名, 包括可能在 GET 请求中所传递的查询部分的所有信息。</p><p>这个指令给了服务器管理员更大的可控性以控制客户端不正常的请求行为。这有助于避免某些形式的拒绝服务攻击。</p><h4 id="limitrequestfieldsize-指令" tabindex="-1"><a class="header-anchor" href="#limitrequestfieldsize-指令" aria-hidden="true">#</a> LimitRequestFieldSize 指令</h4><p>指定 HTTP 请求头允许的字节大小。</p><p>LimitRequestFieldSize 指令允许服务器管理员增加或减少 HTTP 请求头域大小的限制。一般来说, 服务器需要此值足够大, 以适应普通客户端的任何请求的头域大小。一个普通头域的大小对于不同的客户端来说是有很大差别的, 一般与用户配置他们的浏览器以支持更多的内容协议密切相关。SPNEGO 的认证头最大可能达到 12392 字节。</p><p>这个指令给了服务器管理员更大的可控性以控制客户端不正常的请求行为。这有助于避免某些形式的拒绝服务攻击。</p><h4 id="示例配置" tabindex="-1"><a class="header-anchor" href="#示例配置" aria-hidden="true">#</a> 示例配置</h4><p>默认配置中是没有 LimitRequestLine 指令和 LimitRequestFieldSize 指令, 需要手动添加</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>LimitRequestLine 1024k
LimitRequestFieldSize 1024k
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+u+`" alt="APACHE 服务安全配置" tabindex="0" loading="lazy"><figcaption>APACHE 服务安全配置</figcaption></figure><h2 id="配置-https" tabindex="-1"><a class="header-anchor" href="#配置-https" aria-hidden="true">#</a> 配置 https</h2><p>HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议要比 http 协议安全。</p><h3 id="生成密钥" tabindex="-1"><a class="header-anchor" href="#生成密钥" aria-hidden="true">#</a> 生成密钥</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>openssl genrsa <span class="token number">1024</span> <span class="token operator">&gt;</span> server.key
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是用 128 位 rsa 算法生成密钥, 得到 <code>server.key</code> 文件</p><h3 id="生成证书请求文件" tabindex="-1"><a class="header-anchor" href="#生成证书请求文件" aria-hidden="true">#</a> 生成证书请求文件</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>openssl req <span class="token parameter variable">-new</span> <span class="token parameter variable">-key</span> server.key <span class="token operator">&gt;</span> server.csr
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是用上面的密钥生成证书请求文件 <code>server.csr</code></p><h3 id="生成证书" tabindex="-1"><a class="header-anchor" href="#生成证书" aria-hidden="true">#</a> 生成证书</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>openssl req <span class="token parameter variable">-x509</span> <span class="token parameter variable">-days</span> <span class="token number">365</span> <span class="token parameter variable">-key</span> server.key <span class="token parameter variable">-in</span> server.csr <span class="token operator">&gt;</span> server.crt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是用前面生成的密钥和证书请求生成证书 <code>server.crt</code> , -days 参数指明证书有效期, 单位为天</p><h3 id="生成证书和密钥的例子" tabindex="-1"><a class="header-anchor" href="#生成证书和密钥的例子" aria-hidden="true">#</a> 生成证书和密钥的例子</h3><p>注意路径, 记住它。</p><figure><img src="`+h+`" alt="APACHE 服务安全配置" tabindex="0" loading="lazy"><figcaption>APACHE 服务安全配置</figcaption></figure><h3 id="确认是否安装-ssl-模块" tabindex="-1"><a class="header-anchor" href="#确认是否安装-ssl-模块" aria-hidden="true">#</a> 确认是否安装 ssl 模块</h3><p>只要确定系统中有 <code>mod_ssl.so</code> 文件, 就可以确定已经安装好 ssl 模块。记住路径吧！</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">find</span> / <span class="token parameter variable">-iname</span> <span class="token string">&quot;*mod_ssl.so*&quot;</span>    <span class="token comment"># 使用 find 命令进行搜索</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+v+`" alt="APACHE 服务安全配置" tabindex="0" loading="lazy"><figcaption>APACHE 服务安全配置</figcaption></figure><h3 id="配置-httpd-ssl-conf-文件" tabindex="-1"><a class="header-anchor" href="#配置-httpd-ssl-conf-文件" aria-hidden="true">#</a> 配置 httpd-ssl.conf 文件</h3><p>注意在此文件中配置证书和密钥, 注意路径, 这里就使用上面的路径。</p><p>系统中可能没有此文件, 可以先创建它, <code>For Example:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> /etc/httpd/conf/httpd-ssl.conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改主配置文件, 添加如下内容, <code>For Example:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>SSLCertificateFile /home/server.crt
SSLCertificateKeyFile /home/server.key
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置-httpd-conf-文件" tabindex="-1"><a class="header-anchor" href="#配置-httpd-conf-文件" aria-hidden="true">#</a> 配置 httpd.conf 文件</h3><h4 id="虚拟机设置" tabindex="-1"><a class="header-anchor" href="#虚拟机设置" aria-hidden="true">#</a> 虚拟机设置</h4><p>修改主配置文件, <code>For Example:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>NameVirtualHost *:443

<span class="token operator">&lt;</span>VirtualHost *:44<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>
  <span class="token punctuation">..</span>.
<span class="token operator">&lt;</span>/VirtualHost<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+m+`" alt="APACHE 服务安全配置" tabindex="0" loading="lazy"><figcaption>APACHE 服务安全配置</figcaption></figure><h4 id="修改主配置文件" tabindex="-1"><a class="header-anchor" href="#修改主配置文件" aria-hidden="true">#</a> 修改主配置文件</h4><p>打开 ssl 模块, 并引入配置文件</p><p>修改主配置文件, <code>For Example:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>LoadModule ssl_module /usr/lib/httpd/modules/mod_ssl.so
Include <span class="token string">&quot;/etc/httpd/conf/httpd-ssl.conf&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+g+`" alt="APACHE 服务安全配置" tabindex="0" loading="lazy"><figcaption>APACHE 服务安全配置</figcaption></figure><p>这里提供简洁方法, 在 vi 下使用 <code>:r !find / -iname &quot;*mod_ssl.so*&quot;</code> , 在配置文件中也可以很任性的将 <code>httpd-ssl.conf</code> 里的内容填入主配置文件。</p><p>修改主配置文件, <code>For Example:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>LoadModule ssl_module /usr/lib/httpd/modules/mod_ssl.so
SSLCertificateFile /home/server.crt
SSLCertificateKeyFile /home/server.key
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上的配置写在任何地方均生效, 但要注意的是配置中可能没有以下选项, 需要手动添加, <code>For Example:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>SSLEngine on
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是最好还是写在 <code>&lt;VirtualHost *:443&gt;&lt;/VirtualHost&gt;</code> 这个地方, <code>For Example:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">&lt;</span>VirtualHost *:44<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>
  LoadModule ssl_module /usr/lib/httpd/modules/mod_ssl.so
  SSLEngine on
  SSLCertificateFile /home/server.crt
  SSLCertificateKeyFile /home/server.key
<span class="token operator">&lt;</span>/VirtualHost<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="将监听-80-端口注释" tabindex="-1"><a class="header-anchor" href="#将监听-80-端口注释" aria-hidden="true">#</a> 将监听 80 端口注释</h4><p>如果不注释的话, 依然还可以通过 <code>http</code> 方式访问, 注释掉, 只能使用 <code>https</code> 方式访问。</p><p><code>For Example:</code> <br></p><figure><img src="`+b+'" alt="APACHE 服务安全配置" tabindex="0" loading="lazy"><figcaption>APACHE 服务安全配置</figcaption></figure><h3 id="访问" tabindex="-1"><a class="header-anchor" href="#访问" aria-hidden="true">#</a> 访问</h3><p>配置好了, 重启服务, 接下来就可以愉快的使用 <code>https</code> 来访问了。</p><p><code>For Example:</code> <br></p><figure><img src="'+f+'" alt="APACHE 服务安全配置" tabindex="0" loading="lazy"><figcaption>APACHE 服务安全配置</figcaption></figure>',121);function w(E,H){return s(),n("div",null,[k,i(" more "),A])}const y=a(x,[["render",w],["__file","liunx-service-apache.html.vue"]]);export{y as default};
