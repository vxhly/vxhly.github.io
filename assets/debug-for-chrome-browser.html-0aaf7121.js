import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as r,d as t,a as e,e as s}from"./app-24c5a7e4.js";const a="/assets/open-browser-debug-1.png",n="/assets/open-broswer-debug-2.png",c="/assets/open-browser-debug-3.png",g="/assets/broswer-debug-elements-1.png",d="/assets/broswer-debug-elements-2.png",l="/assets/browser-debug-network-1.png",p="/assets/browser-debug-network-2.png",u="/assets/browser-debug-network-4.png",f="/assets/browser-debug-network-5.png",h="/assets/browser-debug-network-6.png",m="/assets/browser-debug-sources-1.png",b="/assets/browser-debug-audits-3.png",_="/assets/browser-debug-console-1.png",w="/assets/browser-debug-console-2.png",x="/assets/browser-debug-moblie-1.png",k="/assets/browser-debug-moblie-2.png",S={},C=e("div",{class:"hint-container tip"},[e("p",{class:"hint-container-title"},"前言"),e("p",null,"作为前端开发人员, 最佳的调试环境便是浏览器自带的开发者工具, 此文则介绍 Chrome 浏览器的开发者工具的使用方法。")],-1),y=s('<h2 id="chrome-浏览器调试窗口中常用的标签页" tabindex="-1"><a class="header-anchor" href="#chrome-浏览器调试窗口中常用的标签页" aria-hidden="true">#</a> Chrome 浏览器调试窗口中常用的标签页</h2><ul><li><strong>Elements</strong>: 用于查看页面 <code>html</code> 代码</li><li><strong>NetWork</strong>: 用于查看页面的网络请求</li><li><strong>Sources</strong>: 用于查看页面所加载的源文件</li><li><strong>Timeline</strong>: 用于查看页面加载 <code>JavaScript</code> 、页面元素渲染等的时间</li><li><strong>Profiles</strong>: 用于做性能优化的, 包括查看 CPU 执行时间与内存占用</li><li><strong>Resource</strong>s: 用于查看保存再本地的一些信息, 比如 <code>cookie</code> 等</li><li><strong>Audits</strong>: 一般用于优化前端页面、加速网页加载速度</li><li><strong>Console</strong>: <code>JavaScript</code> 控制台, 这个面板可以查看错误信息、打印调试信息、写一些测试脚本, 还可以当作 <code>JavaScript API</code> 查看用。</li></ul><p>Chrome 浏览器不仅可以调试页面、 JavaScript、请求、资源、 cookie, 还可以模拟手机进行调试</p><h2 id="打开调试方法" tabindex="-1"><a class="header-anchor" href="#打开调试方法" aria-hidden="true">#</a> 打开调试方法</h2><h3 id="方法一" tabindex="-1"><a class="header-anchor" href="#方法一" aria-hidden="true">#</a> 方法一</h3><p>直接在页面上点击右键, 然后选择审查元素</p><figure><img src="'+a+'" alt="打开调试方法" tabindex="0" loading="lazy"><figcaption>打开调试方法</figcaption></figure><h3 id="方法二" tabindex="-1"><a class="header-anchor" href="#方法二" aria-hidden="true">#</a> 方法二</h3><p>在 Chrome 的工具中找到开发者工具</p><figure><img src="'+n+'" alt="打开调试方法" tabindex="0" loading="lazy"><figcaption>打开调试方法</figcaption></figure><h4 id="方法三" tabindex="-1"><a class="header-anchor" href="#方法三" aria-hidden="true">#</a> 方法三</h4><p>使用快捷键 Ctrl+Shift+I (或者 Ctrl+Shift+J 直接打开控制台), 或者直接按 F12</p><figure><img src="'+c+'" alt="打开调试方法" tabindex="0" loading="lazy"><figcaption>打开调试方法</figcaption></figure><h3 id="elements-标签页" tabindex="-1"><a class="header-anchor" href="#elements-标签页" aria-hidden="true">#</a> Elements 标签页</h3><p>Elements 标签页的左侧就是对页面 HTML 结构的查看与编辑, 你可以直接在某个元素上双击修改元素的属性。</p><figure><img src="'+g+'" alt="Elements 标签页" tabindex="0" loading="lazy"><figcaption>Elements 标签页</figcaption></figure><ul><li><strong>Add attribute</strong>: 向该元素添加其他的属性</li><li><strong>Edit as HTML</strong>: 直接对元素的 <code>HTML</code> 进行编辑, 或者删除某个元素, 所有的修改都会即时在页面上得到呈现。</li><li><strong>Copy</strong>: 可以将 <code>HTML</code> 代码直接复制下来, 在拷贝别人网站上面的 <code>HTML</code> 代码的时候灰常方便, 你懂的~~</li><li><strong>Hide element</strong>: 隐藏该元素</li><li><strong>Delete element</strong>: 删掉该元素</li><li><strong>Scroll into view</strong>: 视图滚动到选择的位置</li><li><strong>Break on</strong>: 可以对某个元素进行监听, 在 <code>JavaScript</code> 中对元素的属性或者 <code>HTML</code> 进行修改的时候, 直接触发断点, 跳转到对改元素进行修改的 <code>JavaScript</code> 代码处</li></ul><p>Elements 标签页的右侧可以对元素的 CSS 进行查看与编辑修改</p><figure><img src="'+d+'" alt="Elements 标签页" tabindex="0" loading="lazy"><figcaption>Elements 标签页</figcaption></figure><ul><li><strong>Styles</strong>: 看 <code>HTML</code> 元素的样式</li><li><strong>Computed</strong>: 可以看元素的盒子模型</li><li><strong>Event Listeners</strong>: 对元素的监听方法将会显示在这里</li><li><strong>DOM Breakpoints</strong>: <code>DOM</code> 树的断点调试, （通过右键某一个元素, 依次选择 <code>Break on</code> , 选择 <code>Attributes modifications</code> ）, 设置后刷新页面, 当元素的属性发生改变时, 暂停脚本并定位到该位置</li><li><strong>Properties</strong>: 可以查看到元素具有的方法与属性, 比查 <code>API</code> 手册要方便得多</li></ul><h2 id="network-标签页" tabindex="-1"><a class="header-anchor" href="#network-标签页" aria-hidden="true">#</a> Network 标签页</h2><p>Network 标签页对于分析网站请求的网络情况、查看某一请求的请求头和响应头还有响应内容很有用。 注意是在你打开 Chrome 开发者工具后发起的请求, 才会在这里显示的哦。</p><figure><img src="'+l+'" alt="Network 标签页" tabindex="0" loading="lazy"><figcaption>Network 标签页</figcaption></figure><p>点击左侧某一个具体请求 URL, 可以看到该请求的详细 HTTP 请求情况</p><figure><img src="'+p+'" alt="Network 标签页" tabindex="0" loading="lazy"><figcaption>Network 标签页</figcaption></figure><p>我们可以在这里看到 <code>HTTP 请求头</code> 、 <code>HTTP 响应头</code> 、 <code>HTTP 返回的内容</code> 等信息。</p><ul><li><strong>Headers</strong>: 请求头信息和响应头信息</li><li><strong>Preview</strong>: 预览结果, 如果是文件可以查看这个文件；如果是图片可以预览这个图片；如果是从服务器返回来的 <code>JSON</code> 数据, 可以查看格式话后的 <code>JSON</code></li><li><strong>Response</strong>: 从服务器返回的响应结果</li><li><strong>Cookies</strong>: 请求和响应的 <code>Cookie</code></li><li><strong>Timing</strong>: 具体的响应时间</li></ul><figure><img src="'+u+'" alt="Network 标签页" tabindex="0" loading="lazy"><figcaption>Network 标签页</figcaption></figure><br><figure><img src="'+f+'" alt="Network 标签页" tabindex="0" loading="lazy"><figcaption>Network 标签页</figcaption></figure><br><figure><img src="'+h+'" alt="Network 标签页" tabindex="0" loading="lazy"><figcaption>Network 标签页</figcaption></figure><h2 id="sources-标签页" tabindex="-1"><a class="header-anchor" href="#sources-标签页" aria-hidden="true">#</a> Sources 标签页</h2><p>Sources 标签页可以查看到请求的资源情况, 包括 CSS、 JavaScript、图片等的内容。也可以设置各种断点。对存储的内容进行编辑然后保存也会实时的反应到页面上。</p><figure><img src="'+m+'" alt="Sources 标签页" tabindex="0" loading="lazy"><figcaption>Sources 标签页</figcaption></figure><h2 id="audits-标签页" tabindex="-1"><a class="header-anchor" href="#audits-标签页" aria-hidden="true">#</a> Audits 标签页</h2><p>这个对于优化前端页面、加速网页加载速度很有用哦。（相当与 Yslow）</p><figure><img src="'+b+'" alt="Audits 标签页" tabindex="0" loading="lazy"><figcaption>Audits 标签页</figcaption></figure><h2 id="console-标签页" tabindex="-1"><a class="header-anchor" href="#console-标签页" aria-hidden="true">#</a> Console 标签页</h2><p>JavaScript 控制台, 前端开发人员最经常使用它来调试 js 的错误。</p><figure><img src="'+_+'" alt="Console 标签页" tabindex="0" loading="lazy"><figcaption>Console 标签页</figcaption></figure><br><figure><img src="'+w+'" alt="Console 标签页" tabindex="0" loading="lazy"><figcaption>Console 标签页</figcaption></figure><h2 id="移动端开发调试" tabindex="-1"><a class="header-anchor" href="#移动端开发调试" aria-hidden="true">#</a> 移动端开发调试</h2><p>可以模拟出不同分辨率的移动端显示的效果, 此效果仅供参考, 因为还有可能受浏览器的不同而显示效果不同。</p><figure><img src="'+x+'" alt="移动端开发调试" tabindex="0" loading="lazy"><figcaption>移动端开发调试</figcaption></figure><br><figure><img src="'+k+'" alt="移动端开发调试" tabindex="0" loading="lazy"><figcaption>移动端开发调试</figcaption></figure>',48);function N(T,z){return i(),r("div",null,[C,t(" more "),y])}const E=o(S,[["render",N],["__file","debug-for-chrome-browser.html.vue"]]);export{E as default};
