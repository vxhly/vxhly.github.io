import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as p,c as i,d as l,a as n,b as s,f as t,e}from"./app-89f8fb1f.js";const u="/assets/window-object.png",d={},r=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"前言"),n("p",null,"BOM (Browser Object Model) 是指浏览器对象模型, 是用于描述这种对象与对象之间层次关系的模型。")],-1),k=e(`<h2 id="bom-的定义" tabindex="-1"><a class="header-anchor" href="#bom-的定义" aria-hidden="true">#</a> BOM 的定义</h2><ul><li><code>BOM</code> 是 <code>browser object model</code> 的缩写, 简称浏览器对象模型</li><li><code>BOM</code> 提供了独立于内容而与浏览器窗口进行交互的对象</li><li>由于 <code>BOM</code> 主要用于管理窗口与窗口之间的通讯, 因此其核心对象是 <code>window</code></li><li><code>BOM</code> 由一系列相关的对象构成, 并且每个对象都提供了很多方法与属性</li><li><code>BOM</code> 缺乏标准, <code>JavaScript</code> 语法的标准化组织是 <code>ECMA</code> , <code>DOM</code> 的标准化组织是 <code>W3C</code></li><li><code>BOM</code> 最初是 <code>Netscape</code> 浏览器标准的一部分</li></ul><h3 id="bom-的结构图" tabindex="-1"><a class="header-anchor" href="#bom-的结构图" aria-hidden="true">#</a> BOM 的结构图</h3><p>在线查看 <a href="/assets/browser-object-model.jpg?attname=">browser-object-model.jpg</a><br> 请下载查看 <a href="/assets/browser-object-model.jpg?attname=">browser-object-model.jpg</a></p><h2 id="bom-和-dom-的不同之处" tabindex="-1"><a class="header-anchor" href="#bom-和-dom-的不同之处" aria-hidden="true">#</a> BOM 和 DOM 的不同之处</h2><h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h1><ul><li><code>BOM</code> 即浏览器对象模型, 主要用了访问一些和网页无关的浏览器功能。 如: <code>window</code> 、 <code>location</code> 、 <code>navigator</code> 、 <code>screen</code> 、 <code>history</code> 等对象。</li><li><code>DOM</code> 即文档对象模型, 针对 <code>HTML</code> （或 <code>XML</code> ）文档的 <code>API</code> （应用程序编程接口）。 描绘的一个层次化的节点树, 开发人员可以添加、 修改和删除页面的某一部分。</li></ul><h2 id="细说-bom-对象" tabindex="-1"><a class="header-anchor" href="#细说-bom-对象" aria-hidden="true">#</a> 细说 BOM 对象</h2><h3 id="window-对象" tabindex="-1"><a class="header-anchor" href="#window-对象" aria-hidden="true">#</a> window 对象</h3><p>window 对象表示浏览器的一个实例, 同时也是 ECMAScript 规定的 Global 对象。 （Global: 所有在全局作用域中定义的属性和函数, 都是 Global 对象的属性。 在浏览器中 Global 对象实际上就是 window 对象实现的 ） 全局作用域( 所有全局对象都可以通过 window 来访问 )</p><p><code>For Example:</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 全局对象都可以通过 window 的属性方式来访问</span>
<span class="token function">alert</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="弹出窗口" tabindex="-1"><a class="header-anchor" href="#弹出窗口" aria-hidden="true">#</a> 弹出窗口</h4><p><code>For Example:</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;https://www.baidu.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;NewWin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;height=400, width=400&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第三个参数还可能有的值如: <br></p><figure><img src="`+u+`" alt="window 对象" tabindex="0" loading="lazy"><figcaption>window 对象</figcaption></figure><h4 id="间歇调用-settimeout" tabindex="-1"><a class="header-anchor" href="#间歇调用-settimeout" aria-hidden="true">#</a> 间歇调用（setTimeout）</h4><p><code>For Example:</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 会在 1000 毫秒后执行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在间歇时间之前想要取消执行, 我们可以 <code>clearTimeout()</code> , <code>For Example:</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 设置超时调用</span>
<span class="token keyword">var</span> timeoutId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//注意:  把它取消</span>
<span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutId<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样我们也可以通过间歇调用模拟实现超时调用, <code>For Example:</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这里可以实现某些逻辑</span>
  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="超时调用-setinterval" tabindex="-1"><a class="header-anchor" href="#超时调用-setinterval" aria-hidden="true">#</a> 超时调用（setInterval）</h4><p><code>For Example:</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Hello world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每隔 1 秒 执行一遍</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果想要取消执行, 我们可以 <code>clearTimeout()</code> , <code>For Example:</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> timeId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token comment">// 这里可以执行某些逻辑</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">clearInterval</span><span class="token punctuation">(</span>timeId<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 注意和取消间歇调用不一样（clearTimeout）</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每隔1秒 执行一遍</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="location-对象" tabindex="-1"><a class="header-anchor" href="#location-对象" aria-hidden="true">#</a> location 对象</h3><p>location 对象说来也是奇怪, 它既是 window 的属性也是 document 属性, 且同时指向了同一个对象。 window 和 document 的关系: 浏览器中的 html 成为了 document 对象, 使我们可以通过 javascript 来访问、 操作 html 的元素。 且 documnet 对象是 window 对象的一部分, 可以通过 window.document 属性来访问。</p><h4 id="location-的属性" tabindex="-1"><a class="header-anchor" href="#location-的属性" aria-hidden="true">#</a> location 的属性</h4>`,32),m=n("thead",null,[n("tr",null,[n("th",null,"属性名"),n("th",null,"例子"),n("th",null,"说明")])],-1),v=n("tr",null,[n("td",null,"hash"),n("td",null,'"#contens"'),n("td",null,"返回 URL 中 hash（#号后跟零或多个字符）, 如果 URL 中不包含散列, 则返回空字符串")],-1),h=n("td",null,"host",-1),b={href:"http://www.baidu.com:80",target:"_blank",rel:"noopener noreferrer"},w=n("td",null,"返回服务器名和端口号",-1),g=n("td",null,"hostname",-1),f={href:"http://www.baidu.com",target:"_blank",rel:"noopener noreferrer"},_=n("td",null,"返回不带端口号的服务器名称",-1),j=n("td",null,"href",-1),x={href:"http://www.baidu.com",target:"_blank",rel:"noopener noreferrer"},q=n("td",null,"返回当前加载页面的完整 URL。 location 对象的 toString() 方法也返回该值",-1),y=n("tr",null,[n("td",null,"pathname"),n("td",null,'"/admin/"'),n("td",null,"返回 URL 中的目录或文件名")],-1),M=n("tr",null,[n("td",null,"port"),n("td",null,'"8080"'),n("td",null,"返回 URL 中指定的端口号, 如果 URL 中不包含端口号, 则返回空字符串")],-1),L=n("tr",null,[n("td",null,"protocol"),n("td",null,'"http:"'),n("td",null,"返回页面使用的协议。 通常是 http: 或者是 https:")],-1),O=n("tr",null,[n("td",null,"search"),n("td",null,'"?q=javascript&&tags=web"'),n("td",null,"返回 URL 中查询的字符串。 查询以 ？ 与前面的字符串分割, 用 && 连接多个类型的查询")],-1),B=e(`<p>有了上面这些属性, 我们可以非常方便的修改 <code>url</code> , <code>For Example:</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 假设初始 URL 为 http://www.wrox.com/WileyCDA/</span>
<span class="token comment">// 将 URL 修改为 &quot;http://www.wrox.com/WileyCDA/#section1&quot;</span>
location<span class="token punctuation">.</span>hash <span class="token operator">=</span> <span class="token string">&quot;#section1&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 将 URL 修改为 &quot;http://www.wrox.com/WileyCDA/?q=javascript&quot;</span>
location<span class="token punctuation">.</span>search <span class="token operator">=</span> <span class="token string">&quot;?q=javascript&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 将 URL 修改为 &quot;https://www.yahoo.com/WileyCDA/&quot;</span>
location<span class="token punctuation">.</span>hostname <span class="token operator">=</span> <span class="token string">&quot;www.yahoo.com&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 将 URL 修改为 &quot;https://www.yahoo.com/mydir/&quot;</span>
location<span class="token punctuation">.</span>pathname <span class="token operator">=</span> <span class="token string">&quot;mydir&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 将 URL 修改为 &quot;https://www.yahoo.com:8080/WileyCDA/&quot;</span>
location<span class="token punctuation">.</span>port <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>每次修改 <code>location</code> 的属性（ <code>hash</code> 除外）, 页面都会以新 URL 重新加载。 也就是说, 浏览器会生成一天后退的历史记录。 如果我们不想能够回退可以使用 <code>replace（）</code> 方法, <code>For Example:</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>location<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;https://www.baidu.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如此就不会有回退记录了。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>除了 <code>replace</code> 方法外还有个比较重要的方法。 <code>reload</code> 方法用来刷新。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重新加载（有可能从缓存中加载）</span>
location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重新加载（从服务器重新加载）也就是强制刷新</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="navigator-对象、-screen-对象" tabindex="-1"><a class="header-anchor" href="#navigator-对象、-screen-对象" aria-hidden="true">#</a> navigator 对象、 screen 对象</h3><p>navigator 对象主要用来识别客户端浏览器, 但是由于各类浏览器对 navigator 对象的实现各有不同, 这里就不细分析了。 screen 对象基本上只用来表明客户端的能力, 其中包括浏览器窗口外部的显示器的信息, 如像素宽度和高度等。 每种浏览器对其的支持程度也是不同的, 这里也不分析了。</p><h3 id="history-对象" tabindex="-1"><a class="header-anchor" href="#history-对象" aria-hidden="true">#</a> history 对象</h3><p>history 对象主要保存当前也网页的历史记录。 但出于安全考虑, 程序员不能够知道详细的 url。</p><p><code>For Example:</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>history<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 历史记录的数量</span>
history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 后退一页</span>
history<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 前进一页</span>
history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 后退一页</span>
history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 前进一页</span>
history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 前进两页</span>
history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token string">&quot;wrox.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 跳转到最近的 wrox.com 页面</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function E(R,U){const a=c("ExternalLinkIcon");return p(),i("div",null,[r,l(" more "),k,n("table",null,[m,n("tbody",null,[v,n("tr",null,[h,n("td",null,[s('"'),n("a",b,[s("www.baidu.com:80"),t(a)]),s('"')]),w]),n("tr",null,[g,n("td",null,[s('"'),n("a",f,[s("www.baidu.com"),t(a)]),s('"')]),_]),n("tr",null,[j,n("td",null,[s('"'),n("a",x,[s("http://www.baidu.com"),t(a)]),s('"')]),q]),y,M,L,O])]),B])}const F=o(d,[["render",E],["__file","browser-object-model.html.vue"]]);export{F as default};
