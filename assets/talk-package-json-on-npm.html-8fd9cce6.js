import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as i,d,a as n,b as s,f as a,e as o}from"./app-fdf13f0b.js";const r={},l=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"前言"),n("p",null,"package.json 是 Node.js 应用中比较重要的部分, 它定义了项目的依赖关系, 这里将介绍该文件各个配置项的作用。")],-1),u=o(`<h2 id="创建-package-json-文件" tabindex="-1"><a class="header-anchor" href="#创建-package-json-文件" aria-hidden="true">#</a> 创建 package.json 文件</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>安装包的信息可保持到项目的 <code>package.json</code> 文件中, 以便后续的其它的项目开发或者他人合作使用, 也说 <code>package.json</code> 在项目中是必不可少的。</p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="package-json-文件解读" tabindex="-1"><a class="header-anchor" href="#package-json-文件解读" aria-hidden="true">#</a> package.json 文件解读</h2><h3 id="默认值" tabindex="-1"><a class="header-anchor" href="#默认值" aria-hidden="true">#</a> 默认值</h3><p><code>npm</code> 会根据包内容设置一些默认值。</p><ul><li><p><code>&quot;scripts&quot;: {&quot;start&quot;: &quot;node server.js&quot;}</code> -- 如果包的根目录有 <code>server.js</code> 文件, <code>npm</code> 会默认将 <code>start</code> 命令设置为 <code>node server.js</code> 。</p></li><li><p><code>&quot;scripts&quot;:{&quot;preinstall&quot;: &quot;node-waf clean || true;node-waf configure build&quot;}</code> -- 如果包的根目录有 <code>wscript</code> 文件, <code>npm</code> 会默认将 <code>preinstall</code> 命令用 <code>node-waf</code> 进行编译。</p></li><li><p><code>&quot;scripts&quot;:{&quot;preinstall&quot;: &quot;node-gyp rebuild&quot;}</code> -- 如果包的根目录有 <code>binding.gyp</code> 文件, <code>npm</code> 会默认将 <code>preinstall</code> 命令用 <code>node-gyp</code> 进行编译。</p></li><li><p><code>&quot;contributors&quot;: [...]</code> -- 如果包的根目录有 <code>AUTHORS</code> 文件, <code>npm</code> 会默认逐行按 <code>Name &lt;email(url)</code> 格式处理, 邮箱和 <code>url</code> 是可选的。 <code>#号</code> 和 <code>空格</code> 开头的行会被忽略。</p></li></ul><h3 id="name" tabindex="-1"><a class="header-anchor" href="#name" aria-hidden="true">#</a> name</h3><div class="hint-container tip"><p class="hint-container-title">作用</p><p>在 <code>package.json</code> 中最重要的就是 <code>name</code> 和 <code>version</code> 字段。他们都是必须的, 如果没有就无法 <code>install</code> 。 <code>name</code> 和 <code>version</code> 一起组成的标识在假设中是唯一的。改变包应该同时改变 <code>version</code> 。<br> name 是这个东西的名字。注意:</p></div>`,9),v=o("<li>不要把 <code>node</code> 或者 <code>js</code> 放在名字中。因为你写了 <code>package.json</code> 它就被假定成为了 <code>js</code> , 不过你可以用 <code>&quot;engine&quot;字段</code> 指定一个引擎（见后文）。</li><li>这个名字会作为在 <code>URL</code> 的一部分、命令行的参数或者文件夹的名字。任何 <code>non-url-safe</code> 的字符都是不能用的。</li><li>这个名字可能会作为参数被传入 <code>require()</code> , 所以它应该比较短, 但也要意义清晰。</li>",3),h=n("code",null,"npm registry",-1),m={href:"http://registry.npmjs.org/",target:"_blank",rel:"noopener noreferrer"},k=o('<h3 id="version" tabindex="-1"><a class="header-anchor" href="#version" aria-hidden="true">#</a> version</h3><div class="hint-container tip"><p class="hint-container-title">作用</p><p>在 <code>package.json</code> 中最重要的就是 <code>name</code> 和 <code>version</code> 字段。他们都是必须的, 如果没有就无法 <code>install</code> 。 <code>name</code> 和 <code>version</code> 一起组成的标识在假设中是唯一的。改变包应该同时改变 <code>version</code> 。<br> <code>version</code> 必须能被 <code>node-semver</code> 解析, 它被包在 <code>npm</code> 的依赖中。（要自己用可以执行 <code>npm install semver</code> ）</p></div>',2),q={href:"http://npmjs.org/doc/misc/semver.html",target:"_blank",rel:"noopener noreferrer"},b=o(`<h3 id="description" tabindex="-1"><a class="header-anchor" href="#description" aria-hidden="true">#</a> description</h3><p>放简介, 字符串。方便屌丝们在 <code>npm search</code> 中搜索。</p><h3 id="keywords" tabindex="-1"><a class="header-anchor" href="#keywords" aria-hidden="true">#</a> keywords</h3><p>关键字, 数组、字符串。还是方便屌丝们在 <code>npm search</code> 中搜索。</p><h3 id="homepage" tabindex="-1"><a class="header-anchor" href="#homepage" aria-hidden="true">#</a> homepage</h3><p>项目官网的 <code>url</code> 。</p><p>注意: 这和 <code>“url”</code> 不一样。如果你放一个 <code>“url”</code> 字段, <code>registry</code> 会以为是一个跳转到你发布在其他地方的地址, 然后喊你滚粗。</p><p>嗯, 滚粗, 没开玩笑。</p><h3 id="bugs" tabindex="-1"><a class="header-anchor" href="#bugs" aria-hidden="true">#</a> bugs</h3><p>你项目的提交问题的 <code>url</code> 和（或） <code>邮件地址</code> 。这对遇到问题的屌丝很有帮助。 差不多长这样:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://github.com/owner/project/issues&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;project@hostname.com&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以指定一个或者指定两个。如果你只想提供一个 <code>url</code> , 那就不用对象了, 字符串就行。 如果提供了 <code>url</code> , 它会被 <code>npm bugs</code> 命令使用。</p><h3 id="license" tabindex="-1"><a class="header-anchor" href="#license" aria-hidden="true">#</a> license</h3><div class="hint-container tip"><p class="hint-container-title">作用</p><p>你应该要指定一个许可证, 让人知道使用的权利和限制的。<br> 最简单的方法是, 假如你用一个像 <code>BSD</code> 或者 <code>MIT</code> 这样通用的许可证, 就只需要指定一个许可证的名字, 像这样:</p></div><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;license&quot;</span><span class="token operator">:</span> <span class="token string">&quot;BSD&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你又更复杂的许可条件, 或者想要提供给更多地细节, 可以这样:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;licenses&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token property">&quot;type&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;MyLicense&quot;</span> <span class="token punctuation">,</span>
    <span class="token property">&quot;url&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;&lt;https://github.com/owner/project/path/to/license&gt;&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在根目录中提供一个许可证文件也蛮好的。</p><h3 id="people-fields-author-contributors" tabindex="-1"><a class="header-anchor" href="#people-fields-author-contributors" aria-hidden="true">#</a> people fields: author, contributors</h3><p><code>author</code> 是一个人。 <code>contributors</code> 是一堆人的数组。 <code>person</code> 是一个有 <code>name</code> 字段, 可选的有 <code>url</code> 、 <code>email</code> 字段的对象, 像这样:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Barney Rubble&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;b@rubble.com&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://barnyrubble.tumblr.com/&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者可以把所有的东西都放到一个字符串里, <code>npm </code> \`会给你解析:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token string">&quot;Barney Rubble &lt;b@rubble.com&gt; (https://barnyrubble.tumblr.com/)&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>email</code> 和 <code>url</code> 在两种形式中都是可选的。</p><p>也可以在你的 <code>npm</code> 用户信息中设置一个顶级的 <code>maintainers</code> 字段。</p><h3 id="files" tabindex="-1"><a class="header-anchor" href="#files" aria-hidden="true">#</a> files</h3><p><code>files</code> 是一个包含项目中的文件的数组。如果命名了一个文件夹, 那也会包含文件夹中的文件。（除非被其他条件忽略了）</p><p>你也可以提供一个 <code>.npmignore</code> 文件, 让即使被包含在 <code>files</code> 字段中得文件被留下。其实就像 <code>.gitignore</code> 一样。</p><h3 id="main" tabindex="-1"><a class="header-anchor" href="#main" aria-hidden="true">#</a> main</h3><p><code>main</code> 字段配置一个文件名指向模块的入口程序。如果你包的名字叫 <code>foo</code> , 然后用户 <code>require(&quot;foo&quot;)</code> , <code>main</code> 配置的模块的 <code>exports</code> 对象会被返回。</p><p>这应该是一个相对于根目录的文件路径。</p><p>对于大多数模块, 它是非常有意义的, 其他的都没啥。</p><h3 id="bin" tabindex="-1"><a class="header-anchor" href="#bin" aria-hidden="true">#</a> bin</h3><p>很多包都有一个或多个可执行的文件希望被放到 <code>PATH</code> 中。 <code>npm</code> 让妈妈再也不用担心了（实际上, 就是这个功能让 <code>npm</code> 可执行的）。</p><p>要用这个功能, 给 <code>package.json</code> 中的 <code>bin</code> 字段一个命令名到文件位置的 <code>map</code> 。初始化的时候 <code>npm</code> 会将他链接到 <code>prefix/bin（全局初始化）</code> 或者 <code>./node_modules/.bin/（本地初始化）</code> 。</p><p>比如, <code>npm</code> 有:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;bin&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;npm&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./cli.js&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以, 当你初始化 <code>npm</code> , 它会创建一个符号链接到 <code>cli.js</code> 脚本到 <code>/usr/local/bin/npm</code> 。</p><p>如果你只有一个可执行文件, 并且名字和包名一样。那么你可以只用一个字符串, 比如:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my-program&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.2.5&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;bin&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./path/to/program&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果和这个一样:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;my-program&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.2.5&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;bin&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;my-program&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./path/to/program&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="man" tabindex="-1"><a class="header-anchor" href="#man" aria-hidden="true">#</a> man</h3><p>指定一个单一的文件或者一个文件数组供 <code>man</code> 程序使用。如果只提供一个单一的文件, 那么它初始化后就是 <code>man &lt;pkgname&gt;</code> 的结果, 而不管实际的文件名是神马, 比如:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.2.3&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;A packaged foo fooer for fooing foos&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;foo.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;man&quot;</span><span class="token operator">:</span> <span class="token string">&quot;./man/doc.1&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样 <code>man foo</code> 就可以用到 <code>./man/doc.1</code> 文件了。</p><p>如果文件名不是以包名开头, 那么它会被冠以前缀, 下面的:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.2.3&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;A packaged foo fooer for fooing foos&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;foo.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;man&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./man/foo.1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./man/bar.1&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会为 <code>man foo</code> 和 <code>man foo-bar</code> 创建文件。</p><p><code>man</code> 文件需要以数字结束, 然后可选地压缩后以 <code>.gz</code> 为后缀。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.2.3&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;A packaged foo fooer for fooing foos&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;foo.js&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;man&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;./man/foo.1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;./man/foo.2&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会为 <code>man foo</code> 和 <code>man 2 foo</code> 创建。</p><h3 id="directories" tabindex="-1"><a class="header-anchor" href="#directories" aria-hidden="true">#</a> directories</h3><p><code>CommonJS Packages</code> 规范说明了几种方式让你可以用 <code>directorieshash</code> 标示出包得结构。如果看一下 <code>npm&#39;s package.json</code> , 你会看到有 <code>directories</code> 标示出 doc, lib, and man。</p><p>在未来, 这个信息可能会被用到。</p><h3 id="directories-lib" tabindex="-1"><a class="header-anchor" href="#directories-lib" aria-hidden="true">#</a> directories.lib</h3><p>告诉屌丝们你的库文件夹在哪里。目前没有什么特别的东西需要用到 <code>lib</code> 文件夹, 但确实是重要的元信息。</p><h3 id="directories-bin" tabindex="-1"><a class="header-anchor" href="#directories-bin" aria-hidden="true">#</a> directories.bin</h3><p>如果你指定一个 <code>&quot;bin&quot;</code> 目录, 然后在那个文件夹中得所有文件都会被当做 <code>&quot;bin&quot;</code> 字段使用。<br> 如果你已经指定了 <code>&quot;bin&quot;</code> 字段, 那这个就无效。</p><h3 id="directories-man" tabindex="-1"><a class="header-anchor" href="#directories-man" aria-hidden="true">#</a> directories.man</h3><p>一个放满 <code>man</code> 页面的文件夹。贴心地创建一个 <code>&quot;man&quot;</code> 字段。</p><h3 id="directories-doc" tabindex="-1"><a class="header-anchor" href="#directories-doc" aria-hidden="true">#</a> directories.doc</h3><p>将 <code>markdown</code> 文件放在这里。最后, 这些会被很好地展示出来,</p><h3 id="directories-example" tabindex="-1"><a class="header-anchor" href="#directories-example" aria-hidden="true">#</a> directories.example</h3><p>将事例脚本放在这里。某一天, 它可能会以聪明的方式展示出来。</p><h3 id="repository" tabindex="-1"><a class="header-anchor" href="#repository" aria-hidden="true">#</a> repository</h3><div class="hint-container tip"><p class="hint-container-title">作用</p><p>指定你的代码存放的地方。这个对希望贡献的人有帮助。如果 git 仓库在 github 上, 那么 npm docs 命令能找到你。</p></div><p>这样做:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token property">&quot;repository&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;git&quot;</span> <span class="token punctuation">,</span>
  <span class="token property">&quot;url&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;&lt;https://github.com/isaacs/npm.git&gt;&quot;</span>
<span class="token punctuation">}</span>

<span class="token property">&quot;repository&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;type&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;svn&quot;</span> <span class="token punctuation">,</span>
  <span class="token property">&quot;url&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;&lt;http://v8.googlecode.com/svn/trunk/&gt;&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>URL</code> 应该是公开的（即便是只读的）能直接被未经过修改的版本控制程序处理的 <code>url</code> 。不应该是一个 html 的项目页面。因为它是给计算机看的。</p><h3 id="scripts" tabindex="-1"><a class="header-anchor" href="#scripts" aria-hidden="true">#</a> scripts</h3>`,71),g=n("code",null,'"scripts"',-1),f=n("code",null,"hash",-1),j=n("code",null,"key",-1),_=n("code",null,"value",-1),y=n("br",null,null,-1),x={href:"http://npmjs.org/doc/misc/npm-scripts.html",target:"_blank",rel:"noopener noreferrer"},w=o(`<h3 id="config" tabindex="-1"><a class="header-anchor" href="#config" aria-hidden="true">#</a> config</h3><p><code>&quot;config&quot; hash</code> 可以用来配置用于包脚本中的跨版本参数。在实例中, 如果一个包有下面的配置:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;config&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;port&quot;</span><span class="token operator">:</span> <span class="token string">&quot;8080&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后有一个 <code>“start”</code> 命令引用了 <code>npm_package_config_port</code> 环境变量, 用户可以通过 <code>npm config set foo:port 8001</code> 来重写他。</p>`,4),D={href:"http://npmjs.org/doc/misc/npm-config.html",target:"_blank",rel:"noopener noreferrer"},L={href:"http://npmjs.org/doc/misc/npm-scripts.html",target:"_blank",rel:"noopener noreferrer"},R=n("h3",{id:"dependencies",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#dependencies","aria-hidden":"true"},"#"),s(" dependencies")],-1),U={class:"hint-container tip"},S=n("p",{class:"hint-container-title"},"作用",-1),G=n("code",null,"hash",-1),N=n("code",null,"tarball",-1),V=n("code",null,"git URL",-1),B=n("br",null,null,-1),z=n("code",null,"dependencieshash",-1),A=n("code",null,"devDependencies",-1),C=n("br",null,null,-1),E={href:"http://npmjs.org/doc/misc/semver.html",target:"_blank",rel:"noopener noreferrer"},H=o("<li><code>version</code> 必须完全和 <code>version</code> 一致</li><li><code>&gt;version</code> 必须比 <code>version</code> 大</li><li><code>&gt;=version</code> 同上</li><li><code>&lt;version</code> 同上</li><li><code>&lt;=version</code> 同上</li>",5),T=n("code",null,"~version",-1),I={href:"http://npmjs.org/doc/misc/semver.html",target:"_blank",rel:"noopener noreferrer"},O=o("<li><code>1.2.x</code> , <code>1.2.0</code> , <code>1.2.1</code> , 等, 但不包括 <code>1.3.0</code></li><li><code>//...</code> 见下文 <code>&#39;依赖 URL&#39;</code></li><li><code>*</code> 所有</li><li><code>&quot;&quot;</code> 空, 同 <code>*</code></li><li><code>version1 - version2</code> 同 <code>&gt;=version1 &lt;=version2</code></li><li><code>range1 || range2</code> 二选一。</li><li><code>git...</code> 见下文 <code>&#39;依赖Git URL&#39;</code></li><li><code>user/repo</code> 见下文 <code>&#39;GitHub URLs&#39;</code> 比如下面都是合法的:</li>",8),P=o(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;foo&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0 - 2.9999.9999&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;bar&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&gt;=1.0.2 &lt;2.1.2&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;baz&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&gt;1.0.2 &lt;=2.3.4&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;boo&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2.0.1&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;qux&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&lt;1.0.0 || &gt;=2.3.1 &lt;2.4.5 || &gt;=2.5.2 &lt;3.0.0&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;asd&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://asdf.com/asdf.tar.gz&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;til&quot;</span><span class="token operator">:</span> <span class="token string">&quot;~1.2&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;elf&quot;</span><span class="token operator">:</span> <span class="token string">&quot;~1.2.3&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;two&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2.x&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;thr&quot;</span><span class="token operator">:</span> <span class="token string">&quot;3.3.x&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="依赖-url" tabindex="-1"><a class="header-anchor" href="#依赖-url" aria-hidden="true">#</a> 依赖 URL</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>可以指定一个 <code>tarball URL</code> , 这个 <code>tarball</code> 将在包被初始化的时候下载并初始化。</p></div><h3 id="依赖-git-url" tabindex="-1"><a class="header-anchor" href="#依赖-git-url" aria-hidden="true">#</a> 依赖 Git URL</h3><p><code>Git urls</code> 可以是下面几种形式:</p>`,5),F={href:"https://github.com/user/project.git#commit-ish",target:"_blank",rel:"noopener noreferrer"},J={href:"https://user@hostname:project.git#commit-ish",target:"_blank",rel:"noopener noreferrer"},M={href:"https://user@hostname/project.git#commit-ish",target:"_blank",rel:"noopener noreferrer"},K={href:"https://user@hostname/project/blah.git#commit-ish",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://user@hostname/project/blah.git#commit-ish",target:"_blank",rel:"noopener noreferrer"},W=o(`<p><code>commit-ish</code> 是可以被 <code>git checkout</code> 的任何 <code>tag、sha</code> 或者 <code>branch</code> 。默认为 <code>master</code> 。</p><h3 id="github-urls" tabindex="-1"><a class="header-anchor" href="#github-urls" aria-hidden="true">#</a> GitHub URLs</h3><p><code>1.1.65</code> 版后, 你可以仅仅用 <code>“user/foo-project”</code> 引用 <code>GitHub urls</code> , 比如:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;express&quot;</span><span class="token operator">:</span> <span class="token string">&quot;visionmedia/express&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="devdependencies" tabindex="-1"><a class="header-anchor" href="#devdependencies" aria-hidden="true">#</a> devDependencies</h3><div class="hint-container tip"><p class="hint-container-title">作用</p><p>如果有人要使用你的模块, 那么他们可能不需要你开发使用的外部测试或者文档框架。<br> 在这种情况下, 最好将这些附属的项目列在 <code>devDependencies</code> 中。</p></div>`,6),X=n("code",null,"npm link",-1),Y=n("code",null,"npm install",-1),Z=n("code",null,"npm",-1),$={href:"http://npmjs.org/doc/misc/npm-config.html",target:"_blank",rel:"noopener noreferrer"},nn=o(`<p>对于非特定平台的构建步骤, 比如需要编译 <code>CoffeeScript</code> , 可以用 <code>prepublish</code> 脚本去实现, 并把它依赖的包放在 <code>devDependency</code> 中。（注: <code>prepublish</code> 定义了在执行 <code>npm publish</code> 的时候先行执行的脚本）</p><p>比如:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ethopia-waza&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;a delightfully fruity coffee varietal&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.2.3&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;devDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;coffee-script&quot;</span><span class="token operator">:</span> <span class="token string">&quot;~1.6.3&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;prepublish&quot;</span><span class="token operator">:</span> <span class="token string">&quot;coffee -o lib/ -c src/waza.coffee&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lib/waza.js&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>prepublish</code> 脚本会在 <code>publishing</code> 前运行, 这样用户就不用自己去 <code>require</code> 来编译就能使用。并且在开发模式中（比如本地运行 <code>npm install</code> ）会运行这个脚本以便更好地测试。</p><h3 id="peerdependencies" tabindex="-1"><a class="header-anchor" href="#peerdependencies" aria-hidden="true">#</a> peerDependencies</h3><div class="hint-container tip"><p class="hint-container-title">作用</p><p>在一些场景中, 如在一个 <code>host</code> 中不必须进行 <code>require</code> 时候, 你想表现你的 <code>package</code> 与一个 <code>host</code> 工具或者库的兼容关键。这一般用来引用插件。尤其是你的模块可能要暴露一个特定的接口, 并由 <code>host</code> 文档来预期和指定。</p></div><p>比如:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tea-latte&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.3.5&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;peerDependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;tea&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2.x&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这能保证你的 <code>package</code> 可以只和 <code>tea</code> 的 <code>2.x 版本</code> 一起初始化。</p><p>试图初始化另一个有会冲突的依赖的插件将导致一个错误。因此, 确保你的插件的需求约束越弱越好, 而不要去把它锁定到一个特定的版本。</p><p>假设这个 <code>host</code> 遵守 <code>semver</code> 规范, 只改变这个 <code>package</code> 的主版本会打破你的插件。因此, 如果你在 <code>package</code> 中用过每个 <code>1.x 版本</code> , 就用 <code>&quot;^1.0&quot;</code> 或者 &quot; <code>1.x&quot;</code> 来表示。如果你依赖于功能介绍 <code>1.5.2</code> , 用 <code>&quot;&gt;= 1.5.2 &lt; 2&quot;</code> 。</p><h3 id="bundleddependencies" tabindex="-1"><a class="header-anchor" href="#bundleddependencies" aria-hidden="true">#</a> bundledDependencies</h3><div class="hint-container tip"><p class="hint-container-title">作用</p><p>一组包名, 他们会在发布的时候被打包进去。<br> 拼成 <code>&quot;bundleDependencies&quot;</code> （缺 d）也可以: <code>optionalDependencies</code> 。</p></div><p>如果一个依赖可用, 但你希望在它安装错误的时候 <code>npm</code> 也能继续初始化, 那么你可以把它放在 <code>optionalDependencies hash</code> 中。这是一个包名到版本或者 <code>url</code> 的 <code>map</code> , 就像 <code>dependencies hash</code> 一样。只是它运行错误。</p><p>处理缺乏依赖也是你的程序的责任。比如像这样:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> fooVersion <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;foo/package.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>version<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>er<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  foo <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">notGoodFooVersion</span><span class="token punctuation">(</span>fooVersion<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  foo <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// .. then later in your program ..</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  foo<span class="token punctuation">.</span><span class="token function">doFooThings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>optionalDependencies</code> 会覆盖 <code>dependencies</code> 中同名的项, 所以通常比只放在一个地方好。</p><h3 id="engines" tabindex="-1"><a class="header-anchor" href="#engines" aria-hidden="true">#</a> engines</h3><p>你可以指定工作的 <code>node</code> 的版本:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;engines&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;node&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&gt;=0.10.3 &lt;0.12&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">作用</p><p>像 <code>dependensies</code> 一样, 如果你不指定版本或者指定 <code>&quot;*&quot;</code> 作为版本, 那么所有版本的 <code>node</code> 都可以。</p></div><p>如果指定一个 <code>&quot;engines&quot;</code> 字段, 那么 <code>npm</code> 会需要 <code>node</code> 在里面, 如果 <code>&quot;engines&quot;</code> 被省略, <code>npm</code> 会假定它在 <code>node</code> 上工作。</p><p>你也可以用 <code>&quot;engines&quot;</code> 字段来指定哪一个 <code>npm</code> 版本能更好地初始化你的程序, 如:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;engines&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;npm&quot;</span><span class="token operator">:</span> <span class="token string">&quot;~1.0.20&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>记住, 除非用户设置 <code>engine-strict</code> 标记, 这个字段只是建议值。</p><h3 id="enginestrict" tabindex="-1"><a class="header-anchor" href="#enginestrict" aria-hidden="true">#</a> engineStrict</h3><p>如果你确定你的模块一定不会运行在你指定版本之外的 <code>node</code> 或者 <code>npm</code> 上, 你可以在 <code>package.json</code> 文件中设置 <code>&quot;engineStrict&quot;:true</code> 。它会重写用户的 <code>engine-strict</code> 设置。</p><p>除非你非常非常确定, 否则不要这样做。如果你的 <code>engines hash</code> 过度地限制, 很可能轻易让自己陷入窘境。慎重地考虑这个选择。如果大家滥用它, 它会再以后的 <code>npm</code> 版本中被删除。</p><h3 id="os" tabindex="-1"><a class="header-anchor" href="#os" aria-hidden="true">#</a> os</h3><p>你可以指定你的模块要运行在哪些操作系统中:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;os&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;darwin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;linux&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可以用黑名单代替白名单, 在名字前面加上&quot;!&quot;就可以了:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;os&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;!win32&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>操作系统用 <code>process.platform</code> 来探测。虽然没有很好地理由, 但它是同时支持黑名单和白名单的。</p><h3 id="cpu" tabindex="-1"><a class="header-anchor" href="#cpu" aria-hidden="true">#</a> cpu</h3><p>如果你的代码只能运行在特定的 <code>cpu</code> 架构下, 你可以指定一个:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;cpu&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;x64&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ia32&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就像 <code>os</code> 选项, 你也可以黑一个架构:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;cpu&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;!arm&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;!mips&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cpu</code> 架构用 <code>process.arch</code> 探测。</p><h3 id="preferglobal" tabindex="-1"><a class="header-anchor" href="#preferglobal" aria-hidden="true">#</a> preferGlobal</h3><p>如果包主要是需要全局安装的命令行程序, 就设置它为 <code>true</code> 来提供一个 <code>warning</code> 给只在局部安装的人。<br> 它不会真正的防止用户在局部安装, 但如果它没有按预期工作它会帮助防止产生误会。</p><h3 id="private" tabindex="-1"><a class="header-anchor" href="#private" aria-hidden="true">#</a> private</h3><p>如果你设置 <code>&quot;private&quot;: true</code> , <code>npm</code> 就不会发布它。<br> 这是一个防止意外发布私有库的方式。如果你要确定给定的包是只发布在特定 <code>registry</code> （如内部 <code>registry</code> ）的, 用 <code>publishConfighash</code> 的描述来重写 <code>registry</code> 的 <code>publish-time</code> 配置参数。</p><h3 id="publishconfig" tabindex="-1"><a class="header-anchor" href="#publishconfig" aria-hidden="true">#</a> publishConfig</h3><div class="hint-container tip"><p class="hint-container-title">作用</p><p>这是一个在 <code>publish-time</code> 使用的配置集合。当你想设置 <code>tag</code> 或者 <code>registry</code> 的时候它非常有用, 所以你可以确定一个给定的包没有打上 <code>&quot;lastest&quot;</code> 的 <code>tag</code> 或者被默认发布到全局的公开 <code>registry</code> 。</p></div><p>任何配置都可以被重写, 但当然可能只有 <code>&quot;tag&quot;</code> 和 <code>&quot;registry&quot;</code> 与发布的意图有关。</p>`,47),sn={href:"http://npmjs.org/doc/misc/npm-config.html",target:"_blank",rel:"noopener noreferrer"},en=o('<h3 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> SEE ALSO</h3><ul><li>semver</li><li>npm-init</li><li>npm-version</li><li>npm-config</li><li>npm-config</li><li>npm-help</li><li>npm-faq</li><li>npm-install</li><li>npm-publish</li><li>npm-rm</li></ul>',2);function an(on,tn){const e=p("ExternalLinkIcon");return c(),i("div",null,[l,d(" more "),u,n("ul",null,[v,n("li",null,[s("在你爱上你的名字之前, 你可能要去 "),h,s(" 查看一下这个名字是否已经被使用了。"),n("a",m,[s("http://registry.npmjs.org/"),a(e)])])]),k,n("p",null,[s('可用的"数字"或者"范围"见 '),n("a",q,[s("semver"),a(e)]),s("。")]),b,n("p",null,[g,s(" 是一个由脚本命令组成的 "),f,s(" 对象, 他们在包不同的生命周期中被执行。 "),j,s(" 是生命周期事件, "),_,s(" 是要运行的命令。"),y,s(" 参见 "),n("a",x,[s("npm-scripts"),a(e)])]),w,n("p",null,[s("参见 "),n("a",D,[s("npm-config"),a(e)]),s(" 和 "),n("a",L,[s("npm-scripts"),a(e)]),s("。")]),R,n("div",U,[S,n("p",null,[s("依赖是给一组包名指定版本范围的一个 "),G,s(" 。这个版本范围是一个由一个或多个空格分隔的字符串。依赖还可以用 "),N,s(" 或者 "),V,s(" 。"),B,s(" 请不要将测试或过渡性的依赖放在 "),z,s(" 中。见下文的 "),A,s(" 。"),C,s(" 详见 "),n("a",E,[s("semver"),a(e)])])]),n("ul",null,[H,n("li",null,[T,s(" 大约一样, 见 "),n("a",I,[s("semver"),a(e)])]),O]),P,n("ul",null,[n("li",null,[s("git: "),n("a",F,[s("https://github.com/user/project.git#commit-ish"),a(e)])]),n("li",null,[s("git+ssh: "),n("a",J,[s("https://user@hostname:project.git#commit-ish"),a(e)])]),n("li",null,[s("git+ssh: "),n("a",M,[s("https://user@hostname/project.git#commit-ish"),a(e)])]),n("li",null,[s("git+"),n("a",K,[s("https://user@hostname/project/blah.git#commit-ish"),a(e)])]),n("li",null,[s("git+"),n("a",Q,[s("https://user@hostname/project/blah.git#commit-ish"),a(e)])])]),W,n("p",null,[s("这些东西会在执行 "),X,s(" 或者 "),Y,s(" 的时候初始化, 并可以像其他 "),Z,s(" 配置参数一样管理。详见 "),n("a",$,[s("npm-config"),a(e)]),s("。")]),nn,n("p",null,[s("参见 "),n("a",sn,[s("npm-config"),a(e)]),s(" 有可以被重写的列表。")]),en])}const dn=t(r,[["render",an],["__file","talk-package-json-on-npm.html.vue"]]);export{dn as default};
