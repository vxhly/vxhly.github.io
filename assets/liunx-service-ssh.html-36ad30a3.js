import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as n,d as i,a,e as t}from"./app-6126c799.js";const d="/assets/liunx-ssh-1.png",o="/assets/liunx-ssh-2.png",c="/assets/liunx-ssh-3.png",p="/assets/liunx-ssh-4.png",r="/assets/liunx-ssh-5.png",l="/assets/liunx-ssh-6.png",u="/assets/liunx-ssh-7.png",h="/assets/liunx-ssh-8.png",m="/assets/liunx-ssh-9.png",g="/assets/liunx-ssh-10.png",b="/assets/liunx-ssh-11.png",v="/assets/liunx-ssh-12.png",f="/assets/liunx-ssh-13.png",x="/assets/liunx-ssh-14.png",k={},S=a("div",{class:"hint-container tip"},[a("p",{class:"hint-container-title"},"前言"),a("p",null,"本篇是 Liunx 的服务配置笔记系列第二篇, 这一篇将具体介绍 Red Hat Liunx 下 SSH 服务的安全配置。所谓 SSH 就是加密的数据传输, 但是使用其的默认配置并不是安全的, 所以还需要对其进行详细的配置。")],-1),_=t(`<h2 id="配置文件的位置" tabindex="-1"><a class="header-anchor" href="#配置文件的位置" aria-hidden="true">#</a> 配置文件的位置</h2><p>主配置文件: <strong>/etc/ssh/sshd_config</strong></p><h2 id="服务的启动与停止" tabindex="-1"><a class="header-anchor" href="#服务的启动与停止" aria-hidden="true">#</a> 服务的启动与停止</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>SSH 的服务名并不叫做 <code>ssh</code> , 而是 <code>sshd</code> 。<br> 修改配置文件过后一定要重启 <code>sshd</code> 服务。</p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">service</span> sshd status        <span class="token comment"># 状态</span>
<span class="token function">service</span> sshd start         <span class="token comment"># 启动</span>
<span class="token function">service</span> sshd stop          <span class="token comment"># 暂停</span>
<span class="token function">service</span> sshd restart       <span class="token comment"># 重启</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="安全配置" tabindex="-1"><a class="header-anchor" href="#安全配置" aria-hidden="true">#</a> 安全配置</h2><h3 id="修改端口号" tabindex="-1"><a class="header-anchor" href="#修改端口号" aria-hidden="true">#</a> 修改端口号</h3><p><code>Default Configuration:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Port 22</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>配置文件中将其注释掉, 则采用默认的端口 22, 我们可以修改它。去掉 # , 修改成我们想要的端口号。</p></div><p><code>Example Configuration:</code> <br></p><figure><img src="`+d+`" alt="SSH 服务安全配置" tabindex="0" loading="lazy"><figcaption>SSH 服务安全配置</figcaption></figure><h4 id="使用客户端进行验证" tabindex="-1"><a class="header-anchor" href="#使用客户端进行验证" aria-hidden="true">#</a> 使用客户端进行验证</h4><div class="hint-container tip"><p class="hint-container-title">提示</p><p>验证之前, 请重启服务。默认是允许 root 用户登录的, 以下测试例子是使用 root 用户登录的。</p></div><p>使用默认端口连接, <code>Connection Format:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ssh</span> <span class="token punctuation">[</span>userName<span class="token punctuation">]</span>@<span class="token punctuation">[</span>host <span class="token operator">|</span> ip<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>若端口不对则会显示</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh: connect to <span class="token function">host</span> <span class="token punctuation">[</span>host <span class="token operator">|</span> ip<span class="token punctuation">]</span> <span class="token punctuation">[</span>port<span class="token punctuation">]</span> <span class="token number">22</span>: Connection refused
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>Example Connection:</code> <br></p><figure><img src="`+o+`" alt="SSH 服务安全配置" tabindex="0" loading="lazy"><figcaption>SSH 服务安全配置</figcaption></figure><p>使用配置端口连接, <code>Connection Format:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ssh</span> <span class="token punctuation">[</span>userName<span class="token punctuation">]</span>@<span class="token punctuation">[</span>host <span class="token operator">|</span> ip<span class="token punctuation">]</span> <span class="token parameter variable">-p</span> <span class="token punctuation">[</span>port<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>连接成功则会显示</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Last login: <span class="token punctuation">[</span>date<span class="token punctuation">]</span> from <span class="token punctuation">[</span>host <span class="token operator">|</span> ip<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>Example Connection:</code> <br></p><figure><img src="`+c+`" alt="SSH 服务安全配置" tabindex="0" loading="lazy"><figcaption>SSH 服务安全配置</figcaption></figure><h3 id="禁止-root-用户登录" tabindex="-1"><a class="header-anchor" href="#禁止-root-用户登录" aria-hidden="true">#</a> 禁止 root 用户登录</h3><p><code>Default Configuration:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># PermitRootLogin yes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认情况下是允许 root 用户登录的, 是十分不安全, 毕竟 root 用户权限太大了。我们可以去除 #, 将 yes 修改成 no, 这就禁止了 root 用户登录。</p><p><code>Example Configuration:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>PermitRootLogin no
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="SSH 服务安全配置" tabindex="0" loading="lazy"><figcaption>SSH 服务安全配置</figcaption></figure><h4 id="使用客户端进行验证-1" tabindex="-1"><a class="header-anchor" href="#使用客户端进行验证-1" aria-hidden="true">#</a> 使用客户端进行验证</h4><p>验证之前, 请重启服务。我们已经禁止 root 用户登录了, 以下测试例子仍然使用 root 用户进行验证。</p><p>由于之前配置过端口号, 这时候就要使用配置的端口号了, <code>Connection Format:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ssh</span> root@<span class="token punctuation">[</span>host <span class="token operator">|</span> ip<span class="token punctuation">]</span> <span class="token parameter variable">-p</span> <span class="token punctuation">[</span>port<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 <code>exit</code> 可以退出当前的连接, 退出成功将会显示</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Connection to <span class="token punctuation">[</span>host <span class="token operator">|</span> ip<span class="token punctuation">]</span> closed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>Example Connection:</code> <br></p><figure><img src="`+r+`" alt="SSH 服务安全配置" tabindex="0" loading="lazy"><figcaption>SSH 服务安全配置</figcaption></figure><h3 id="禁止空密码登录" tabindex="-1"><a class="header-anchor" href="#禁止空密码登录" aria-hidden="true">#</a> 禁止空密码登录</h3><p><code>Default Configuration:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># PermitEmptyPasswords no</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认情况下, SSH 已经禁止了使用空密码登录系统, 即使配置文件中将其注释掉。如果被设置成 yes, 则就是不安全的, 我们可以修改成 no。</p><p><code>Example Configuration:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>PermitEmptyPasswords no
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+l+`" alt="SSH 服务安全配置" tabindex="0" loading="lazy"><figcaption>SSH 服务安全配置</figcaption></figure><h4 id="使用客户端进行验证-2" tabindex="-1"><a class="header-anchor" href="#使用客户端进行验证-2" aria-hidden="true">#</a> 使用客户端进行验证</h4><p>验证之前, 请重启服务。我们已经禁止 root 用户登录了, 以下测试我们将使用普通用户。注意: 使用普通用户之前, 先确保服务端是有该用户的。</p><p>由于之前配置过端口号, 这时候就要使用配置的端口号了, <code>Connection Format:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ssh</span> <span class="token punctuation">[</span>userName<span class="token punctuation">]</span>@<span class="token punctuation">[</span>host <span class="token operator">|</span> ip<span class="token punctuation">]</span> <span class="token parameter variable">-p</span> <span class="token punctuation">[</span>port<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果是第一次连接的话, 会提示是否保存密钥信息, 输入 <code>yes</code> 就好。</p><p><code>Example Connection:</code> <br></p><figure><img src="`+u+'" alt="SSH 服务安全配置" tabindex="0" loading="lazy"><figcaption>SSH 服务安全配置</figcaption></figure><p>断开连接, 我们尝试使用空密码连接, 只需回车就好</p><p><code>Example Connection:</code> <br></p><figure><img src="'+h+`" alt="SSH 服务安全配置" tabindex="0" loading="lazy"><figcaption>SSH 服务安全配置</figcaption></figure><h3 id="设置必需使用密码登录" tabindex="-1"><a class="header-anchor" href="#设置必需使用密码登录" aria-hidden="true">#</a> 设置必需使用密码登录</h3><p><code>Default Configuration:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># PasswordAuthentication yes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认的配置就是需要使用密码登录的, 即使它是注释的。若遇到配置值为 no 的, 一定要修改成 yes。</p><p><code>Example Configuration:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>PasswordAuthentication <span class="token function">yes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="使用客户端进行验证-3" tabindex="-1"><a class="header-anchor" href="#使用客户端进行验证-3" aria-hidden="true">#</a> 使用客户端进行验证</h4><p>前面已经验证过了, 这里不再重复</p><h3 id="设置仅允许密钥登录" tabindex="-1"><a class="header-anchor" href="#设置仅允许密钥登录" aria-hidden="true">#</a> 设置仅允许密钥登录</h3><div class="hint-container warning"><p class="hint-container-title">注意</p><p>密钥登录是与密码登录是不一样的。只允许密钥登录的时候必须要把允许密码登录的选项禁用。</p></div><p><code>For Example:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>PasswordAuthentication no
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来就是将下图所示的注释去掉, 就好了<br></p><h4 id="免密码登录" tabindex="-1"><a class="header-anchor" href="#免密码登录" aria-hidden="true">#</a> 免密码登录</h4><p>主机生成密钥对（包含公钥和私钥）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-P</span> <span class="token string">&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>把本地主机的公钥复制到远程主机的 <code>authorized_keys</code> 文件上</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ssh-copy-id <span class="token punctuation">[</span>user<span class="token punctuation">]</span>@<span class="token punctuation">[</span>server<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="限制登录失败之后重试次数" tabindex="-1"><a class="header-anchor" href="#限制登录失败之后重试次数" aria-hidden="true">#</a> 限制登录失败之后重试次数</h3><p><code>Default Configuration:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># MaxAuthTries 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认情况下可以重试 6 次, 如果你觉得这个不合理, 当然可以修改它。同理将 # 去除, 将 6 修改成我们想要的次数。</p><p><code>Example Configuration:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>MaxAuthTries <span class="token number">3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+m+`" alt="SSH 服务安全配置" tabindex="0" loading="lazy"><figcaption>SSH 服务安全配置</figcaption></figure><h4 id="使用客户端进行验证-4" tabindex="-1"><a class="header-anchor" href="#使用客户端进行验证-4" aria-hidden="true">#</a> 使用客户端进行验证</h4><p>验证之前, 请重启服务。之前我们在服务器上新建了一个用户, 那么我们将用这个用户进行连接。</p><p>当我们输入错误的密码时, 则会显示</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Permission denied, please try again.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当我们最后一次输入错误的密码时, 则会显示</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Permission denied <span class="token punctuation">(</span>publickey,gssapi-with-mic,password<span class="token punctuation">)</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>Example Connection:</code> <br></p><figure><img src="`+g+`" alt="SSH 服务安全配置" tabindex="0" loading="lazy"><figcaption>SSH 服务安全配置</figcaption></figure><h3 id="设置多长时间没有成功连接上-就断线" tabindex="-1"><a class="header-anchor" href="#设置多长时间没有成功连接上-就断线" aria-hidden="true">#</a> 设置多长时间没有成功连接上, 就断线</h3><p><code>Default Configuration:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># LoginGraceTime 2m</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>默认的等待时间为 2 分钟, 如果没有单位将以秒作为单位, 可用的单位分别为 h, m、s。我们可以根据需求修改, 当然是越短越安全。</p><p><code>Example Configuration:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>LoginGraceTime 10s
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+b+`" alt="SSH 服务安全配置" tabindex="0" loading="lazy"><figcaption>SSH 服务安全配置</figcaption></figure><h4 id="使用客户端进行验证-5" tabindex="-1"><a class="header-anchor" href="#使用客户端进行验证-5" aria-hidden="true">#</a> 使用客户端进行验证</h4><p>验证之前, 请重启服务。之前我们在服务器上新建了一个用户, 那么我们仍然使用用这个用户进行连接。</p><p>我们可以输入一个错误的密码, 在等待一段时间, 按下回车, 则会显示</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Connection closed by <span class="token punctuation">[</span>host <span class="token operator">|</span> ip<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>Example Connection:</code> <br></p><figure><img src="`+v+`" alt="SSH 服务安全配置" tabindex="0" loading="lazy"><figcaption>SSH 服务安全配置</figcaption></figure><h3 id="设置白名单和黑名单" tabindex="-1"><a class="header-anchor" href="#设置白名单和黑名单" aria-hidden="true">#</a> 设置白名单和黑名单</h3><p>默认配置中是没有白名单和黑名单这个选项的, 我们可以自己添加上去。多个用户之间必须使用空格分割。同理, 用户组也一样。</p><p><code>白名单</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>AllowUsers <span class="token punctuation">[</span>userName<span class="token punctuation">]</span><span class="token number">1</span> <span class="token punctuation">[</span>userName<span class="token punctuation">]</span><span class="token number">2</span> <span class="token punctuation">..</span>.
AllowGroups groupName1 groupName2 <span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>黑名单</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>DenyUsers <span class="token punctuation">[</span>userName<span class="token punctuation">]</span><span class="token number">1</span> <span class="token punctuation">[</span>userName<span class="token punctuation">]</span><span class="token number">2</span> <span class="token punctuation">..</span>.
DenyGroups groupName1 groupName2 <span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Example Configuration:</code> <br></p><figure><img src="`+f+'" alt="SSH 服务安全配置" tabindex="0" loading="lazy"><figcaption>SSH 服务安全配置</figcaption></figure><h4 id="使用客户端进行验证-6" tabindex="-1"><a class="header-anchor" href="#使用客户端进行验证-6" aria-hidden="true">#</a> 使用客户端进行验证</h4><p>验证之前, 请重启服务。由于白名单与黑名单效果是一致的, 这里只提供白名单的验证测试。注意: 服务器上依然需要新建测试用户（包含设置密码, 否则, 不能登录）。</p><p>这时候, 我们就需要输入正确的密码。</p><p><code>Example Connection:</code> <br></p><figure><img src="'+x+`" alt="SSH 服务安全配置" tabindex="0" loading="lazy"><figcaption>SSH 服务安全配置</figcaption></figure><h3 id="限制-ip-登录" tabindex="-1"><a class="header-anchor" href="#限制-ip-登录" aria-hidden="true">#</a> 限制 IP 登录</h3><h4 id="方法一" tabindex="-1"><a class="header-anchor" href="#方法一" aria-hidden="true">#</a> 方法一</h4><p>在 <code>/etc/hosts.allow</code> 中添加 SSH 登录的 ip 或者网段, <code>For Example:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sshd:192.168.1.2:allow        <span class="token comment"># ip 地址</span>
sshd:192.168.1.0/24:allow     <span class="token comment"># 网段</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>/etc/hosts.deny</code> 中添加不允许 SSH 登录的 IP, <code>For Example:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sshd:ALL                      <span class="token comment"># ALL 表示除了上面允许的,其他的 ip 都拒绝登录</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="方法二" tabindex="-1"><a class="header-anchor" href="#方法二" aria-hidden="true">#</a> 方法二</h4><p>使用 <code>iptables</code> , <code>For Example:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>iptables <span class="token parameter variable">-A</span> INPUT <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">-s</span> <span class="token number">192.168</span>.1.2 --destination-port <span class="token number">22</span> <span class="token parameter variable">-j</span> ACCEPT
iptables <span class="token parameter variable">-A</span> INPUT <span class="token parameter variable">-p</span> tcp --destination-port <span class="token number">22</span> <span class="token parameter variable">-j</span> DROP
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="方法三" tabindex="-1"><a class="header-anchor" href="#方法三" aria-hidden="true">#</a> 方法三</h4><p>修改 sshd 主配置文件 <code>/etc/ssh/sshd_config</code> , <code>For Example:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>AllowUsers test@192.168.1.2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,129);function H(y,C){return e(),n("div",null,[S,i(" more "),_])}const N=s(k,[["render",H],["__file","liunx-service-ssh.html.vue"]]);export{N as default};
