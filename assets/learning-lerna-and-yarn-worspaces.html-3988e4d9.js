import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as i,c as p,d as c,a as n,b as e,f as a,w as d,e as r}from"./app-aa556bd0.js";const u={},v=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"前言"),n("p",null,"观察到 GitHub 上面有很多的开源项目使用到了 lerna 和 yarn workspaces 来管理项目中的多包依赖, 好奇起它的实现过程, 于是便写下本篇博文来记录我的填坑过程。")],-1),m=n("h2",{id:"参考资料",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),e(" 参考资料")],-1),h=n("p",null,"先贴上我的参考资料来源",-1),k={href:"https://lerna.js.org/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/lerna/lerna/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://classic.yarnpkg.com/zh-Hans/docs/workspaces",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,"当然也得感谢前人栽的树",-1),q={href:"https://juejin.im/post/6844903954329894920",target:"_blank",rel:"noopener noreferrer"},j={href:"https://www.jianshu.com/p/8b7e6025354b",target:"_blank",rel:"noopener noreferrer"},f=r(`<h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p>团队内多项目开发经常会遇到以下几个问题</p><ol><li>新建项目需要重新配置各种工具, 繁琐, 虽然也可以用脚手架生成, 但后期涉及到依赖的升级也麻烦</li><li>项目内的依赖互相引用虽然有 yarn/npm link, 但还是影响开发体验</li><li>babel 等配置希望可以多项目共享</li></ol><h3 id="前端开发-package-面临的问题" tabindex="-1"><a class="header-anchor" href="#前端开发-package-面临的问题" aria-hidden="true">#</a> 前端开发 package 面临的问题</h3><p>在最初开开发 package 的时候, 还属于一种刀耕火种的阶段。没有什么自动化的工具。发布 package 的时候, 都是手动修改版本号(PS: 当然也可以通过脚本工具来升级版本号)。如果 packages 数量不多还可以接受。但是当数量逐渐增多的时候, 且这些 packages 之间还有依赖关系的时候, 在版本号上的管理无法形成统一, 这就对开发人员来说就很痛苦了。工作不仅繁琐, 而且需要用掉不少时间。</p><p>举个例子, 如果你要维护两个 package。分别为 module-1, module-2。</p><p>下面是这两个 package 的依赖关系。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// module-1 package.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module-1&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;dependencies&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;module-2&quot;</span><span class="token operator">:</span> <span class="token string">&quot;^1.0.0&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// module-2 package.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;module-2&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这样的环境下, module-1 是依赖 module-2 的。如果 module-2 有修改, 需要发布。那么你的工作有这些。</p><p>修改 module-2 版本号, 发布。修改 module-1 的依赖关系, 修改 module-1 的版本号, 发布。</p><p>这还仅仅只有两个 package, 如果依赖关系更复杂, 大家可以想想发布的工作量有多大。</p><h2 id="什么是-lernajs" tabindex="-1"><a class="header-anchor" href="#什么是-lernajs" aria-hidden="true">#</a> 什么是 lernaJs</h2><p>lernaJs 是由 Babel 团队出的一个多包管理工具, 是 GitHub 上面开源的一款 js 代码库管理软件, 用来对一系列相互耦合比较大、又相互独立的 js git 库进行管理。因为 Babel 包含很多子包, 以前都是放在多个仓库里的, 管理比较困难, 特别是有调用系统内包的时候, 发布比较麻烦。所以为了能更好更快的跨包管理, babel 推出了 lernaJs, 使用了 monorepo 的概念, 现在 React,Babel,Angular,Jest 都在使用这个工具来管理包。</p><p>对于一些功能比较全的库, 我们往往会把各个小功能拆分成独立的 npm 库, 他们直接有比较强的依赖关系。可以解决各个库之间修改混乱、难以跟踪的问题。lerna 可以优化这种情形下的工作流。</p><h2 id="什么是-yarn-workspaces" tabindex="-1"><a class="header-anchor" href="#什么是-yarn-workspaces" aria-hidden="true">#</a> 什么是 yarn workspaces</h2><p>Workspace 能更好的统一管理有多个项目的仓库, 既可在每个项目下使用独立的 package.json 管理依赖, 又可便利的享受一条 yarn 命令安装或者升级所有依赖等。更重要的是可以使多个项目共享同一个 node_modules 目录, 提升开发效率和降低磁盘空间占用。一句话总结就是可以大大简化对多个项目的统一管理。很多知名的开源项目也使用了 Yarn Workspace, 如 vue、react、jest 等使用 lerna 结合 yarn workspaces 各个 package 理论上都是独立的, 所以每个 package 都维护着自己的 dependencies, 而很大的可能性, package 之间有不少相同的依赖, 而这就可能使 install 时出现重复安装, 使本来就很大的 node_modues 继续膨胀。简单的说如果不使用 yarn workspaces 的话, 会导致在安装依赖时, 子包重复安装依赖项。使用 yarn workspaces 时, 我们就可以将这些依赖提至到工作根区。</p><h3 id="代码库结构" tabindex="-1"><a class="header-anchor" href="#代码库结构" aria-hidden="true">#</a> 代码库结构</h3><p>lerna 管理的库文件结构类似如下这样</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>my-lerna-repo
  |
  |- packages
  |    |
  |    |- package-1
  |    |    |
  |    |    └─ package.json
  |    |
  |    └─ package-2
  |         |
  |         └─ package.json
  |
  |- package.json
  |
  └─ lerna.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lerna-主要做了什么" tabindex="-1"><a class="header-anchor" href="#lerna-主要做了什么" aria-hidden="true">#</a> lerna 主要做了什么</h3><ol><li>通过 lerna 的命令 <code>lerna bootstrap</code> 将会把代码库进行 link。</li><li>通过 <code>lerna publish</code> 发布最新改动的库</li></ol><h3 id="lerna-的更多知识" tabindex="-1"><a class="header-anchor" href="#lerna-的更多知识" aria-hidden="true">#</a> lerna 的更多知识</h3>`,23),x={class:"hint-container tip"},y=n("p",{class:"hint-container-title"},"提示",-1),w=n("h2",{id:"什么是-monorepo",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#什么是-monorepo","aria-hidden":"true"},"#"),e(" 什么是 monorepo")],-1),B=n("p",null,"monorepo 是比较于 multi-package 的。multi-package 就是建立多个仓库, 每个包建立一个仓库。而 monorepo 是建立一个仓库, 多个包都在这个仓库中管理, 这样可以有两个好处：",-1),L=n("ol",null,[n("li",null,"各个包之间的沟通更加的方便, 如果 multi-package 的话, 系统内其中一个包修改, 需要单独发版, 而且引用这个包的其他包都需要发版。使用 lerna 的话可以自动管理这些包的发版, 很方便。"),n("li",null,"一些可以共用的配置, 比如 eslint,babel,rollup 等, 可以统一的管理这些开发配置。")],-1),N=n("h2",{id:"代码库的结构",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#代码库的结构","aria-hidden":"true"},"#"),e(" 代码库的结构")],-1),V={class:"hint-container tip"},C=n("p",{class:"hint-container-title"},"提示",-1),H={href:"https://github.com/vuejs/vue-next",target:"_blank",rel:"noopener noreferrer"},J={href:"https://github.com/vxhly/my-lerna-repo",target:"_blank",rel:"noopener noreferrer"},W=r(`<p>创建目录结构如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>my-lerna-repo
  |
  |- packages
  |
  |- package.json
  |
  └─ lerna.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然你也可以通过 <code>lerna</code> 的命令来创建</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lerna init my-lerna-repo
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>修改你的 <code>lerna.json</code> 来支持 yarn workspaces</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;npmClient&quot;</span><span class="token operator">:</span> <span class="token string">&quot;yarn&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;packages&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;packages/*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;useWorkspaces&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还需要在 <code>package.json</code> 中添加以下配置来开启 yarn workspaces</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;private&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">&quot;workspaces&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;packages/*&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着就是安装依赖项, 你可以通过以下命令来安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lerna bootstrap
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,10);function E(R,z){const s=o("ExternalLinkIcon"),l=o("RouterLink");return i(),p("div",null,[v,c(" more "),m,h,n("ol",null,[n("li",null,[e("lerna 官网: "),n("a",k,[e("lerna.js.org/"),a(s)])]),n("li",null,[e("lerna 仓库："),n("a",b,[e("github.com/lerna/lerna/"),a(s)])]),n("li",null,[e("yarn workspaces："),n("a",g,[e("classic.yarnpkg.com/zh-Hans/docs/workspaces/"),a(s)])])]),_,n("ol",null,[n("li",null,[n("a",q,[e("Lerna 多包管理的搭建指南"),a(s)])]),n("li",null,[n("a",j,[e("lerna 的基础使用"),a(s)])])]),f,n("div",x,[y,n("p",null,[e("这边不多阐述 lerna 的相关命令以及其的相关知识点, 有兴趣的贴上地址 "),a(l,{to:"/views/nodejs/usage-lerna.html"},{default:d(()=>[e("lerna 的使用指南")]),_:1})])]),w,B,L,N,n("div",V,[C,n("p",null,[e("这边节选 "),n("a",H,[e("vue-next"),a(s)]),e(" 的项目结构来讲解实现过程贴上我已经实现好的 "),n("a",J,[e("my-lerna-repo"),a(s)])])]),W])}const I=t(u,[["render",E],["__file","learning-lerna-and-yarn-worspaces.html.vue"]]);export{I as default};
