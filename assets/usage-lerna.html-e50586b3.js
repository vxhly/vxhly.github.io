import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as r,c as t,d as c,a,b as e,f as s,e as i}from"./app-c835a8ea.js";const p={},d=a("div",{class:"hint-container tip"},[a("p",{class:"hint-container-title"},"前言"),a("p",null,"从 GitHub 上找到了比较多的仓库开始采用 lerna 来管理仓库的多包依赖, 也逐渐发现 lerna 的管理模式确实比较好, so 现贴上我的填坑笔记。")],-1),u=a("h2",{id:"参考资料",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#参考资料","aria-hidden":"true"},"#"),e(" 参考资料")],-1),h=a("p",null,"先贴上我的参考资料来源",-1),m={href:"https://lerna.js.org/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/lerna/lerna/",target:"_blank",rel:"noopener noreferrer"},b=a("p",null,"当然也得感谢前人栽的树",-1),g={href:"https://www.jianshu.com/p/8b7e6025354b",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.jianshu.com/p/63ec67445b0f",target:"_blank",rel:"noopener noreferrer"},f=i(`<h2 id="什么是-lernajs" tabindex="-1"><a class="header-anchor" href="#什么是-lernajs" aria-hidden="true">#</a> 什么是 lernaJs</h2><p>lernaJs 是由 Babel 团队出的一个多包管理工具, 是 GitHub 上面开源的一款 js 代码库管理软件, 用来对一系列相互耦合比较大、又相互独立的 js git 库进行管理。因为 Babel 包含很多子包, 以前都是放在多个仓库里的, 管理比较困难, 特别是有调用系统内包的时候, 发布比较麻烦。所以为了能更好更快的跨包管理, babel 推出了 lernaJs, 使用了 monorepo 的概念, 现在 React, Babel, Angular, Jest 都在使用这个工具来管理包。</p><p>对于一些功能比较全的库, 我们往往会把各个小功能拆分成独立的 npm 库, 他们直接有比较强的依赖关系。可以解决各个库之间修改混乱、难以跟踪的问题。lerna 可以优化这种情形下的工作流。</p><p>简单的说, lernaJs 是用于管理具有多个包的 JavaScript 的项目工具。(官网原话为：<code>Lerna is a tool that optimizes the workflow around managing multi-package repositories with git and npm.</code>)</p><p>引入 lerna 后, 我们可以解决以下这些问题</p><ol><li>自动解决 packages 之间的依赖关系</li><li>通过 <code>git</code> 检测文件改动, 自动发布</li><li>根据 <code>git</code> 提交记录, 自动生成 <code>CHANGELOG</code></li></ol><h3 id="代码库结构" tabindex="-1"><a class="header-anchor" href="#代码库结构" aria-hidden="true">#</a> 代码库结构</h3><p>lerna 管理的库文件结构类似如下这样</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>my-lerna-repo
  |
  |- packages
  |    |
  |    |- package-1
  |    |    |
  |    |    └─ package.json
  |    |
  |    └─ package-2
  |         |
  |         └─ package.json
  |
  |- package.json
  |
  └─ lerna.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lerna-主要做了什么" tabindex="-1"><a class="header-anchor" href="#lerna-主要做了什么" aria-hidden="true">#</a> lerna 主要做了什么</h3><ol><li>通过 lerna 的命令 <code>lerna bootstrap</code> 将会把代码库进行 link。</li><li>通过 <code>lerna publish</code> 发布最新改动的库</li></ol><h2 id="lerna-如何工作的" tabindex="-1"><a class="header-anchor" href="#lerna-如何工作的" aria-hidden="true">#</a> lerna 如何工作的</h2><p>默认 lerna 有两种管理模式, 固定模式和独立模式</p><h3 id="固定模式" tabindex="-1"><a class="header-anchor" href="#固定模式" aria-hidden="true">#</a> 固定模式</h3><p>固定模式, 通过 lerna.json 的版本进行版本管理。当你执行 <code>lerna publish</code> 命令时, 如果距离上次发布只修改了一个模块, 将会更新对应模块的版本到新的版本号, 然后你可以只发布修改的库。</p><p>这种模式也是 Babel 使用的方式。如果你希望所有的版本一起变更, 可以更新 minor 版本号, 这样会导致所有的模块都更新版本。</p><h3 id="独立模式" tabindex="-1"><a class="header-anchor" href="#独立模式" aria-hidden="true">#</a> 独立模式</h3><p>独立模式, init 的时候需要设置选项 <code>--independent</code> 。独立模式允许管理者对每个库单独改变版本号, 每次发布的时候, 你需要为每个改动的库指定版本号。这种情况下, <code>lerna.json</code> 的版本号不会变化了, 默认为 <code>independent</code> 。</p><h2 id="lerna-json-解析" tabindex="-1"><a class="header-anchor" href="#lerna-json-解析" aria-hidden="true">#</a> lerna.json 解析</h2><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.1.3&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;npmClient&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;command&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;publish&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;ignoreChanges&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;ignored-file&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*.md&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token property">&quot;bootstrap&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;ignore&quot;</span><span class="token operator">:</span> <span class="token string">&quot;component-*&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;npmClientArgs&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;--no-package-lock&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">&quot;packages&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;packages/*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;useWorkspaces&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>version</code> , 当前库的版本</li><li><code>npmClient</code> , 允许指定命令使用的 client, 默认是 npm, 可以设置成 yarn</li><li><code>command.publish.ignoreChanges</code> , 可以指定那些目录或者文件的变更不会被 publish</li><li><code>command.bootstrap.ignore</code> , 指定不受 bootstrap 命令影响的包</li><li><code>command.bootstrap.npmClientArgs</code> , 指定默认传给 <code>lerna bootstrap</code> 命令的参数</li><li><code>command.bootstrap.scope</code> , 指定那些包会受 <code>lerna bootstrap</code> 命令影响</li><li><code>packages</code> , 指定包所在的目录</li><li><code>useWorkspaces</code> , 支持使用 yarn workspaces</li></ul><h2 id="相关命令" tabindex="-1"><a class="header-anchor" href="#相关命令" aria-hidden="true">#</a> 相关命令</h2><h3 id="安装和初始化-lerna-项目" tabindex="-1"><a class="header-anchor" href="#安装和初始化-lerna-项目" aria-hidden="true">#</a> 安装和初始化 lerna 项目</h3><p>安装 lernajs</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> lerna <span class="token parameter variable">-g</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>初始化 lernaJs 项目</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lerna init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>复制代码执行后, 会自动生成一个由 lerna 管理的 monorepo。</p><p>其文件结构如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>lerna-repo/
  packages/          // 子包都放在这个目录中
  package.json
  lerna.json         // lerna js的配置文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="添加子包" tabindex="-1"><a class="header-anchor" href="#添加子包" aria-hidden="true">#</a> 添加子包</h3><p>环境初始好以后, 首先需要添加一个子包, 添加子包的命令如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lerna create <span class="token operator">&lt;</span>pkgName<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行这个命令后, 会问一些包名啊, 版本等问题和执行 npm init 后问的差不多, 填完这些问题后包就会自动创建一个子包。子包默认的目录结构如下</p><h3 id="为子包单独安装依赖" tabindex="-1"><a class="header-anchor" href="#为子包单独安装依赖" aria-hidden="true">#</a> 为子包单独安装依赖</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lerna <span class="token function">add</span> <span class="token operator">&lt;</span>packageName<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span> <span class="token parameter variable">--scope</span> <span class="token operator">&lt;</span>packageName<span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你的仓库里的子包需要互相依赖也可用以上命令来安装</p><p>例如：子包 1 为 &#39;@demo/packageName1&#39;, 子包 2 为 &#39;@demo/packageName2&#39;, 要为子包 1 安装子包 2 的依赖, 你可以这样做, 注意要在项目的根目录执行以下命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lerna <span class="token function">add</span> @demo/packageName2 <span class="token parameter variable">--scope</span> @demo/packageName1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="为仓库安装依赖" tabindex="-1"><a class="header-anchor" href="#为仓库安装依赖" aria-hidden="true">#</a> 为仓库安装依赖</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lerna bootstrap
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>以上命令可以为仓库安装所有子包的依赖</p><h3 id="发布和更新-package" tabindex="-1"><a class="header-anchor" href="#发布和更新-package" aria-hidden="true">#</a> 发布和更新 package</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lerna publish
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>发布当前项目他创建一个新的 release, 生成新的版本, 执行 <code>git commit/tag</code> 并发布到 npm</p><p>发布项目里的每个模块执行 <code>lerna updated</code> 确定是否需要发布假如需要发布 给 lerna.json 版本号做自增更新 package.json 里的版本号至最新为新版本更新 dependencies 为新版本创建一个 git commit 和 tag 发布更新项目到 npm 一次发布所有 packages, 删除 <code>lerna-temp</code> <code>tags</code> 和增加 tags 到 latest 通过在 package.json 中标记 <code>&quot;private&quot;: true</code> , 将使该包不发布</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>以@开头包的发布问题</p></div>`,47),q=a("code",null,"npm publish --access public",-1),_=a("code",null,"lerna publish",-1),x={href:"https://github.com/lerna/lerna/issues/914",target:"_blank",rel:"noopener noreferrer"},j=i(`<p>方案参考:</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;@feu/tools&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;publishConfig&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;access&quot;</span><span class="token operator">:</span> <span class="token string">&quot;public&quot;</span> <span class="token comment">// 如果该模块需要发布, 对于scope模块, 需要设置为publish, 否则需要权限验证</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> options</h4><h5 id="canary" tabindex="-1"><a class="header-anchor" href="#canary" aria-hidden="true">#</a> canary</h5><div class="hint-container tip"><p class="hint-container-title">提示</p><p>可以用来独立发布每个 commit, 不打 tag</p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lerna publish <span class="token parameter variable">--canary</span>
<span class="token comment"># 1.0.0 =&gt; 1.0.1-alpha.0+\${SHA} of packages changed since the previous commit</span>
<span class="token comment"># a subsequent canary publish will yield 1.0.1-alpha.1+\${SHA}, etc</span>

lerna publish <span class="token parameter variable">--canary</span> <span class="token parameter variable">--preid</span> beta
<span class="token comment"># 1.0.0 =&gt; 1.0.1-beta.0+\${SHA}</span>

<span class="token comment"># The following are equivalent:</span>
lerna publish <span class="token parameter variable">--canary</span> minor
lerna publish <span class="token parameter variable">--canary</span> preminor
<span class="token comment"># 1.0.0 =&gt; 1.1.0-alpha.0+\${SHA}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="删除子包中的依赖项" tabindex="-1"><a class="header-anchor" href="#删除子包中的依赖项" aria-hidden="true">#</a> 删除子包中的依赖项</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>lerna clean
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从所有软件包中删除 <code>node_modules</code> 目录。 <code>lerna clean</code> 尊重 <code>--ignore</code> 和 <code>--scope</code> 标志（请参阅标志）。</p>`,9);function y(w,N){const n=o("ExternalLinkIcon");return r(),t("div",null,[d,c(" more "),u,h,a("ol",null,[a("li",null,[e("lerna 官网: "),a("a",m,[e("lerna.js.org/"),s(n)])]),a("li",null,[e("lerna 仓库："),a("a",v,[e("github.com/lerna/lerna/"),s(n)])])]),b,a("ol",null,[a("li",null,[a("a",g,[e("lerna 的基础使用"),s(n)])]),a("li",null,[a("a",k,[e("lerna 入门篇"),s(n)])])]),f,a("p",null,[e("发布 package 的名字如果是以@开头的, 例如 @feu/tools, npm 默认以为是私人发布, 需要使用 "),q,e(" 发布。但是 "),_,e(" 不支持该参数, 解决方法参考: "),a("a",x,[e("issues"),s(n)])]),j])}const B=l(p,[["render",y],["__file","usage-lerna.html.vue"]]);export{B as default};
