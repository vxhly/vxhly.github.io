import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c,a as e,b as i,f as d,d as r,e as n}from"./app-487b241d.js";const s={},h={class:"hint-container tip"},p=e("p",{class:"hint-container-title"},"前言",-1),u={href:"https://www.nowcoder.com/",target:"_blank",rel:"noopener noreferrer"},g=n('<h2 id="html" tabindex="-1"><a class="header-anchor" href="#html" aria-hidden="true">#</a> HTML</h2><ul><li><strong>置换元素</strong>: 浏览器根据元素的标签和属性来决定元素的具体显示内容</li><li><strong>非置换元素</strong>: 浏览器的大多数元素都是不可置换元素, 即其内容直接展示给浏览器</li><li>input 元素设置 readonly:true =&gt; 脚本无法修改 input 的值 （F）</li><li>input 元素设置 disabled:true =&gt; 脚本无法修改 input 的值（F）</li><li>input 元素设置 readonly:true =&gt; input 的值不会随表单提交（F）</li><li>input 元素设置 disabled:true =&gt; input 的值不会随表单提交（T）</li><li>DHTML 的动态样式作用: 使网页作者改变内容的外部特征而不强制用户再次下载全部内容</li><li>HTML5 获取某用户当前位置信息 =&gt; getCurrentPosition()</li><li>reflow(回流) =&gt; 对 DOM 树进行渲染, 修改 DOM 或修个元素的形状大小, 就会触发 reflow</li><li>enctype =&gt; 规定在发送发送服务器之前对表单数据进行编码的方式</li></ul><p>-- <code>application/x-www-form-urlencoded</code> 在发送前边吗所有的字符 -- <code>multipart/form-data</code> 部队字符编码的使用包含文件上传控件表单, 必须包含的方式 -- <code>text/plan</code> 空格转换为 &#39;+&#39; 加号, 但不对特殊字符进行编码</p><ul><li>htmlDoctype 告诉浏览器文档使用哪一种 html 或者 xhtml</li><li>不同文档模式（htmlDoctype）影响 css 内容呈现, 尤其是对盒模型</li><li>文档模式使得不同浏览器在混杂模式下差异大</li></ul><h2 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> CSS</h2><ul><li>当 <code>margin-top</code> 、 <code>padding-top</code> 的值是百分比时, 分别计算相对最近父级元素的 width, 相对最近父级元素的 width</li><li><code>position: static</code> =&gt; 无定位</li><li><code>position: absolute</code> =&gt; 绝对定位</li><li><code>position: fixed</code> =&gt; 相对窗口的固定定位</li><li><code>position: relative</code> =&gt; 相对定位</li><li>mozilla(gecko) 内核 =&gt; 浏览器: firefox、flock 等 =&gt; css 兼容前缀: <code>-moz</code></li><li>webkit 内核 =&gt; 浏览器: safari、chrome 等 =&gt; css 兼容前缀: <code>-webkit</code></li><li>opera 内核 =&gt; 浏览器: opera 等 =&gt; css 兼容前缀: <code>-o</code></li><li>trident 内核 =&gt; 浏览器: ie 等 =&gt; css 兼容前缀: <code>-ms</code></li><li>选择器优先级: ID 选择器&gt;class 选择器=伪类选择器&gt;标签名陈选择器</li><li>在不涉及样式情况下, 页面元素的优先显示与结构摆放顺序无关（F）</li></ul><h2 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript" aria-hidden="true">#</a> JavaScript</h2><ul><li>Promise 的三种状态</li></ul><p>-- 异步操作（未完成）=&gt; <code>pending</code> -- 异步操作（已完成）=&gt; <code>resolved</code> (又称 <code>fulfilled</code>) -- 异步操作（失 败） =&gt; <code>rejected</code> -- 状态改变只能是 <code>pending</code> =&gt; <code>resolved</code> 或者 <code>pending</code> =&gt; <code>rejected</code> -- 状态一旦改变就不能再次进行改变</p><ul><li>JavaScript 基本数据类型: String、Boolean、Null、Number、undefind</li><li>JavaScript 复杂数据类型: Object、Array、Function、RegExp、Date、Error</li><li>JavaScript 全局数据类型: Math</li><li>JavaScript 全局函数: escape()、eval()、isFinte()、isNaN()、parseFloat()、parseInt()、unescape()</li><li>JavaScript 异步编程</li></ul><p>-- <code>回调函数</code> : 这是异步编程最基本的方法 -- <code>事件监听</code> : 另一种思路是采用事件驱动模式, 任务的执行不取决于代码的顺序, 而取决于某事件是否发生 -- <code>发布/订阅</code> : 上一节的&quot;事件&quot;, 完全可以理解成&quot;信号&quot; -- <code>Promise 对象</code> : Promise 对象是 CommanJS 工作组提出的一种规范, 目的是为异步编程提供统一接口</p><ul><li>RegExp 对象三个方法 =&gt; <code>test()</code> 、 <code>exec()</code> 、 <code>compile()</code></li><li>JavaScript 内置对象: Arguments（函数参数集合）、Array（数组）、Boolean（布尔）、Date（日期）、Error（异常）、Function（函数）、Math（数学）、Number（数值）、Object（基础）、String（字符串）、RegExp（正则表达式）</li><li><code>history.length</code> 返回浏览器你是列表的 URL 的数量</li><li><code>history.back()</code> 加载 history 列表的前一个 URL</li><li><code>history.forward()</code> 加载 history 列表的下一个 URL</li><li><code>history.go()</code> 加载 history 列表中的某个具体页面</li><li>call 与 apply 都属于 Function.prototype 的一个方法, 所以每一个 Function 实例都有 call、apply 属性</li><li>call 第一个参数是 this, 传递给函数的参数必须逐个列举出来；apply 传递函数的参数是数组, 就是多个参数组合成一个数组传入</li><li>call 传入的是直接参数列表, 可见一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象</li><li>跨域 =&gt; 浏览器不会将存在跨域限制的服务端口响应正常交给客户端代码去处理</li><li><code>hasOwnproperty()</code> =&gt; 判断一个对象是否包含有属性或者对象</li><li><code>isPrototypeOf()</code> =&gt; 判断检查其原型链对象是否存在于指定对象中</li><li>把鼠标一定到按钮上点击, 发生 =&gt; hover -&gt; focus -&gt; active</li><li>Ajax 的优势在于开放性、易用性及易于开发</li><li>Flash 的优势在于多媒体处理, 可以更容易地调用浏览器之外的外部资源</li><li>Ajax 最主要的批评就是他可能坏浏览器地后退功能</li><li>Flash 文件经常会很大, 用户第一次使用的是否需要让来的时间较长</li></ul><h2 id="构建工具" tabindex="-1"><a class="header-anchor" href="#构建工具" aria-hidden="true">#</a> 构建工具</h2><h3 id="gulp" tabindex="-1"><a class="header-anchor" href="#gulp" aria-hidden="true">#</a> gulp</h3><p>gulp 强调的是前端开发的工作流程, 我们可以通过配置一系列的 task, 定义 task 处理的事务（例如文件压缩合并、雪碧图、启动 server、版本控制等）, 然后定义执行顺序, 来让 gulp 执行这些 task, 从而构建项目的整个前端开发流程。</p><p>PS: 简单说就一个 Task Runner</p><h3 id="webpack" tabindex="-1"><a class="header-anchor" href="#webpack" aria-hidden="true">#</a> webpack</h3><p>webpack 是一个前端模块化方案, 更侧重模块打包, 我们可以把开发中的所有资源（图片、js 文件、css 文件等）都看成模块, 通过 loader（加载器）和 plugins（插件）对资源进行处理, 打包成符合生产环境部署的前端资源。</p><p>PS: webpack is a module bundle</p><h3 id="两者区别" tabindex="-1"><a class="header-anchor" href="#两者区别" aria-hidden="true">#</a> 两者区别</h3><p>虽然都是前端自动化构建工具, 但看他们的定位就知道不是对等的。gulp 与 webpack 上是互补的, 还是可替换的, 取决于你项目的需求 gulp 严格上讲, 模块化不是他强调的东西, 他旨在规范前端开发流程。 webpack 更是明显强调模块化开发, 而那些文件压缩合并、预处理等功能, 不过是他附带的功能。</p><h2 id="版本控制工具" tabindex="-1"><a class="header-anchor" href="#版本控制工具" aria-hidden="true">#</a> 版本控制工具</h2><h3 id="git" tabindex="-1"><a class="header-anchor" href="#git" aria-hidden="true">#</a> GIT</h3><p>Git 是一个分布式版本控制系统, 操作命令包括: clone, pull, push, branch , merge , push, rebase, Git 擅长的是程序代码的版本化管理。</p><h3 id="svn" tabindex="-1"><a class="header-anchor" href="#svn" aria-hidden="true">#</a> SVN</h3><p>SVN 是一个集中式版本控制系统, SVN 只能有一个指定中央版本库。当这个中央版本库有问题时, 所有工作成员都一起瘫痪直到版本库维修完毕或者新的版本库设立完成</p><h3 id="两者区别-1" tabindex="-1"><a class="header-anchor" href="#两者区别-1" aria-hidden="true">#</a> 两者区别</h3><p>Git 与 SVN 区别点:</p><ul><li>GIT 是分布式的, SVN 不是: 这是 GIT 和其它非分布式的版本控制系统, 例如 SVN, CVS 等, 最核心的区别。</li><li>GIT 把内容按元数据方式存储, 而 SVN 是按文件: 所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn, .cvs 等的文件夹里。</li><li>GIT 分支和 SVN 的分支不同: 分支在 SVN 中一点不特别, 就是版本库中的另外的一个目录。</li><li>GIT 没有一个全局的版本号, 而 SVN 有: 目前为止这是跟 SVN 相比 GIT 缺少的最大的一个特征。</li><li>GIT 的内容完整性要优于 SVN: GIT 的内容存储使用的是 SHA-1 哈希算法。这能确保代码内容的完整性, 确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</li><li>是通过.git 和.svn 文件, .git 只是在本地的版本库的目录下存在, 而.svn 存在于每一个文件夹, 当我们不需要版本控制的时候, 要删除.svn 很费时。</li></ul><h2 id="网络基础" tabindex="-1"><a class="header-anchor" href="#网络基础" aria-hidden="true">#</a> 网络基础</h2><ul><li>HTTP 协议所使用的运输层协议是 <code>TCP/IP</code></li><li>HTTPS 的默认端口号是 <code>443</code></li><li>TCP 注重数据可靠性, UDP 注重数据传输快</li><li>传输层提供端对端的可靠文传递和错误恢复</li><li>DNS 协议大多数运行在 <code>UDP</code> 协议上</li><li>DNS 的默认端口号是 <code>53</code></li><li>HTTP 工作于应用层, HTTPS 工作于传输层</li></ul><h2 id="进程和线程" tabindex="-1"><a class="header-anchor" href="#进程和线程" aria-hidden="true">#</a> 进程和线程</h2><ul><li>进程是资源分配的最小单位</li><li>线程是资源调度的最小单位</li><li>进程是动态的、多个进程可以包含相同的程序和多个进程可以进行并发运行</li></ul><h2 id="算法" tabindex="-1"><a class="header-anchor" href="#算法" aria-hidden="true">#</a> 算法</h2><ul><li>排序算法: 插入排序、希尔排序、冒泡排序、堆排序、归并排序、快速排序、选择排序</li><li>排序算法不稳定的有: 希尔排序、堆排序、快速排序、选择排序</li></ul>',35);function f(b,m){const l=t("ExternalLinkIcon");return o(),c("div",null,[e("div",h,[p,e("p",null,[i("最近在"),e("a",u,[i("牛客网"),d(l)]),i("上刷前端相关的题目, 发现自己真的不堪一击, 菜的要死, 毕竟都是大厂出的题目, 在刷题的过程中同时也学到了不少的冷门知识（主要是自己做错的题目里的知识点）, 现在分享出来, 真的有用, 注意这里面内容纯理论。")])]),r(" more "),g])}const v=a(s,[["render",f],["__file","web-unpopular-knowledge.html.vue"]]);export{v as default};
