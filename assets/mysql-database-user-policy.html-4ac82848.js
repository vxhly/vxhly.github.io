import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as n,d as o,a as s,e as i}from"./app-b32ebd48.js";const c="/assets/mysql-reinforce-1.png",t="/assets/mysql-reinforce-2.png",l="/assets/mysql-reinforce-3.png",d="/assets/mysql-reinforce-4.png",p="/assets/mysql-reinforce-5.png",r="/assets/mysql-reinforce-6.png",u="/assets/mysql-reinforce-7.png",m="/assets/mysql-reinforce-8.png",g="/assets/mysql-reinforce-9.png",y="/assets/mysql-reinforce-10.png",k="/assets/mysql-reinforce-11.png",h="/assets/mysql-reinforce-12.png",b="/assets/mysql-reinforce-13.png",f="/assets/mysql-reinforce-14.png",v="/assets/mysql-reinforce-15.png",q="/assets/mysql-reinforce-16.png",S="/assets/mysql-reinforce-19.png",w="/assets/mysql-reinforce-17.png",x="/assets/mysql-reinforce-18.png",L="/assets/mysql-reinforce-20.png",Q="/assets/mysql-reinforce-21.png",_="/assets/mysql-reinforce-22.png",M="/assets/mysql-reinforce-23.png",E="/assets/mysql-reinforce-24.png",A="/assets/mysql-reinforce-25.png",z="/assets/mysql-reinforce-26.png",T={},F=s("div",{class:"hint-container tip"},[s("p",{class:"hint-container-title"},"前言"),s("p",null,"数据库作为数据管理的平台, 它的安全性首先由系统内部和网络安全两部分来决定的。对于系统管理员来说, 首先要保证系统本身的安全, 在安装 MySQL 数据时, 需要对基础环境进行较好的配置。本篇笔记将记录在 RedHat Liunx 系统下 MySQL 数据库的安全加固方法。")],-1),P=i(`<h2 id="修改-root-用户口令" tabindex="-1"><a class="header-anchor" href="#修改-root-用户口令" aria-hidden="true">#</a> 修改 root 用户口令</h2><p>缺省安装的 MySQL 的 root 用户是空密码的, 为了安全起见, 必须修改为强密码, 所谓的强密码, 至少 8 位, 由字母、数字和符号组成的不规律密码。使用 MySQL 自带的命令 <code>mysqladmin</code> 修改 root 密码, 同时也可以登陆数据库, 修改数据库 mysql 下的 user 表的字段内容</p><h3 id="使用-mysqladmin-命令" tabindex="-1"><a class="header-anchor" href="#使用-mysqladmin-命令" aria-hidden="true">#</a> 使用 mysqladmin 命令</h3><p>修改密码, <code>For Example:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysqladmin <span class="token parameter variable">-u</span> root password <span class="token string">&quot;upassword&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+c+`" alt="MySQL 数据库加固" tabindex="0" loading="lazy"><figcaption>MySQL 数据库加固</figcaption></figure><h3 id="使用-sql-语句修改" tabindex="-1"><a class="header-anchor" href="#使用-sql-语句修改" aria-hidden="true">#</a> 使用 SQL 语句修改</h3><p><code>Connection Example:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql <span class="token parameter variable">-h</span> <span class="token number">127.0</span>.0.1 <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输入之前设置的密码 <code>upassword</code> , 连接数据库</p><p>修改密码, <code>For Example:</code></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">use</span> mysql<span class="token punctuation">;</span>        <span class="token comment">-- 切换当前的数据库</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">update</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">set</span> password<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">&#39;upassword&#39;</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> flush <span class="token keyword">privileges</span><span class="token punctuation">;</span> <span class="token comment">-- 强制刷新内存授权表,否则用的还是内存缓存中的口令。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+t+`" alt="MySQL 数据库加固" tabindex="0" loading="lazy"><figcaption>MySQL 数据库加固</figcaption></figure><p>修改完成之后可以执行 SQL 语句查询, <code>For Example:</code></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="删除默认数据库和数据库用户" tabindex="-1"><a class="header-anchor" href="#删除默认数据库和数据库用户" aria-hidden="true">#</a> 删除默认数据库和数据库用户</h2><p>一般情况下, MySQL 数据库安装在本地, 并且也只需要本地的 php 脚本对 mysql 进行读取, 所以很多用户不需要, 尤其是默认安装的用户。MySQL 初始化后会自动生成空用户和 test 库, 进行安装的测试, 这会对数据库的安全构成威胁, 有必要全部删除, 最后的状态只保留单个 root 即可, 当然以后根据需要增加用户和数据库。</p><p>执行以下 SQL 语句, <code>For Example:</code></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span>   <span class="token comment">-- 显示当前的所有数据库</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">drop</span> <span class="token keyword">database</span> test<span class="token punctuation">;</span><span class="token comment">-- 删除数据库 test</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">use</span> mysql<span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">delete</span> <span class="token keyword">from</span> db<span class="token punctuation">;</span>   <span class="token comment">-- 删除存放在数据库的表信息,因为还没有数据库信息</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">delete</span> <span class="token keyword">from</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">where</span> <span class="token operator">not</span> <span class="token punctuation">(</span><span class="token keyword">user</span><span class="token operator">=</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">delete</span> <span class="token keyword">from</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">&#39;root&#39;</span> <span class="token operator">and</span> password<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+l+'" alt="MySQL 数据库加固" tabindex="0" loading="lazy"><figcaption>MySQL 数据库加固</figcaption></figure><br><figure><img src="'+d+'" alt="MySQL 数据库加固" tabindex="0" loading="lazy"><figcaption>MySQL 数据库加固</figcaption></figure><br><figure><img src="'+p+`" alt="MySQL 数据库加固" tabindex="0" loading="lazy"><figcaption>MySQL 数据库加固</figcaption></figure><h2 id="改变默认-mysql-管理员账号" tabindex="-1"><a class="header-anchor" href="#改变默认-mysql-管理员账号" aria-hidden="true">#</a> 改变默认 MySQL 管理员账号</h2><p>系统 MySQL 的管理员名称是 root, 而一般情况下, 数据库管理员都没进行修改, 这一定程度上对系统用户穷举的恶意行为提供了便利, 此时修改为复杂的用户名, 请不要在设定为 admin 或者 administraror 的形式, 因为它们也在易猜的用户字典中。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">update</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">set</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">&quot;newroot&quot;</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+`" alt="MySQL 数据库加固" tabindex="0" loading="lazy"><figcaption>MySQL 数据库加固</figcaption></figure><h2 id="关于密码的管理" tabindex="-1"><a class="header-anchor" href="#关于密码的管理" aria-hidden="true">#</a> 关于密码的管理</h2><p>密码是数据库安全管理的一个很重要因素, 不要将纯文本密码保存到数据库中。如果你的计算机有安全危险, 入侵者可以获得所有的密码并使用它们。相反, 应使用 <code>MD5()</code> 、 <code>SHA1()</code> 或单向哈希函数。也不要从词典中选择密码, 有专门的程序可以破解它们, 请选用至少八位, 由字母、数字和符号组成的强密码。在存取密码时, 使用 mysql 的内置函数 <code>password（）</code> 的 sql 语句, 对密码进行加密后存储。例如以下方式在 users 表中加入新用户。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">insert</span> <span class="token keyword">into</span> users <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>password<span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="使用独立用户运行-mysql" tabindex="-1"><a class="header-anchor" href="#使用独立用户运行-mysql" aria-hidden="true">#</a> 使用独立用户运行 MySQL</h2><p>绝对不要作为使用 root 用户运行 <code>MySQL 服务器</code> 。这样做非常危险, 因为任何具有 FILE 权限的用户能够用 root 创建文件(例如: <code>~root/.bashrc</code> )。mysqld 拒绝使用 root 运行, 除非使用 <code>–user=root</code> 选项明显指定。应该用普通非特权用户运行 mysqld。</p><p>要想用其它 Unix 用户启动 mysqld, , 增加 user 选项指定 <code>/etc/my.cnf</code> 选项文件或服务器数据目录的 <code>my.cnf</code> 选项文件中的 <code>[mysqld]</code> 组的用户名。</p><h3 id="加固" tabindex="-1"><a class="header-anchor" href="#加固" aria-hidden="true">#</a> 加固</h3><p><code>/etc/my.cnf</code> 配置文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
<span class="token assign-left variable">user</span><span class="token operator">=</span>mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+u+`" alt="MySQL 数据库加固" tabindex="0" loading="lazy"><figcaption>MySQL 数据库加固</figcaption></figure><p>该命令使服务器用指定的用户来启动, 无论你手动启动或通过 <code>mysqld_safe</code> 或 <code>mysql.server</code> 启动, 都能确保使用 mysql 的身份。也可以在启动数据库是, 加上 <code>user</code> 参数。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>/usr/bin/mysqld_safe <span class="token parameter variable">--user</span><span class="token operator">=</span>mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>作为其它 linux 用户而不用 root 运行 mysqld, 你不需要更改 user 表中的 root 用户名, 因为 <code>MySQL 账户</code> 的用户名与 <code>linux 账户</code> 的用户名无关。确保 mysqld 运行时, 只使用对数据库目录具有读或写权限的 linux 用户来运行。</p><figure><img src="`+m+`" alt="MySQL 数据库加固" tabindex="0" loading="lazy"><figcaption>MySQL 数据库加固</figcaption></figure><h2 id="禁止远程连接数据库" tabindex="-1"><a class="header-anchor" href="#禁止远程连接数据库" aria-hidden="true">#</a> 禁止远程连接数据库</h2><p>在命令行 <code>netstat -ant</code> 下看到, 默认的 <code>3306</code> 端口是打开的, 此时打开了 <code>mysqld</code> 的网络监听, 允许用户远程通过帐号密码连接数本地据库, 默认情况是允许远程连接数据的。为了禁止该功能, 启动 <code>skip-networking</code> , 不监听 sql 的任何 <code>TCP/IP</code> 的连接, 切断远程访问的权利, 保证安全性。假如需要远程管理数据库, 可通过安装 <code>PhpMyadmin</code> 来实现。假如确实需要远程连接数据库, 至少修改默认的监听端口, 同时添加防火墙规则, 只允许可信任的网络的 <code>mysql</code> 监听端口的数据通过。</p><h3 id="加固-1" tabindex="-1"><a class="header-anchor" href="#加固-1" aria-hidden="true">#</a> 加固</h3><p>编辑 <code>/etc/my.cnf</code> , 加入如下语句</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
skip-networking
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+g+`" alt="MySQL 数据库加固" tabindex="0" loading="lazy"><figcaption>MySQL 数据库加固</figcaption></figure><p>执行重启语句, <code>For Example:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">service</span> mysqld restart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="限制连接用户的数量" tabindex="-1"><a class="header-anchor" href="#限制连接用户的数量" aria-hidden="true">#</a> 限制连接用户的数量</h2><p>数据库的某用户多次远程连接, 会导致性能的下降和影响其他用户的操作, 有必要对其进行限制。可以通过限制单个账户允许的连接数量来实现, 设置 <code>my.cnf</code> 文件的 <code>mysqld</code> 中的 <code>max_user_connections</code> 变量来完成。 <code>GRANT</code> 语句也可以支持 资源控制选项来限制服务器对一个账户允许的使用范围。</p><p>编辑 <code>/etc/my.cnf</code> , 加入如下语句</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
max_user_connections <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+y+`" alt="MySQL 数据库加固" tabindex="0" loading="lazy"><figcaption>MySQL 数据库加固</figcaption></figure><h2 id="用户目录权限限制" tabindex="-1"><a class="header-anchor" href="#用户目录权限限制" aria-hidden="true">#</a> 用户目录权限限制</h2><p>默认的 MySQL 是安装在 <code>/usr/share/mysql</code> , 而对应的数据库文件在 <code>/var/lib/mysql</code> 目录下, 因此, 必须保证该目录不能让未经授权的用户访问后把数据库打包拷贝走了, 所以要限制对该目录的访问。确保 <code>mysqld</code> 运行时, 只使用对数据库目录具有读或写权限的 linux 用户来运行。</p><p>修改权限, <code>For Example:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">chown</span> <span class="token parameter variable">-R</span> root /usr/share/mysql
<span class="token function">chown</span> <span class="token parameter variable">-R</span> mysql:mysql /var/lib/mysql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+k+`" alt="MySQL 数据库加固" tabindex="0" loading="lazy"><figcaption>MySQL 数据库加固</figcaption></figure><h2 id="命令历史记录保护" tabindex="-1"><a class="header-anchor" href="#命令历史记录保护" aria-hidden="true">#</a> 命令历史记录保护</h2><p>数据库相关的 shell 操作命令都会分别记录在 <code>.bash_history</code> , 如果这些文件不慎被读取, 会导致数据库密码和数据库结构等信息泄露, 而登陆数据库后的操作将记录在 <code>/etc/my.cnf</code> 文件配置的文件中, 如果使用 <code>update</code> 表信息来修改数据库用户密码的话, 也会被读取密码, 因此需要删除这两个文件, 同时在进行登陆或备份数据库等与密码相关操作时, 应该使用 <code>-p</code> 参数加入提示输入密码后, 隐式输入密码, 建议将以上文件置空。</p><h3 id="加固-2" tabindex="-1"><a class="header-anchor" href="#加固-2" aria-hidden="true">#</a> 加固</h3><p>配置文件 <code>/etc/my.cnf</code> 中配置数据库操作日志存放路径, <code>For Example:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>mysqld_safe<span class="token punctuation">]</span>
<span class="token assign-left variable">log</span><span class="token operator">=~</span>/.mysql_history
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+h+'" alt="MySQL 数据库加固" tabindex="0" loading="lazy"><figcaption>MySQL 数据库加固</figcaption></figure><p>随意执行一些操作, <code>For Example:</code> <br></p><figure><img src="'+b+'" alt="MySQL 数据库加固" tabindex="0" loading="lazy"><figcaption>MySQL 数据库加固</figcaption></figure><p>查看 <code>~/.mysql_history</code> 文件, 可以看到数据库操作纪录（将会纪录所有成功或者失败的操作 SQL 语句）<br></p><figure><img src="'+f+'" alt="MySQL 数据库加固" tabindex="0" loading="lazy"><figcaption>MySQL 数据库加固</figcaption></figure><p>查看 <code>~/.bash_history</code> 文件, 可以看到有关于数据操作的 shell 命令<br></p><figure><img src="'+v+`" alt="MySQL 数据库加固" tabindex="0" loading="lazy"><figcaption>MySQL 数据库加固</figcaption></figure><p>删除操作命令, <code>For Example:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">rm</span> .bash_history .mysql_history
<span class="token function">ln</span> <span class="token parameter variable">-s</span> /dev/null .bash_history
<span class="token function">ln</span> <span class="token parameter variable">-s</span> /dev/null .mysql_history
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+q+'" alt="MySQL 数据库加固" tabindex="0" loading="lazy"><figcaption>MySQL 数据库加固</figcaption></figure><h2 id="禁止-mysql-对本地文件存取" tabindex="-1"><a class="header-anchor" href="#禁止-mysql-对本地文件存取" aria-hidden="true">#</a> 禁止 MySQL 对本地文件存取</h2><p>在 mysql 中, 提供对本地文件的读取, 使用的是 <code>load data local infile</code> 命令, 默认在 5.0 版本中, 该选项是默认打开的, 该操作令会利用 MySQL 把本地文件读到数据库中, 然后用户就可以非法获取敏感信息了, 假如你不需要读取本地文件, 请务必关闭。</p><h3 id="测试存取" tabindex="-1"><a class="header-anchor" href="#测试存取" aria-hidden="true">#</a> 测试存取</h3><p>测试: 首先在测试数据库下建立 <code>sqlfile.txt</code> 文件, 用逗号隔开各个字段<br></p><figure><img src="'+S+`" alt="MySQL 数据库加固" tabindex="0" loading="lazy"><figcaption>MySQL 数据库加固</figcaption></figure><p>在测试数据库, 先新建一张表, 建表的 SQL 语句如下, <code>For Example:</code></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> users <span class="token punctuation">(</span>
  userid <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  username <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  password <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+w+`" alt="MySQL 数据库加固" tabindex="0" loading="lazy"><figcaption>MySQL 数据库加固</figcaption></figure><p>执行导入语句, <code>For Example:</code></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> <span class="token keyword">infile</span> <span class="token string">&#39;sqlfile.txt&#39;</span> <span class="token keyword">into</span> <span class="token keyword">table</span> test<span class="token punctuation">.</span>users <span class="token keyword">fields</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">&#39;,&#39;</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test<span class="token punctuation">.</span>users<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+x+'" alt="MySQL 数据库加固" tabindex="0" loading="lazy"><figcaption>MySQL 数据库加固</figcaption></figure><p>成功的将本地数据插入数据中, 此时应该禁止 MySQL 中用 <code>load data local infile</code> 命令。网络上流传的一些攻击方法中就有用它 <code>load data local infile</code> 的, 同时它也是很多新发现的 <code>SQL Injection</code> 攻击利用的手段！黑客还能通过使用 <code>load data local infile</code> 装载 <code>/etc/passwd</code> 进一个数据库表, 然后能用 <code>SELECT</code> 显示它, 这个操作对服务器的安全来说, 是致命的。可以在 <code>/etc/my.cnf</code> 中添加 <code>local-infile=0</code> , 或者加参数 <code>local-infile=0</code> 启动 <code>mysql</code> 。</p><h3 id="sql-攻击" tabindex="-1"><a class="header-anchor" href="#sql-攻击" aria-hidden="true">#</a> SQL 攻击</h3><p>黑客使用 <code>load data local infile</code> 获取 <code>/etc/passwd</code> 文件内容步骤<br></p><figure><img src="'+L+`" alt="MySQL 数据库加固" tabindex="0" loading="lazy"><figcaption>MySQL 数据库加固</figcaption></figure><p>接下来黑客只需执行 <code>select * from test.passwd</code> 就可以查询到数据了。</p><h4 id="加固-3" tabindex="-1"><a class="header-anchor" href="#加固-3" aria-hidden="true">#</a> 加固</h4><p>编辑 <code>/etc/my.cnf</code> 文件, 加入如下语句, <code>For Example:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
local-infile<span class="token operator">=</span><span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+Q+`" alt="MySQL 数据库加固" tabindex="0" loading="lazy"><figcaption>MySQL 数据库加固</figcaption></figure><p>或者直接执行命令, <code>For Example:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysql_safe <span class="token parameter variable">--user</span><span class="token operator">=</span>mysql --local-infile<span class="token operator">=</span><span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再次执行 <code>load data local infile</code> 命令, 导入 <code>/etc/passwd</code> 内容, 发现命令出错</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> <span class="token keyword">infile</span> <span class="token string">&#39;/etc/passwd&#39;</span> <span class="token keyword">into</span> <span class="token keyword">table</span> test<span class="token punctuation">.</span>passwd <span class="token keyword">fields</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">&#39;:&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+_+`" alt="MySQL 数据库加固" tabindex="0" loading="lazy"><figcaption>MySQL 数据库加固</figcaption></figure><h2 id="mysql-服务器权限控制" tabindex="-1"><a class="header-anchor" href="#mysql-服务器权限控制" aria-hidden="true">#</a> MySQL 服务器权限控制</h2><p>MySQL 权限系统的主要功能是证实连接到一台给定主机的用户, 并且赋予该用户在数据库上的 <code>SELECT</code> 、 <code>INSERT</code> 、 <code>UPDATE</code> 和 <code>DELETE</code> 等权限（详见 user 超级用户表）。它的附加的功能包括有匿名的用户并对于 MySQL 特定的功能例如 <code>load data local infile</code> 进行授权及管理操作的能力。</p><p>FILE 权限允许用户在 MySQL 服务器具有写权限的目录下创建新文件, 但不能覆盖已有文件在 user 表的 <code>File_priv</code> 设置 <code>Y</code> 或 <code>N</code> 。, 所以当你不需要对服务器文件读取时, 请关闭该权限。</p><h3 id="加固-4" tabindex="-1"><a class="header-anchor" href="#加固-4" aria-hidden="true">#</a> 加固</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>需要将之前的加固配置项（ <code>local-infile=0</code> ）清掉</p></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">update</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">set</span> file_priv<span class="token operator">=</span><span class="token string">&#39;N&#39;</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">;</span>
mysql<span class="token operator">&gt;</span> flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+M+'" alt="MySQL 数据库加固" tabindex="0" loading="lazy"><figcaption>MySQL 数据库加固</figcaption></figure><br><figure><img src="'+E+`" alt="MySQL 数据库加固" tabindex="0" loading="lazy"><figcaption>MySQL 数据库加固</figcaption></figure><div class="hint-container warning"><p class="hint-container-title">注意</p><p>刷新授权表之后, 一定要重新登录再进行测试, 否则还是会执行成功的</p></div><p>当 <code>file_priv=&#39;N&#39;</code> , 黑客进行以下语句的时候, 就会出错</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test<span class="token punctuation">.</span>passwd <span class="token keyword">into</span> <span class="token keyword">outfile</span> <span class="token string">&#39;test.txt&#39;</span> <span class="token keyword">fields</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">&#39;:&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当然还原配置之后, 黑客就可以很愉快的获取数据库中内容</p><figure><img src="`+A+'" alt="MySQL 数据库加固" tabindex="0" loading="lazy"><figcaption>MySQL 数据库加固</figcaption></figure><br><figure><img src="'+z+`" alt="MySQL 数据库加固" tabindex="0" loading="lazy"><figcaption>MySQL 数据库加固</figcaption></figure><h2 id="使用-chroot-来控制-mysql-的运行目录" tabindex="-1"><a class="header-anchor" href="#使用-chroot-来控制-mysql-的运行目录" aria-hidden="true">#</a> 使用 chroot 来控制 MySQL 的运行目录</h2><p><code>Chroot</code> 是 linux 中的一种系统高级保护手段, 它的建立会将其与主系统几乎完全隔离, 也就是说, 一旦遭到什么问题, 也不会危及到正在运行的主系统。这是一个非常有效的办法, 特别是在配置网络服务程序的时候。</p><h2 id="关闭对-web-访问的支持" tabindex="-1"><a class="header-anchor" href="#关闭对-web-访问的支持" aria-hidden="true">#</a> 关闭对 Web 访问的支持</h2><p>如果不打算让 Web 访问使用 MySQL 数据库, 没有提供诸如 PHP 这样的 Web 语言的时候, 重新设置或编译你的 PHP, 取消它们对 MySQL 的默认支持。假如服务器中使用 PHP 等 web 程序, 试试用 Web 形式非法的请求, 如果得到任何形式的 MySQL 错误, 立即分析原因, 及时修改 Web 程序, 堵住漏洞, 防止 MySQL 暴露在 web 面前。 对于 Web 的安全检查, 在 MySQL 官方文档中这么建议, 对于 web 应用, 至少检查以下清单:</p><ul><li>试试用 Web 形式输入单引号和双引号( <code>‘’’</code> 和 <code>‘”’</code> )。如果得到任何形式的 MySQL 错误, 立即分析原因。</li><li>试试修改动态 URL, 可以在其中添加 <code>%22(‘”’)</code> 、 <code>%23(‘#’)</code> 和 <code>%27(‘’’)</code> 。</li><li>试试在动态 URL 中修改数据类型, 使用前面示例中的字符, 包括数字和字符类型。你的应用程序应足够安全, 可以防范此类修改和类似攻击。</li><li>试试输入字符、空格和特殊符号, 不要输入数值字段的数字。你的应用程序应在将它们传递到 MySQL 之前将它们删除或生成错误。将未经过检查的值传递给 MySQL 是很危险的！</li><li>将数据传给 MySQL 之前先检查其大小。</li><li>用管理账户之外的用户名将应用程序连接到数据库。不要给应用程序任何不需要的访问权限。</li></ul><h2 id="数据库备份策略" tabindex="-1"><a class="header-anchor" href="#数据库备份策略" aria-hidden="true">#</a> 数据库备份策略</h2><p>使用 <code>mysqldump</code> 可以把整个数据库装载到一个单独的文本文件中。这个文件包含有所有重建您的数据库所需要的 SQL 命令。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>mysqldump <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span> mysql <span class="token operator">&gt;</span> abc.sql
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="mysqld-安全相关启动项" tabindex="-1"><a class="header-anchor" href="#mysqld-安全相关启动项" aria-hidden="true">#</a> mysqld 安全相关启动项</h2><p>下列 <code>mysqld</code> 选项影响安全:</p><ul><li><strong><code>--allow-suspicious-udfs</code></strong></li></ul><p>-- 该选项控制是否可以载入主函数只有 xxx 符的用户定义函数。默认情况下, 该选项被关闭, 并且只能载入至少有辅助符的 UDF。这样可以防止从未包含合法 UDF 的共享对象文件载入函数。</p><ul><li><strong><code>--local-infile[={0|1}]</code></strong></li></ul><p>-- 如果用 <code>–local-infile=0</code> 启动服务器, 则客户端不能使用 LOCAL in LOAD DATA 语句。</p><ul><li><strong><code>--old-passwords</code></strong></li></ul><p>-- 强制服务器为新密码生成短( <code>pre-4.1</code> )密码哈希。当服务器必须支持旧版本客户端程序时, 为了保证兼容性这很有用。</p><ul><li><strong><code>(OBSOLETE) --safe-show-database</code></strong></li></ul><p>-- 在以前版本的 MySQL 中, 该选项使 <code>SHOW DATABASES</code> 语句只显示用户具有部分权限的数据库名。在 <code>MySQL 5.1</code> 中, 该选项不再作为现在的 默认行为使用, 有一个 <code>SHOW DATABASES</code> 权限可以用来控制每个账户对数据库名的访问。</p><ul><li><strong><code>--safe-user-create</code></strong></li></ul><p>-- 如果启用, 用户不能用 <code>GRANT</code> 语句创建新用户, 除非用户有 <code>mysql.user</code> 表的 <code>INSERT</code> 权限。如果你想让用户具有授权权限来创建新用户, 你应给用户授予下面的权限: <code>mysql&gt; GRANT INSERT(user) ON mysql.user TO ‘user_name’@&#39;host_name’;</code> 这样确保用户不能直接更改权限列, 必须使用 GRANT 语句给其它用户授予该权限。</p><ul><li><strong><code>--secure-auth</code></strong></li></ul><p>-- 不允许鉴定有旧( <code>pre-4.1</code> )密码的账户。</p><ul><li><strong><code>--skip-grant-tables</code></strong></li></ul><p>-- 这个选项导致服务器根本不使用权限系统。这给每个人以完全访问所有的数据库的权力！（通过执行 <code>mysqladmin flush-privileges</code> 或 <code>mysqladmin eload</code> 命令, 或执行 <code>FLUSH PRIVILEGES</code> 语句, 你能告诉一个正在运行的服务器再次开始使用授权表。）</p><ul><li><strong><code>--skip-name-resolve</code></strong></li></ul><p>-- 主机名不被解析。所有在授权表的 Host 的列值必须是 IP 号或 localhost。</p><ul><li><strong><code>--skip-networking</code></strong></li></ul><p>-- 在网络上不允许 TCP/IP 连接。所有到 mysqld 的连接必须经由 Unix 套接字进行。</p><ul><li><strong><code>--skip-show-database</code></strong></li></ul><p>-- 使用该选项, 只允许有 <code>SHOW DATABASES</code> 权限的用户执行 <code>SHOW DATABASES</code> 语句, 该语句显示所有数据库名。不使用该选项, 允许所有用户执行 <code>SHOW DATABASES</code> , 但只显示用户有 <code>SHOW DATABASES</code> 权限或部分数据库权限的数据库名。请注意全局权限指数据库的权限。</p>`,146);function D(N,H){return e(),n("div",null,[F,o(" more "),P])}const O=a(T,[["render",D],["__file","mysql-database-user-policy.html.vue"]]);export{O as default};
