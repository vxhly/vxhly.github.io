const e=JSON.parse('{"key":"v-011e7814","path":"/views/vuejs/vue-emit-events-by-bus.html","title":"Vue.js 发送全局事件（Bus）","lang":"zh-CN","frontmatter":{"author":"星火燎原@vxhly","title":"Vue.js 发送全局事件（Bus）","category":["vuejs"],"tag":["Vue.js","Node.js"],"date":"2019-01-19T13:27:59.000Z","description":"前言 vue 1.0 废弃了 vm.$broadcast 和 vm.$dispatch 的 API, 那么在兄弟组件之间进行通信就变的异常为难, 现在就需要一个比较便捷的解决方法。那么, eventBus 的作用就体现出来了, 主要是实现途径是在要相互通信的兄弟组件之中, 都引入一个新的 vue 实例, 然后通过分别调用这个实例的事件触发和监听来实现通信和参数传递。","head":[["meta",{"property":"og:url","content":"https://vxhly.github.io/views/vuejs/vue-emit-events-by-bus.html"}],["meta",{"property":"og:site_name","content":"Coding and Fixing"}],["meta",{"property":"og:title","content":"Vue.js 发送全局事件（Bus）"}],["meta",{"property":"og:description","content":"前言 vue 1.0 废弃了 vm.$broadcast 和 vm.$dispatch 的 API, 那么在兄弟组件之间进行通信就变的异常为难, 现在就需要一个比较便捷的解决方法。那么, eventBus 的作用就体现出来了, 主要是实现途径是在要相互通信的兄弟组件之中, 都引入一个新的 vue 实例, 然后通过分别调用这个实例的事件触发和监听来实现通信和参数传递。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-06-11T12:24:01.000Z"}],["meta",{"property":"article:author","content":"星火燎原@vxhly"}],["meta",{"property":"article:tag","content":"Vue.js"}],["meta",{"property":"article:tag","content":"Node.js"}],["meta",{"property":"article:published_time","content":"2019-01-19T13:27:59.000Z"}],["meta",{"property":"article:modified_time","content":"2022-06-11T12:24:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue.js 发送全局事件（Bus）\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-01-19T13:27:59.000Z\\",\\"dateModified\\":\\"2022-06-11T12:24:01.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"星火燎原@vxhly\\"}]}"],["link",{"rel":"canonical","href":"https://vxhly.github.io/views/vuejs/vue-emit-events-by-bus.html"}]]},"headers":[{"level":2,"title":"起因","slug":"起因","link":"#起因","children":[]},{"level":2,"title":"EventBus 的简介","slug":"eventbus-的简介","link":"#eventbus-的简介","children":[]},{"level":2,"title":"更加详细的 vue 组件通信","slug":"更加详细的-vue-组件通信","link":"#更加详细的-vue-组件通信","children":[{"level":3,"title":"总结一下 Vue 通信的几个方式, 和各自的适用场景","slug":"总结一下-vue-通信的几个方式-和各自的适用场景","link":"#总结一下-vue-通信的几个方式-和各自的适用场景","children":[]}]},{"level":2,"title":"封装的 bus.js","slug":"封装的-bus-js","link":"#封装的-bus-js","children":[]},{"level":2,"title":"食用栗子","slug":"食用栗子","link":"#食用栗子","children":[]}],"git":{"createdTime":1654950241000,"updatedTime":1654950241000,"contributors":[{"name":"vxhly","email":"pengchengou@gmail.com","commits":1}]},"readingTime":{"minutes":3.25,"words":976},"filePathRelative":"views/vuejs/vue-emit-events-by-bus.md","localizedDate":"2019年1月19日","excerpt":"<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">前言</p>\\n<p>vue 1.0 废弃了 <code>vm.$broadcast</code> 和 <code>vm.$dispatch</code> 的 API, 那么在兄弟组件之间进行通信就变的异常为难, 现在就需要一个比较便捷的解决方法。那么, eventBus 的作用就体现出来了, 主要是实现途径是在要相互通信的兄弟组件之中, 都引入一个新的 vue 实例, 然后通过分别调用这个实例的事件触发和监听来实现通信和参数传递。</p>\\n</div>\\n","copyright":{"author":"星火燎原@vxhly","license":"MIT"},"autoDesc":true}');export{e as data};
