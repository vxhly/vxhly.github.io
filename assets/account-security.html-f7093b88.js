import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as i,d,a as e,e as o}from"./app-5294595a.js";const c="/assets/redhat-reinforce-1.png",r="/assets/redhat-reinforce-3.png",l="/assets/redhat-reinforce-4.png",p="/assets/redhat-reinforce-6.png",h="/assets/redhat-reinforce-7.png",a="/assets/redhat-reinforce-8.png",n="/assets/redhat-reinforce-9.png",u="/assets/redhat-reinforce-5.png",g="/assets/redhat-reinforce-10.png",m="/assets/redhat-reinforce-11.png",v={},b=e("div",{class:"hint-container tip"},[e("p",{class:"hint-container-title"},"前言"),e("p",null,"本系列笔记又是 Liunx 学习系列教程的一大步, 本系列学习笔记记录 RedHat 系统的安全加固。 本篇主要介绍相关于帐号安全的加固策略, 加强系统的防御能力。")],-1),f=o(`<h2 id="密码规则" tabindex="-1"><a class="header-anchor" href="#密码规则" aria-hidden="true">#</a> 密码规则</h2><h3 id="密码长度和有效期" tabindex="-1"><a class="header-anchor" href="#密码长度和有效期" aria-hidden="true">#</a> 密码长度和有效期</h3><p><strong>/etc/login.defs</strong> 文件是当创建用户时的一些规划, 比如创建用户时, 是否需要家目录, UID 和 GID 的范围; 用户的期限等等, 这个文件是可以通过 <code>root</code> 来定义的</p><p><code>Default Configuration:</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>PASS_MAX_DAYS 99999 # 两次改变密码之间相距的最大天数, 密码有效最大天数
PASS_MIN_DAYS 0 # 两次改变密码之间相距的最小天数, 为零时代表任何时候都可以更改密码
PASS_MIN_LEN 5 # 密码最小长度
PASS_WARN_AGE 7 # 在密码过期之前警告的天数
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>以上只对之后新增的用户有效, 如果要修改已存在的用户密码规则, 需要使用 <code>chage</code> 命令</p></div><p>使用以下命令, 可以查看用户的密码规则, <code>Command Format:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>chage <span class="token parameter variable">-l</span> <span class="token punctuation">[</span>userName<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>For Examlpe:</code> <br></p><figure><img src="`+c+`" alt="RedHat 系统安全加固" tabindex="0" loading="lazy"><figcaption>RedHat 系统安全加固</figcaption></figure><h2 id="chage-命令" tabindex="-1"><a class="header-anchor" href="#chage-命令" aria-hidden="true">#</a> chage 命令</h2><p>设置最大最小使用天数, 以及警告天数, <code>For Examlpe:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>chage <span class="token parameter variable">-M</span> <span class="token number">90</span> <span class="token parameter variable">-m</span> <span class="token number">6</span> <span class="token parameter variable">-W</span> <span class="token number">30</span> <span class="token punctuation">[</span>userName<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>不要用该命令给 root 用户加上有效期, 如果密码过期, 再加上后文说的 <code>/etc/shadow</code> 文件加锁禁止修改, 会导致 root 提示修改密码, 无法成功修改密码, 从而无法登陆。</p></div><p><code>chage</code> 选项解释</p><ul><li><strong>-m</strong> =&gt; 密码可更改的最小天数。 为零时代表任何时候都可以更改密码。</li><li><strong>-M</strong> =&gt; 密码保持有效的最大天数。</li><li><strong>-w</strong> =&gt; 用户密码到期前, 提前收到警告信息的天数。</li><li><strong>-E</strong> =&gt; 帐号到期的日期。 过了这天, 此帐号将不可用。</li><li><strong>-d</strong> =&gt; 上一次更改的日期。</li><li><strong>-i</strong> =&gt; 停滞时期。 如果一个密码已过期这些天, 那么此帐号将不可用。</li><li><strong>-l</strong> =&gt; 例出当前的设置。 由非特权用户来确定他们的密码或帐号何时过期。</li></ul><p>如果要修改密码过期时间为 <code>“从不”</code> , <code>For Examlpe:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>chage <span class="token parameter variable">-M</span> <span class="token number">99999</span> <span class="token punctuation">[</span>userName<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="空密码检查" tabindex="-1"><a class="header-anchor" href="#空密码检查" aria-hidden="true">#</a> 空密码检查</h2><p><strong>/etc/shadow</strong> 文件中的记录行与 <strong>/etc/passwd</strong> 中的一一对应, 是记录系统中用户的密码的, 此文件只有 <code>root</code> 用户可以对其进行修改</p><p>使用 <code>awk</code> 命令可以检查是否存在空密码, <code>For Examlpe:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token parameter variable">-F</span> <span class="token string">&#39;:&#39;</span> <span class="token string">&#39;($2==&quot;&quot;){print $1}&#39;</span> /etc/shadow
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="没密码检查" tabindex="-1"><a class="header-anchor" href="#没密码检查" aria-hidden="true">#</a> 没密码检查</h2><p>空密码跟没有密码是俩回事, 体现于 <strong>/etc/shadow</strong> 中的密码那一列, 空密码是显示空, 没有密码是显示 <code>！ ！</code> 使用 <code>awk</code> 命令可以检查是否存在空密码, <code>For Examlpe:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token parameter variable">-F</span> <span class="token string">&#39;:&#39;</span> <span class="token string">&#39;($2==&quot;！ ！ &quot;){print $1}&#39;</span> /etc/shadow
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="awk-命令" tabindex="-1"><a class="header-anchor" href="#awk-命令" aria-hidden="true">#</a> awk 命令</h2><p>查询 UID 为 0 的用户, <code>For Examlpe:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">awk</span> <span class="token parameter variable">-F</span> <span class="token string">&#39;:&#39;</span> <span class="token string">&#39;($3==0){print $1}&#39;</span> /etc/passwd
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>UID 为 0 的任何用户都拥有系统的最高特权, 保证只有 root 用户的 UID 为 0</p></div><p><code>awk</code> 选项解释</p><ul><li><strong><code>-F fs</code></strong> =&gt; fs 指定输入分隔符, fs 可以是字符串或正则表达式, 如 <code>-F:</code></li><li><strong><code>-v var=value</code></strong> =&gt; 赋值一个用户定义变量, 将外部变量传递给 <code>awk</code></li><li><strong><code>-f scripfile</code></strong> =&gt; 从脚本文件中读取 awk 命令</li><li><strong><code>-m[fr] val</code></strong> =&gt; 对 val 值设置内在限制, <code>-mf</code> 选项限制分配给 val 的最大块数目; <code>-mr</code> 选项限制记录的最大数目。 这两个功能是 Bell 实验室版 <code>awk</code> 的扩展功能, 在标准 <code>awk</code> 中不适用。</li></ul><h2 id="密码复杂度" tabindex="-1"><a class="header-anchor" href="#密码复杂度" aria-hidden="true">#</a> 密码复杂度</h2><p>redhat 公司专门开发了 <code>cracklib</code> 这个安装包来判断密码的复杂度。</p><p>检查是否安装了 <code>cracklib</code> 模块</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">rpm</span> <span class="token parameter variable">-qa</span> <span class="token operator">|</span> <span class="token function">grep</span> cracklib
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+r+`" alt="RedHat 系统安全加固" tabindex="0" loading="lazy"><figcaption>RedHat 系统安全加固</figcaption></figure><p>在 <code>/etc/pam.d/system-auth</code> 中修改</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>password requisite pam_cracklib.so try_first_pass retry = 3 difok = 3 minlen = 8 dcredit = -1 ucredit = -1 lcredit = -1 ocredit = -1
password sufficient pam_unix.so md5 shadow nullok try_first_pass use_authtok remember = 5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+l+`" alt="RedHat 系统安全加固" tabindex="0" loading="lazy"><figcaption>RedHat 系统安全加固</figcaption></figure><h3 id="参数说明" tabindex="-1"><a class="header-anchor" href="#参数说明" aria-hidden="true">#</a> 参数说明</h3><ul><li><strong><code>retry=N</code></strong> =&gt; 改变输入密码的次数, 默认值是 1, 一般设置为 3。 就是说, 如果用户输入的密码强度不够可以重复输入的次数。</li><li><strong><code>minlen=N</code></strong> =&gt; 密码最小长度（除了 <code>credit</code> 信用度的字符长度以外）</li><li><strong><code>dcredit=N</code></strong> =&gt; 密码中至少 <code>(N&lt;0)</code> 或至多 <code>(N&gt;=0)</code> 有几个数字</li><li><strong><code>ucredit=N</code></strong> =&gt; 密码中至少 <code>(N&lt;0)</code> 或至多 <code>(N&gt;=0)</code> 有几个大写字母</li><li><strong><code>lcredit=N</code></strong> =&gt; 密码中至少 <code>(N&lt;0)</code> 或至多 <code>(N&gt;=0)</code> 有几个小写字母</li><li><strong><code>ocredit=N</code></strong> =&gt; 密码中至少 <code>(N&lt;0)</code> 或至多 <code>(N&gt;=0)</code> 有几个特殊字符</li><li><strong><code>difok=M</code></strong> =&gt; 新密码与前一个旧密码之间至少有 M 个字符不相同</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p><code>dcredit</code> 、 <code>ucredit</code> 、 <code>lcredit</code> 、 <code>ocredit</code> 为信用度字符, 如果 <code>N&lt;0</code> , 表示至少, 则新密码长度最小长度就等于 minlen.。 而当 <code>N&gt;0</code> 时, 表示至多, 比如 <code>ocredit=1</code> , 至多有一个特殊字符, 这样的话, 即使没有特殊字符也会允许设置新密码。 还有, 此时新密码长度会大于 minlen。 算法交复杂, 这里不赘述。 因此, 通常情况下推荐使用 <code>N&lt;0</code> 来做密码复杂度限制。 另外, 此密码规则对 root 用户无效, 只针对普通用户修改自身密码</p></div><h2 id="登录验证规则" tabindex="-1"><a class="header-anchor" href="#登录验证规则" aria-hidden="true">#</a> 登录验证规则</h2><h3 id="记录普通用户登录失败次数并锁定用户" tabindex="-1"><a class="header-anchor" href="#记录普通用户登录失败次数并锁定用户" aria-hidden="true">#</a> 记录普通用户登录失败次数并锁定用户</h3><p>在 ** <code>/etc/pam.d/system-auth**</code>中<code>&quot;#%PAM-1.0&quot;</code>下面一行加入,<code>For Example:</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>auth required pam_tally2.so deny = 3 unlock_time = 300
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>一定要加在 <code>#%PAM-1.0</code> 下面一行</p></div><p>参数说明</p><ul><li><strong><code>deny[=n]</code></strong> =&gt; 用户连续错误登陆的最大次数, 超过则锁定</li><li><strong><code>unlock_time</code></strong> =&gt; 设定普通用户锁定后, 多少时间后解锁, 单位是秒</li><li><strong><code>even_deny_root</code></strong> =&gt; 也限制 root 用户</li><li><strong><code>root_unlock_time[=n]</code></strong> =&gt; 设定 root 用户锁定后, 多少时间后解锁, 单位是秒</li><li><strong><code>quiet</code></strong> =&gt; 不对已锁定的用户发出提示信息</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>以上参数根据实际需要取舍, 如果使用了 even_deny_root 参数限制 root 用户登录错误次数, 而没有配置 root_unlock_time 的话, 一旦 root 用户被锁, 解锁将很麻烦。</p></div><h3 id="查看用户登录失败次数" tabindex="-1"><a class="header-anchor" href="#查看用户登录失败次数" aria-hidden="true">#</a> 查看用户登录失败次数</h3><p>当登录错误次数达到最大限制后, 用户再次登录时, 会提示</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Your account is locked.Maximum amount of failed attempts was reached.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="RedHat 系统安全加固" tabindex="0" loading="lazy"><figcaption>RedHat 系统安全加固</figcaption></figure><p>通过以下命令可以查看用户登录失败次数, <code>Command Format:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pam_tally2 <span class="token parameter variable">-u</span> <span class="token punctuation">[</span>userName<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>For Example:</code> <br></p><figure><img src="`+h+'" alt="RedHat 系统安全加固" tabindex="0" loading="lazy"><figcaption>RedHat 系统安全加固</figcaption></figure><h3 id="解锁已经锁定的用户" tabindex="-1"><a class="header-anchor" href="#解锁已经锁定的用户" aria-hidden="true">#</a> 解锁已经锁定的用户</h3><ul><li>自动解锁</li></ul><p>-- 如果配置了 <code>unlock_time</code> 或 <code>root_unlock_time</code> (针对 <code>root</code> 用户)参数, 则等待超过这个时长后, 帐户会自动解锁</p><ul><li>手动解锁:</li></ul><p>-- 只能以 <code>root</code> 用户通过命令 <code>pam_tally2 -u [userName] -r</code> 可以手动解锁因登录错误次数达到最大限制后自动锁定的用户, 同时登录错误次数会被重置为 0</p><h2 id="登录超时" tabindex="-1"><a class="header-anchor" href="#登录超时" aria-hidden="true">#</a> 登录超时</h2><p>对于 bash 用户, 修改 <code>/etc/profile</code> 或 <code>/etc/bashrc</code> , 所有使用 bash 的用户都会继承, <code>For Example:</code> <br></p><figure><img src="'+a+'" alt="RedHat 系统安全加固" tabindex="0" loading="lazy"><figcaption>RedHat 系统安全加固</figcaption></figure><p>对于 csh 用户, 修改 <code>/etc/csh.cshrc</code> , 所有使用 csh 的用户都会继承, <code>For Example:</code> <br></p><figure><img src="'+n+'" alt="RedHat 系统安全加固" tabindex="0" loading="lazy"><figcaption>RedHat 系统安全加固</figcaption></figure><p>对于 bash 用户, 修改 <code>/etc/profile</code> 或 <code>/etc/bashrc</code> , 所有使用 bash 的用户都会继承, <code>For Example:</code> <br></p><figure><img src="'+a+'" alt="RedHat 系统安全加固" tabindex="0" loading="lazy"><figcaption>RedHat 系统安全加固</figcaption></figure><p>对于 csh 用户, 修改 <code>/etc/csh.cshrc</code> , 所有使用 csh 的用户都会继承, <code>For Example:</code> <br></p><figure><img src="'+n+`" alt="RedHat 系统安全加固" tabindex="0" loading="lazy"><figcaption>RedHat 系统安全加固</figcaption></figure><h2 id="ssh" tabindex="-1"><a class="header-anchor" href="#ssh" aria-hidden="true">#</a> SSH</h2><h3 id="禁止-root-用户远程-ssh-登录" tabindex="-1"><a class="header-anchor" href="#禁止-root-用户远程-ssh-登录" aria-hidden="true">#</a> 禁止 root 用户远程 ssh 登录</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>由于之前的笔记已经记录过了, 这里就不再重复了</p></div><h3 id="ssh-的黑白名单-指定用户或组" tabindex="-1"><a class="header-anchor" href="#ssh-的黑白名单-指定用户或组" aria-hidden="true">#</a> ssh 的黑白名单（指定用户或组）</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>由于之前的笔记已经记录过了, 这里就不再重复了</p></div><h3 id="ssh-的黑白名单-指定-ip" tabindex="-1"><a class="header-anchor" href="#ssh-的黑白名单-指定-ip" aria-hidden="true">#</a> ssh 的黑白名单（指定 IP）</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>由于之前的笔记已经记录过了, 这里就不再重复了</p></div><h2 id="telnet" tabindex="-1"><a class="header-anchor" href="#telnet" aria-hidden="true">#</a> Telnet</h2><h3 id="禁止-root-用户远程-telnet-登录" tabindex="-1"><a class="header-anchor" href="#禁止-root-用户远程-telnet-登录" aria-hidden="true">#</a> 禁止 root 用户远程 telnet 登录</h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>系统安装 <code>telnet-server</code> 服务后, 默认就是禁止 root 用户直接远程 telnet 登录的。 确认只要存在 <code>/etc/securetty</code> 文件, 就可以限制 root 直接远程 telnet 登录。</p></div><h3 id="telnet-的黑白名单-指定用户或组" tabindex="-1"><a class="header-anchor" href="#telnet-的黑白名单-指定用户或组" aria-hidden="true">#</a> telnet 的黑白名单（指定用户或组）</h3><p>系统不支持限制普通用户 telnet 远程登录</p><h3 id="telnet-的黑白名单-指定-ip" tabindex="-1"><a class="header-anchor" href="#telnet-的黑白名单-指定-ip" aria-hidden="true">#</a> telnet 的黑白名单（指定 IP）</h3><p>与 <code>SSH</code> 中的相差无几, 同样是在 <code>/etc/hosts.allow</code> 里添加白名单, 在 <code>/etc/hosts.deny</code> 里添加黑名单, <code>For Example:</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>in .telnetd: 192.168 .1 .10 192.168 .1 .11# / etc / hosts.allow in .telnetd: ALL# / etc / hosts.deny
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="禁止普通用户登录-shell" tabindex="-1"><a class="header-anchor" href="#禁止普通用户登录-shell" aria-hidden="true">#</a> 禁止普通用户登录 shell</h2><p>使用 <code>usermod</code> 命令修改用户的登录 <code>shell</code> 就好, <code>Command Format:</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">usermod</span> <span class="token parameter variable">-s</span> /sbin/nologin <span class="token punctuation">[</span>userName<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="避免普通用户-su-到-root-用户" tabindex="-1"><a class="header-anchor" href="#避免普通用户-su-到-root-用户" aria-hidden="true">#</a> 避免普通用户 su 到 root 用户</h2><p>在 ** <code>/etc/pam.d/su**</code>中<code>&quot;#%PAM-1.0&quot;</code> 下面一行加入</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>auth sufficient pam_rootok.so debug
auth required pam_wheel.so group = wheel
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+u+'" alt="RedHat 系统安全加固" tabindex="0" loading="lazy"><figcaption>RedHat 系统安全加固</figcaption></figure><p>当然只去除红框中的 <code>#</code> 也是 ok 的<br></p><figure><img src="'+g+`" alt="RedHat 系统安全加固" tabindex="0" loading="lazy"><figcaption>RedHat 系统安全加固</figcaption></figure><p>这样以来只有 wheel 组的用户可以 su 作为 root</p><h2 id="指定可以-su-到-root-的用户" tabindex="-1"><a class="header-anchor" href="#指定可以-su-到-root-的用户" aria-hidden="true">#</a> 指定可以 su 到 root 的用户</h2><p>指定某个用户可以 su 到 root 用户, 需要将该用户加入到 wheel 组中</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">usermod</span> <span class="token parameter variable">-G</span> wheel <span class="token punctuation">[</span>username<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>如果禁止 root 用户直接登录, 也不存在 wheel 组的用户, 就无法进入 root 用户了</p></div><figure><img src="`+m+'" alt="RedHat 系统安全加固" tabindex="0" loading="lazy"><figcaption>RedHat 系统安全加固</figcaption></figure>',102);function x(k,_){return t(),i("div",null,[b,d(" more "),f])}const N=s(v,[["render",x],["__file","account-security.html.vue"]]);export{N as default};
