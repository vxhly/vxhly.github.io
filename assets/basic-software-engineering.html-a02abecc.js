import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as d,c as a,e as i}from"./app-4badef91.js";const r={},c=i('<div class="hint-container tip"><p class="hint-container-title">前言</p><p>整理 <code>软件工程、软件需求工程</code> 章节的重点</p></div><h2 id="pdca" tabindex="-1"><a class="header-anchor" href="#pdca" aria-hidden="true">#</a> PDCA</h2><blockquote><p>软件工程由方法、工具和过程三个部分组成。软件工程过程是指为获得软件产品，在软件工具的支持下由软件工程师完成的一系列软件工程活动</p></blockquote><p>（1）<code>P(Plan)</code>——软件规格说明。规定软件的功能及其运行时的限制。<br> （2）<code>D(Do)</code>——软件开发。开发出满足规格说明的软件。<br> （3）<code>C(Check)</code>——软件确认。确认开发的软件能够满足用户的需求。<br> （4）<code>A(Action)</code>——软件演进。</p><h2 id="软件生命周期" tabindex="-1"><a class="header-anchor" href="#软件生命周期" aria-hidden="true">#</a> 软件生命周期</h2><ul><li>根据国家标准 GB/T 8566—2007 ，软件生命周期可以划分为<code>可行性研究、需求分析、概要设计、详细设计、实现、组装测试、确认测试、使用、维护、退役</code> 10 个阶段，</li><li>DO-178C 的软件生命周期过程包括<code>指导、目标、活动、证据</code>。</li><li>软件过程是制作软件产品的一组活动及其结果。这些活动主要由软件人员来完成，软件活动主要包括<code>软件描述、软件开发、软件有效性验证和软件演化</code>。 其中，软件描述定义了软件功能以及使用的限制。</li></ul><h2 id="软件开发方法" tabindex="-1"><a class="header-anchor" href="#软件开发方法" aria-hidden="true">#</a> 软件开发方法</h2><ul><li><code>软件开发方法是指软件开发过程所遵循的办法和步骤</code>，从不同的角度可以对软件开发方法进行不同的分类。</li><li>从开发风格上看，可分为<code>自顶向下</code>的开发方法与<code>自底向上</code>的开发方法。</li><li>从性质上看，可分为<code>形式化方法</code>与<code>非形式化方法</code>。</li><li>从适应范围来看，可分为<code>整体性方法</code>与<code>局部性方法</code>。</li></ul><h3 id="结构化方法分析模型" tabindex="-1"><a class="header-anchor" href="#结构化方法分析模型" aria-hidden="true">#</a> 结构化方法分析模型</h3><ul><li>数据模型（代表为 E-R 图）</li><li>功能模型（代表为 DFD 图）</li><li>行为模型（代表为状态转换图）</li></ul><h3 id="逆向工程" tabindex="-1"><a class="header-anchor" href="#逆向工程" aria-hidden="true">#</a> 逆向工程</h3><p>(1) <code>重构（restructuring）</code>。重构是指在同一抽象级别上转换系统描述形式。<br> (2) <code>设计恢复（design recovery）</code>。设计恢复是指借助工具从已有程序中抽象出有关数据设计、总体结构设计和过程设计等方面的信息。<br> (3) <code>再工程（re-engineering）</code>。再工程是指在逆向工程所获得信息的基础上，修改或重构已有的系统，产生系统的一个新版本。<br> (4) <code>正向工程（Forward Engineering）</code>。正向工程是指不仅从现有系统中恢复设计信息，而且使用该信息去改变或重构现有系统，以改善其整体质量。</p><h2 id="软件开发-过程-生命周期模型" tabindex="-1"><a class="header-anchor" href="#软件开发-过程-生命周期模型" aria-hidden="true">#</a> 软件开发/过程/生命周期模型</h2><ul><li>软件开发模型给出了软件开发活动各阶段之间的关系，它是软件开发过程的概括，是软件工程的重要内容。</li><li>软件要经历从<code>软件定义、软件开发、软件运行、软件维护（软件生命周期方法学），直至被淘汰</code>这样的全过程</li></ul><h3 id="瀑布模型" tabindex="-1"><a class="header-anchor" href="#瀑布模型" aria-hidden="true">#</a> 瀑布模型</h3><h4 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h4><ul><li>严格区分阶段，每个阶段因果关系紧密相连</li><li>只适合需求明确的项目</li></ul><h4 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h4><ul><li>软件需求完整性、正确性难确定</li><li>严格串行化，很长时间才能看到结果</li><li>瀑布模型要求每个阶段一次性完全解决该阶段工作，这不现实。</li></ul><h4 id="阶段" tabindex="-1"><a class="header-anchor" href="#阶段" aria-hidden="true">#</a> 阶段</h4><ul><li>需求分析</li><li>软件设计</li><li>程序设计</li><li>编码实现</li><li>单元测试</li><li>集成测试</li><li>系统测试</li><li>运行维护</li></ul><h3 id="演化模型-原型模型" tabindex="-1"><a class="header-anchor" href="#演化模型-原型模型" aria-hidden="true">#</a> 演化模型/原型模型</h3><h4 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h4><ul><li>抛弃型原型</li><li>演化型原型</li></ul><h4 id="阶段-1" tabindex="-1"><a class="header-anchor" href="#阶段-1" aria-hidden="true">#</a> 阶段</h4><ul><li>原型开发</li><li>目标软件开发</li></ul><h3 id="螺旋模型" tabindex="-1"><a class="header-anchor" href="#螺旋模型" aria-hidden="true">#</a> 螺旋模型</h3><h4 id="特点-1" tabindex="-1"><a class="header-anchor" href="#特点-1" aria-hidden="true">#</a> 特点</h4><ul><li>以快速原型为基础＋瀑布模型; 考虑了风险问题</li><li>风险分析: 评价方案、识别风险、消除风险</li><li>目标设定: 决定目标、方案有限</li></ul><h3 id="喷泉模型" tabindex="-1"><a class="header-anchor" href="#喷泉模型" aria-hidden="true">#</a> 喷泉模型</h3><h4 id="特点-2" tabindex="-1"><a class="header-anchor" href="#特点-2" aria-hidden="true">#</a> 特点</h4><ul><li>喷泉模型是一种以用户需求为动力，以对象为驱动的模型，主要用于描述面向对象的软件开发过程</li><li>在喷泉模型中，各活动之间无明显边界</li></ul><h3 id="变换模型" tabindex="-1"><a class="header-anchor" href="#变换模型" aria-hidden="true">#</a> 变换模型</h3><h4 id="特点-优点" tabindex="-1"><a class="header-anchor" href="#特点-优点" aria-hidden="true">#</a> 特点/优点</h4><ul><li>变换模型是基于形式化规格说明语言和程序变换的软件开发模型，它对形式化的软件规格说明进行一系列自动或半自动的程序变换，最后映射为计算机能够接受的软件系统。</li><li>解决了代码结构性多次修改而变坏的问题，减少了许多中间步骤（例如，设计、编码和测试等）</li></ul><h3 id="v-模型" tabindex="-1"><a class="header-anchor" href="#v-模型" aria-hidden="true">#</a> V 模型</h3><h4 id="特点-优点-1" tabindex="-1"><a class="header-anchor" href="#特点-优点-1" aria-hidden="true">#</a> 特点/优点</h4><ul><li>V 模型强调软件开发的协作和速度，将软件实现和验证有机地结合起来，在保证较高的软件质量情况下缩短开发周期。</li><li>V 模型适合企业级的软件开发。</li></ul><h4 id="阶段-2" tabindex="-1"><a class="header-anchor" href="#阶段-2" aria-hidden="true">#</a> 阶段</h4><ul><li>需求分析 =&gt; 验收测试</li><li>系统设计 =&gt; 系统测试</li><li>详细设计 =&gt; 集成测试</li><li>编码 =&gt; 单元测试</li></ul><h3 id="增量模型" tabindex="-1"><a class="header-anchor" href="#增量模型" aria-hidden="true">#</a> 增量模型</h3><h4 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h4><ul><li>增量模型的优点是降低了实现需求变更的成本，相对于瀑布模型，重新分析和修改文档的工作流程更少</li><li>在开发过程中能够更容易得到客户的反馈意见，客户可以对已完成的开发工作进行评价并判断项目进度，相比较从软件设计文档中评价项目和判断项目进度更为便捷</li></ul><h4 id="缺点-1" tabindex="-1"><a class="header-anchor" href="#缺点-1" aria-hidden="true">#</a> 缺点</h4><ul><li>增量模型的缺点是过程不可见，需要常规的交付物来掌握进度，如果系统是快速开发的，则产生每个版本的文档不划算</li></ul><h3 id="快速应用开发" tabindex="-1"><a class="header-anchor" href="#快速应用开发" aria-hidden="true">#</a> 快速应用开发</h3><blockquote><p>快速应用开发（Rapid Application Development，RAD ） 是一种比传统生命周期法快得多的开发方法，它强调极短的开发周期。</p></blockquote><h4 id="rad-的开发阶段" tabindex="-1"><a class="header-anchor" href="#rad-的开发阶段" aria-hidden="true">#</a> RAD 的开发阶段</h4><ul><li>RAD 的流程从<code>业务建模开始，随后是数据建模、过程建模、应用生成、测试与交付</code>。</li></ul><h4 id="rad-的特点" tabindex="-1"><a class="header-anchor" href="#rad-的特点" aria-hidden="true">#</a> RAD 的特点</h4><p>（1）并非所有应用都适合 RAD 。RAD 对模块化要求比较高，如果有哪一项功能不能被模块化，那么 RAD 所需要的构件就会有问题<br> （2）开发者和客户必须在很短的时间完成一系列的需求分析<br> （3）RAD 只能用于管理信息系统的开发，不适合技术风险很高的情况</p><h3 id="统一过程" tabindex="-1"><a class="header-anchor" href="#统一过程" aria-hidden="true">#</a> 统一过程</h3><blockquote><p>统一过程（Unified Process， UP）是一个通用过程框架，可以用于种类广泛的软件系统、不同的应用领域、不同的组织类型、不同的性能水平和不同的项目规模。<code>UP是基于构件的</code>，在为软件系统建模时，UP 使用的是 UML。与其他软件过程相比，UP 具有三个显著的特点，即<code>用例驱动、以架构为中心、迭代和增量</code>。</p></blockquote><h4 id="生命周期" tabindex="-1"><a class="header-anchor" href="#生命周期" aria-hidden="true">#</a> 生命周期</h4><p>（1）<code>业务建模 (Business Modeling)</code>： 理解待开发系统所在的机构及其商业运作，确保所有参与人员对待开发系统所在的机构有共同的认识，评估待开发系统对所在机构的影响。<br> （2）<code>需求 (Requirements)</code>：定义系统功能及用户界面，使客户知道系统的功能，使开发人员理解系统的需求，为项目预算及计划提供基础。<br> （3）<code>分析与设计 （Analysis &amp; Dcsign）</code>：把需求分析的结果转化为分析与设计模型。<br> （4）<code>实现 (Implementation)</code>： 把设计模型转换为实现结果，对开发的代码做单元测试，将不同实现人员开发的模块集成为可执行系统。<br> （5）<code>测试（Test）</code>：检查各子系统之间的交互、集成，验证所有需求是否均被正确实现，对发现的软件质量上的缺陷进行归档，对软件质量提出改进建议。<br> （6）<code>部署 (Deployment)</code>: 打包、分发、安装软件，升级旧系统；培训用户及销售人员，并提供技术支持。<br> （7）<code>配置与变更管理 (Configuration &amp; Change Management)</code>: 跟踪并维护系统开发过程中产生的所有制品的完整性和一致性。<br> （8）<code>项目管理 (Project Management)</code>: 为软件开发项目提供计划、人员分配、执行、监控等方面的指导，为风险管理提供框架。<br> （9）<code>环境 (Environment)</code>: 为软件开发机构提供软件开发环境，即提供过程管理和工具的支持。</p><h4 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念" aria-hidden="true">#</a> 核心概念</h4><p>（1）<code>角色 (Role)</code>：Who 的问题。角色描述某个人或一个小组的行为与职责。 RUP 预先定义了很多角色，如体系结构师 (Architect)、设计人员 (Designer)、实现人员（Implementer）、测试员 （tester）和配置管理人员 （Configuration Manager）等，并对每一个角色的工作和职责都做了详尽的说明。<br> （2）<code>活动 (Activity)</code>：How 的问题。活动是一个有明确目的的独立工作单元。制品（Artifact）：What 的问题。视频是活动生成、创建或修改的一段信息。也有些书把 Artifact 翻译为产品、工件等，和制品的意思差不多。<br> （3）<code>工作流 (Workflow)</code>：When 的问题。工作流描述了一个有意义的连续的活动序列，每个工作流产生一些有价值的产品，并显示了角色之间的关系。</p><h4 id="初时阶段" tabindex="-1"><a class="header-anchor" href="#初时阶段" aria-hidden="true">#</a> 初时阶段</h4><blockquote><p>初始阶段的任务是为系统建立业务模型并确定项目的边界</p></blockquote><p>(1) 明确项目规模。<br> (2) 评估项目风险。<br> (3) 制订项目计划。<br> (4) 阶段技术评审。</p><h4 id="细化阶段" tabindex="-1"><a class="header-anchor" href="#细化阶段" aria-hidden="true">#</a> 细化阶段</h4><blockquote><p>细化阶段的任务是分析问题领域，建立完善的架构，淘汰项目中最高风险的元素</p></blockquote><p>(1) 确定架构。<br> (2) 制订构建阶段计划。<br> (3) 建立支持环境。<br> (5) 阶段技术评审。</p><h4 id="构建阶段" tabindex="-1"><a class="header-anchor" href="#构建阶段" aria-hidden="true">#</a> 构建阶段</h4><blockquote><p>在构建阶段，要开发所有剩余的构件和应用程序功能，把这些构件集成为产品，并进行详细测试</p></blockquote><h4 id="移交阶段" tabindex="-1"><a class="header-anchor" href="#移交阶段" aria-hidden="true">#</a> 移交阶段</h4><blockquote><p>当基线已经足够完善，可以安装到最终用户实际环境中时，则进入交付阶段。交付阶段的重点是确保软件对最终用户是可用的。</p></blockquote><h3 id="敏捷方法" tabindex="-1"><a class="header-anchor" href="#敏捷方法" aria-hidden="true">#</a> 敏捷方法</h3><h4 id="敏捷宣言" tabindex="-1"><a class="header-anchor" href="#敏捷宣言" aria-hidden="true">#</a> 敏捷宣言</h4><ul><li>个体和交互胜过过程和工具</li><li>可工作的软件胜过大量的文档</li><li>客户合作胜过合同谈判</li><li>响应变化胜过遵循计划</li></ul><h4 id="敏捷开发特点" tabindex="-1"><a class="header-anchor" href="#敏捷开发特点" aria-hidden="true">#</a> 敏捷开发特点</h4><p>（1）迭代式开发<br> （2）增量交付<br> （3）及时反馈<br> （4）持续集成<br> （5）自我管理</p><h4 id="核心思想" tabindex="-1"><a class="header-anchor" href="#核心思想" aria-hidden="true">#</a> 核心思想</h4><p>（1）敏捷方法是适应型，而非可预测型。<br> （2）敏捷方法是以人为本，而非以过程为本。<br> （3）迭代增量式的开发过程。</p><h4 id="主要敏捷方法" tabindex="-1"><a class="header-anchor" href="#主要敏捷方法" aria-hidden="true">#</a> 主要敏捷方法</h4><blockquote><p>主要的敏捷方法有极限编程（XP）、自适应软件开发(ASD)、水晶方法（Crystal）、特性驱动开发（FDD）、动态系统开发方法（DSDM）、测试驱动开发（TDD）、敏捷数据库技术（AD）和精益软件开发等</p></blockquote><h5 id="极限编程-extreme-programming-xp" tabindex="-1"><a class="header-anchor" href="#极限编程-extreme-programming-xp" aria-hidden="true">#</a> 极限编程（Extreme Programming，XP）</h5><ul><li>它的基础和价值观是<code>交流、朴素、反馈和勇气</code></li><li>可以从 4 个方面入手进行改善: 加强交流；从简单做起；寻求反馈；勇于实事求是</li></ul><h5 id="水晶系列方法" tabindex="-1"><a class="header-anchor" href="#水晶系列方法" aria-hidden="true">#</a> 水晶系列方法</h5><ul><li>都有<code>以人为中心</code>的理念</li><li>其目的是发展一种提倡“机动性的”方法，包含具有共性的核心元素，每个都含有独特的角色、过程模式、工作产品和实践。</li></ul><h5 id="scrum" tabindex="-1"><a class="header-anchor" href="#scrum" aria-hidden="true">#</a> Scrum</h5><ul><li><p>该方法侧重于项目管理。</p></li><li><p>Scrum 是迭代式增量软件开发过程，通常用于敏捷软件开发。</p></li><li><p>3 个核心角色</p><ul><li>产品负责人</li><li>Scrum Master</li><li>开发团队</li></ul></li><li><p>3 个工件</p><ul><li>产品代办事项</li><li>Sprint 迭代代办清单</li><li>产品增量</li></ul></li><li><p>5 个关键事件</p><ul><li>Sprint 计划会议</li><li>每日站会</li><li>Sprint 评审会议</li><li>Sprint 回顾会议</li><li>产品回顾会议</li></ul></li><li><p>5 个价值观</p><ul><li>承诺</li><li>勇气</li><li>专注</li><li>尊重</li><li>开放</li></ul></li></ul><h5 id="特征驱动开发方法-fdd" tabindex="-1"><a class="header-anchor" href="#特征驱动开发方法-fdd" aria-hidden="true">#</a> 特征驱动开发方法（FDD）</h5><ul><li>FDD 定义了 6 种关键的项目角色：<code>项目经理、首席架构设计师、开发经理、主程序员、程序员和领域专家</code>。</li><li>FDD 有 5 个核心过程：<code>开发整体对象模型、构造特征列表、计划特征开发、特征设计和特征构建</code>。</li></ul><h3 id="w-模型" tabindex="-1"><a class="header-anchor" href="#w-模型" aria-hidden="true">#</a> W 模型</h3><h4 id="特点-3" tabindex="-1"><a class="header-anchor" href="#特点-3" aria-hidden="true">#</a> 特点</h4><ul><li>W 模型中测试与开发是同步进行的</li><li>W 模型增加了软件各开发阶段中应同步进行的验证和确认活动</li><li>W 模型强调：测试伴随着整个软件开发周期，而且测试的对象不仅仅是程序，需求、设计等同样要测试，也就是说，测试与开发是同步进行的</li><li>W 模型有利于尽早地全面的发现问题</li></ul><h2 id="软件能力成熟度模型-capability-maturity-model-cmm" tabindex="-1"><a class="header-anchor" href="#软件能力成熟度模型-capability-maturity-model-cmm" aria-hidden="true">#</a> 软件能力成熟度模型（Capability Maturity Model ， CMM）</h2><p>5 个等级：</p><p>（1）<code>初始级</code>。初始级是未加定义的随意过程，软件过程的特点是无秩序的，有时甚至是混乱的。<br> （2）<code>可重复级</code>。可重复级是规则化和纪律化的过程，软件过程已建立了基本的项目管理过程，可用于对成本、进度和功能特性进行跟踪。对类似的应用项目，有章可循并能重复以往所取得的成功。<br> （3）<code>已定义级</code>。已定义级是标准的和一致的过程，用于管理的和工程的软件过程均已文档化、标准化，并形成了整个软件组织的标准软件过程。全部项目均采用与实际情况相吻合的、适当修改后的标准软件过程来进行操作。<br> （4）<code>已管理级</code>。已管理级是可预测的过程，软件过程和产品质量有详细的度量标准。软件过程和产品质量得到了定量的认识和控制。<br> （5）<code>优化级</code>。优化级是持续改进的过程，通过对来自过程、新概念和新技术等方面的各种有用信息的定量分析，能够不断地、持续性地对过程进行改进。</p><p>8 个核心能力域：</p><p>数据战略、数据治理、数据架构、数据应用、数据安全、数据质量、数据标准和数据生存周期</p><h2 id="能力成熟度模型集成-capability-maturity-model-integration-cmmi" tabindex="-1"><a class="header-anchor" href="#能力成熟度模型集成-capability-maturity-model-integration-cmmi" aria-hidden="true">#</a> 能力成熟度模型集成（Capability Maturity Model Integration，CMMI）</h2><h3 id="体系文件的层次结构" tabindex="-1"><a class="header-anchor" href="#体系文件的层次结构" aria-hidden="true">#</a> 体系文件的层次结构</h3><p>(1) 方针文件<br> (2) 过程文件<br> (3) 指南/规范文件<br> (4) 模板文件</p><h3 id="阶段式模型" tabindex="-1"><a class="header-anchor" href="#阶段式模型" aria-hidden="true">#</a> 阶段式模型</h3><table><thead><tr><th>成熟度等级</th><th>过程域</th></tr></thead><tbody><tr><td>可重复级</td><td>需求管理、项目计划、配置管理、项目监督与控制、供应商合同管理、度量和分析、过程和产品质量保证</td></tr><tr><td>已定义级</td><td>需求开发、技术解决方案、产品集成、验证、确认、组织级过程焦点、组织级过程定义、组织级培训、集成项目管理、风险管理、集成化的团队、决策分析和解决方案、组织级集成环境</td></tr><tr><td>已管理级</td><td>组织级过程性能、定量项目管理</td></tr><tr><td>优化级</td><td>组织级改革与实施、因果分析和解决方案</td></tr></tbody></table><h3 id="连续式模型" tabindex="-1"><a class="header-anchor" href="#连续式模型" aria-hidden="true">#</a> 连续式模型</h3><table><thead><tr><th>连续式分组</th><th>过程域</th></tr></thead><tbody><tr><td>过程管理</td><td>组织级过程焦点、组织级过程定义、组织级培训、组织级过程性能、组织级改革与实施</td></tr><tr><td>项目管理</td><td>项目计划、项目监督与控制、供应商合同管理、集成项目管理、风险管理、集成化的团队、定量项目管理</td></tr><tr><td>工程</td><td>需求管理、需求开发、技术解决方案、产品集成、验证、确认</td></tr><tr><td>支持</td><td>配置管理、度量和分析、过程和产品质量保证、决策分析和解决方案、组织级集成环境、因果分析和解决方案</td></tr></tbody></table><h2 id="基于构件的软件开发方法" tabindex="-1"><a class="header-anchor" href="#基于构件的软件开发方法" aria-hidden="true">#</a> 基于构件的软件开发方法</h2><h3 id="构件管理" tabindex="-1"><a class="header-anchor" href="#构件管理" aria-hidden="true">#</a> 构件管理</h3><p>构件管理的内容包括<code>构件描述，构件分类，构件库组织，人员及权限管理，用户意见反馈</code>等。</p><h3 id="构件分类" tabindex="-1"><a class="header-anchor" href="#构件分类" aria-hidden="true">#</a> 构件分类</h3><p>（1）<code>独立而成熟的构件</code>。经过多次实际环境检验,接口完全隐藏,用户只需使用规定命令,如数据库系统、操作系统等。<br> （2）<code>有限制的构件</code>。提供接口说明使用条件和前提,在装配时可能产生资源冲突、覆盖等影响,需测试,如面向对象语言的基础类库。<br> （3）<code>适应性构件</code>。通过包装或接口技术处理了不兼容、资源冲突等问题,可直接在各环境使用,如 ActiveX。<br> （4）<code>装配的构件</code>。已经装配到操作系统、数据库或信息系统不同层次,可通过胶水代码连接使用,多为软件商提供的产品。<br> （5）<code>可修改的构件</code>。可进行版本替换,修改错误、增加新功能通过重新包装或接口实现,在应用系统开发中使用较多。</p><h3 id="构件的特性" tabindex="-1"><a class="header-anchor" href="#构件的特性" aria-hidden="true">#</a> 构件的特性</h3><p>（1）<code>可组装性</code>。构件的所有外部交互必须通过公开定义的接口进行，同时还必须对自身信息提供外部访问。<br> （2）<code>可部署性</code>。构件必须是自包含的，能够作为独立实体在构件平台上运行，以二进制形式部署而无需编译。<br> （3）<code>文档化</code>。构件必须完全文档化，用户可以根据文档判断构件是否满足需求。<br> （4）<code>独立性</code>。构件应该是独立的，可以在无需其他特殊构件的情况下进行组装和部署，只有在确实需要其他构件提供服务时才应声明依赖。<br> （5）<code>标准化</code>。在 CBSE 过程中使用的构件必须符合某种标准化的构件模型。</p><h3 id="cbse-过程的主要活动" tabindex="-1"><a class="header-anchor" href="#cbse-过程的主要活动" aria-hidden="true">#</a> CBSE 过程的主要活动</h3><p>（1）系统需求概览<br> （2）识别候选构件<br> （3）根据发现的构件修改需求<br> （4）体系结构设计<br> （5）构件定制与适配<br> （6）组装构件，创建系统。</p><h3 id="构件组装" tabindex="-1"><a class="header-anchor" href="#构件组装" aria-hidden="true">#</a> 构件组装</h3><p>（1）<code>顺序组装</code>通过按顺序调用已有构件来创建新构件,适用于构件作为程序元素或服务。需要胶水代码保证前一构件输出与下一构件输入相兼容。<br> （2）<code>层次组装</code>一个构件直接调用另一构件提供的服务，被调用构件的&quot;提供&quot;接口必须与调用构件的&quot;请求&quot;接口相容，否则需编写胶水代码实现转换。<br> （3）<code>叠加组装</code>是两个或多个构件合并创建新构件，新构件合并了原构件功能并对外提供新接口。原构件之间无依赖关系,外部应用通过新接口调用原构件接口。</p><h3 id="构件不兼容" tabindex="-1"><a class="header-anchor" href="#构件不兼容" aria-hidden="true">#</a> 构件不兼容</h3><p>（1）<code>参数不兼容</code>。接口操作名称相同但参数类型或个数不同。<br> （2）<code>操作不兼容</code>。提供接口和请求接口的操作名不同。<br> （3）<code>操作不完备</code>。一个构件接口是另一个构件接口的子集。</p><h2 id="需求工程" tabindex="-1"><a class="header-anchor" href="#需求工程" aria-hidden="true">#</a> 需求工程</h2><ul><li>需求工程包括需求开发和需求管理两大类活动。</li><li>需求开发包括<code>需求获取，需求分析，需求定义，需求验证</code>这些主要活动。</li><li>需求管理包括<code>变更控制、版本控制、需求跟踪和需求状态跟踪</code>这些活动。</li></ul><h3 id="需求管理" tabindex="-1"><a class="header-anchor" href="#需求管理" aria-hidden="true">#</a> 需求管理</h3><ul><li><code>问题分析和变更描述</code>，通过识别和分析需求问题或提出的变更提议确保其有效性。</li><li><code>变更分析和成本计算</code>，使用可追溯性信息和系统需求的一般知识对变更提议进行影响分析和评估，同时计算修改需求文档和系统实现的成本。确认后进行是否执行该变更的决策。</li><li><code>变更实现</code>，要求同时修改需求文档和系统设计实现，避免文档和程序的不一致。</li></ul><h3 id="变更管理" tabindex="-1"><a class="header-anchor" href="#变更管理" aria-hidden="true">#</a> 变更管理</h3><p>（1）<code>变更申请</code>。提出对配置项和基线进行变更的申请。<br> （2）<code>变更评估</code>。变更控制委员会(CCB)对变更申请进行评估,包括影响分析、必要性、范围、可行性、工作量估计等，并决定是否批准变更。<br> （3）<code>通告评估</code>。结果 CCB 将对每个变更申请的批准、否决或推迟决定通知相关人员。<br> （4）<code>变更实施</code>。项目经理组织对受影响的配置项进行修改，并记录变更信息。<br> （5）<code>变更验证与确认</code>。对变更后的配置项进行测试验证，由 CCB 确认变更是否按要求完成。<br> （6）<code>变更的发布</code>。配置管理员将变更后的配置项纳入基线。配置管理员将变更内容和结果通知相关人员，并做好记录。</p><h2 id="uml-统一建模语言" tabindex="-1"><a class="header-anchor" href="#uml-统一建模语言" aria-hidden="true">#</a> UML 统一建模语言</h2><h3 id="系统视图" tabindex="-1"><a class="header-anchor" href="#系统视图" aria-hidden="true">#</a> 系统视图</h3><p>(1) <code>逻辑视图</code>。逻辑视图也称为设计视图，它表示了设计模型中在架构方面具有重要意义的部分，即类、子系统、包和用例实现的子集。<br> (2) <code>进程视图</code>。进程视图是可执行线程和进程作为活动类的建模，它是逻辑视图的一次执行实例，描述了并发与同步结构。<br> (3) <code>实现视图</code>。实现视图对组成基于系统的物理代码的文件和构件进行建模。<br> (4) <code>部署视图</code>。部署视图把构件部署到一组物理节点上，表示软<br> 件到硬件的映射和分布结构。<br> (5) <code>用例视图</code>。用例视图是最基本的需求分析模型。</p><h3 id="关系" tabindex="-1"><a class="header-anchor" href="#关系" aria-hidden="true">#</a> 关系</h3><p>(1) <code>依赖</code>。依赖是两个事物之间的语义关系，其中一个事物发生变化会影响另一个事物的语义。<br> (2) <code>关联</code>。关联描述一组对象之间连接的结构关系。<br> (3) <code>泛化</code>。泛化是一般化和特殊化的关系，描述特殊元素的对象可替换一般元素的对象。<br> (4) <code>实现</code>。实现是类之间的语义关系，其中的一个类指定了由另<br> 一个类保证执行的契约。</p><h3 id="图" tabindex="-1"><a class="header-anchor" href="#图" aria-hidden="true">#</a> 图</h3><p>(1) <code>类图</code>。类图描述一组类、接口、协作和它们之间的关系。在 OO 系统的建模中，最常见的图就是类图。<br> (2) <code>对象图</code>。对象图描述一组对象及它们之间的关系。对象图描述了在类图中所建立的事物实例的静态快照。<br> (3) <code>构件图</code>。构件图描述一个封装的类和它的接口、端口，以及由内嵌的构件和连接件构成的内部结构。<br> (4) <code>组合结构图</code>。组合结构图描述结构化类（例如，构件或类）的内部结构，包括结构化类与系统其余部分的交互点。<br> (5) <code>用例图</code>。用例图描述一组用例、参与者及它们之间的关系。<br> (6) <code>顺序图（序列图）</code>。顺序图是一种交互图，交互图展现了一种交互，它由一组对象或参与者以及它们之间可能发送的消息构成。<br> (7) <code>通信图</code>。通信图也是一种交互图，它强调收发消息的对象或参与者的结构组织。<br> (8) <code>定时图（计时图）</code>。定时图也是一种交互图，它强调消息跨越不同对象或参与者的实际时间，而不仅仅是关心消息的相对顺序。<br> (9) <code>状态图</code>。状态图描述一个状态机，它由状态、转移、事件和活动组成。<br> (10) <code>活动图</code>。活动图将进程或其他计算结构展示为计算内部一步步的控制流和数据流。<br> (11) <code>部署图</code>。部署图描述对运行时的处理节点及在其中生存的构件的配置。<br> (12) <code>制品图</code>。视品图描述计算机中一个系统的物理结构。<br> (13) <code>包图</code>。包图描述由模型本身分解而成的组织单元，以及它们之间的依赖关系。<br> (14) <code>交互概览图</code>。交互概览图是活动图和顺序图的混合物。</p><h2 id="软件测试" tabindex="-1"><a class="header-anchor" href="#软件测试" aria-hidden="true">#</a> 软件测试</h2><ul><li><code>控制流图</code>用于检查程序控制结构，描绘程序元素和执行顺序；</li><li><code>数据流图</code>则用于发现数据异常，这些异常包括初始化、赋值、或引用数据等的序列的异常；</li><li><code>接口分析</code>则用于检查子程序和函数接口的一致性，包括形参实参的类型、个数、维数、顺序等。</li><li><code>驱动模块</code>相当于被测模块的主程序，接收数据并将数据传送给被测模块，启动被测模块并打印结果，自顶向下的单元测试中不需要另外编写驱动模块。</li><li><code>桩模块</code>是模拟被测模块调用的模块，用于替代直接相连的模块，以便测试被测模块的接口。为了模拟下级模块功能，测试前需要编写一些模拟接口的桩模块。</li></ul><h3 id="测试方法" tabindex="-1"><a class="header-anchor" href="#测试方法" aria-hidden="true">#</a> 测试方法</h3><blockquote><p>盒测试依据软件内部逻辑设计测试用例，常用的技术是<code>逻辑覆盖</code>。逻辑覆盖有 6 种覆盖标准，分别是<code>语句覆盖、判定覆盖、条件覆盖、判定/条件覆盖、条件组合覆盖和路径覆盖</code>，强度从低到高。</p></blockquote><ul><li><code>静态测试</code>是一种程序测试的方法，通过人工检测和计算机辅助静态分析，在机器上不运行程序，检测文档和代码的准确性和逻辑错误</li><li><code>动态测试</code>则是利用计算机运行程序的方式进行测试</li><li><code>黑盒测试</code>是不需了解内部结构和代码实现，只关注程序的输入和输出，测试其功能需求是否满足 <ul><li>黑盒测试的方法包括<code>等价类划分法、边界值分析法、因果图法、判定表驱动法和错误推测法</code>等</li><li>黑盒测试主要用于<code>集成测试、确认测试和系统测试阶段</code></li></ul></li><li><code>白盒测试</code>需要了解程序内部结构和逻辑，针对代码进行测试以确保运行正确</li><li><code>灰盒测试</code>不仅关注输入输出，也关注逻辑</li><li><code>α测试</code>是在开发者场地由开发人员或测试人员执行的内部测试，侧重于功能验证和重大缺陷检测</li><li><code>β测试</code>是软件开发过程中的一种测试阶段，通常在正式发布之前进行。在这个阶段，开发团队会将软件提供给一部分用户群体使用，以便获取反馈和意见</li><li><code>验收测试</code>的目的是确保软件能够准备就绪，并且可以让最终用户将其用于执行既定的功能和任务。</li><li><code>回归测试</code>的目的是测试软件变更之后变更部分的正确性和对变更需求的符合性，以及确保软件原有的功能不受损害。</li><li><code>集成测试</code>主要是检查模块之间的接口关系，以及已集成的软件是否符合设计要求。其测试的技术依据是软件概要设计文档。</li><li><code>系统测试</code>则是在真实系统环境下验证整个软件配置项的连接和是否满足各种要求。</li></ul><h2 id="产品配置状态" tabindex="-1"><a class="header-anchor" href="#产品配置状态" aria-hidden="true">#</a> 产品配置状态</h2><ul><li>配置项的状态有 3 种<code>“草稿”（Draft）</code>、<code>“正式发布”（Released）</code>和<code>“正在修改”（Changing）</code></li></ul><h2 id="面向对象设计原则" tabindex="-1"><a class="header-anchor" href="#面向对象设计原则" aria-hidden="true">#</a> 面向对象设计原则</h2><blockquote><p>面向对象设计原则总共有六种，分别是<code>单一职责原则、开放-封闭原则、李氏替换原则、依赖倒置原则、接口隔离原则和组合重用原则</code></p></blockquote>',134),h=[c];function l(o,t){return d(),a("div",null,h)}const u=e(r,[["render",l],["__file","basic-software-engineering.html.vue"]]);export{u as default};
