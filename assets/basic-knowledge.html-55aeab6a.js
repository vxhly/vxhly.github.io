import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as d,c as i,e as a}from"./app-2b867918.js";const l={},r=a('<div class="hint-container tip"><p class="hint-container-title">前言</p><p><code>系统架构设计师</code> 考试中上午选择题知识点汇总。</p></div><h2 id="名词解释" tabindex="-1"><a class="header-anchor" href="#名词解释" aria-hidden="true">#</a> 名词解释</h2><h3 id="电子政务" tabindex="-1"><a class="header-anchor" href="#电子政务" aria-hidden="true">#</a> 电子政务</h3><ul><li><code>G2B</code>: 政府对企业</li><li><code>G2C</code>: 政府对公民</li><li><code>G2E</code>: 政府对公务员</li><li><code>G2G</code>: 政府对政府</li></ul><h3 id="云计算" tabindex="-1"><a class="header-anchor" href="#云计算" aria-hidden="true">#</a> 云计算</h3><ul><li><code>PaaS</code>: 平台即服务</li><li><code>SaaS</code>: 软件（应用）即服务</li><li><code>IaaS</code>: 基础设施即服务</li></ul><h3 id="软件工程" tabindex="-1"><a class="header-anchor" href="#软件工程" aria-hidden="true">#</a> 软件工程</h3><ul><li><code>OOA</code>: 面向对象分析</li><li><code>OOD</code>: 面向对象设计</li><li><code>OOP</code>: 面向对象的程序设计</li></ul><h3 id="数据库设计规范" tabindex="-1"><a class="header-anchor" href="#数据库设计规范" aria-hidden="true">#</a> 数据库设计规范</h3><ul><li><code>第一范式（1NF）</code>: 若关系模型 R 的每一个属性是不可再分的数据项, 则符合 <code>1NF</code></li><li><code>第二范式（2NF）</code>: 若关系模型 <code>R ∈ 1NF</code>, 且每一个非主属性完全依赖主键, 则符合 <code>2NF</code></li><li><code>第三范式（3NF）</code>: 即当 2NF 消除了非主属性对主键的传递依赖, 则符合 <code>3NF</code></li></ul><h2 id="计算机原理" tabindex="-1"><a class="header-anchor" href="#计算机原理" aria-hidden="true">#</a> 计算机原理</h2><h3 id="指令系统" tabindex="-1"><a class="header-anchor" href="#指令系统" aria-hidden="true">#</a> 指令系统</h3><ul><li>指令系统是计算机硬件的语言系统, 是机器所具有的全部指令的集合, 反映了计算机所拥有的基本功能。</li></ul><h3 id="指令系统特点" tabindex="-1"><a class="header-anchor" href="#指令系统特点" aria-hidden="true">#</a> 指令系统特点</h3><table><thead><tr><th>名称</th><th>指令要求</th><th>寻址方式</th><th>实现方式</th><th>编译</th></tr></thead><tbody><tr><td>复杂指令系统 CISC</td><td>指令数量众多,使用频率相差悬殊.可变长指令格式</td><td>多种寻址方式</td><td>与主存直接交互.微程序控制</td><td>编译复杂</td></tr><tr><td>精简指令系统 RISC</td><td>指令数量少,长度固定</td><td>寻址方式少</td><td>硬布线逻辑控制.流水线技术.与寄存器交互.</td><td>优化的编辑器</td></tr></tbody></table><h3 id="计算机存储" tabindex="-1"><a class="header-anchor" href="#计算机存储" aria-hidden="true">#</a> 计算机存储</h3><ul><li>存储速度从快到慢分别是：寄存器组(CPU)、Cache、内存、Flash。</li><li>接近 CPU 的存储器容量更小、速度更快、成本更高, 辅存容量更大、速度更慢、成本更低。</li><li>采用分级存储体系的目的是解决存储的容量、价格和速度之间的矛盾。</li><li>不能转换对应的物理地址原因是逻辑地址到物理地址转换时地址越界。</li></ul><h3 id="系统性能评价" tabindex="-1"><a class="header-anchor" href="#系统性能评价" aria-hidden="true">#</a> 系统性能评价</h3><ul><li>通常用户采用评价程序来评价系统的性能。评价程序一般有专门的测量程序、仿真程序等, 而评测准确度最高的评价程序是<code>真实程序</code>。</li><li>在计算机性能评估中, 通常将评价程序中用的最多、最频繁的<code>核心程序</code>作为评价计算机性能的标准程序, 称其为基准测试程序。</li><li>基准测试程序的分类: 核心程序, 小型基准程序, 合成基准程序, 基准测试程序组。</li></ul><h3 id="进程管理" tabindex="-1"><a class="header-anchor" href="#进程管理" aria-hidden="true">#</a> 进程管理</h3><ul><li>在实时操作系统中, 两个任务并发执行, 一个任务要等待另一个任务发来消息, 或建立某个条件后再向前执行, 这种制约合作关系被称为<code>同步</code></li><li>在进程管理中，<code>互斥</code>是指一种保护共享资源不被多个进程同时访问的机制。当多个进程需要访问同一资源时，如果没有互斥机制，可能会导致竞态条件或数据不一致的问题。</li></ul><h2 id="计算机网络" tabindex="-1"><a class="header-anchor" href="#计算机网络" aria-hidden="true">#</a> 计算机网络</h2><h3 id="常见的-tcp-udp-端口号" tabindex="-1"><a class="header-anchor" href="#常见的-tcp-udp-端口号" aria-hidden="true">#</a> 常见的 TCP/UDP 端口号</h3><ul><li><code>HTTP</code>: 80</li><li><code>HTTPS</code>: 443</li><li><code>FTP</code>: 21 用来传输控制信息, 20 用来传输文件内容</li><li><code>TFTP</code>: 69 (建立在 UDP 上)</li><li><code>POP3</code>: 110</li><li><code>SMTP</code>: 25</li><li><code>IMAP</code>: 143</li></ul><h2 id="数据库" tabindex="-1"><a class="header-anchor" href="#数据库" aria-hidden="true">#</a> 数据库</h2><h3 id="armstrong-公理" tabindex="-1"><a class="header-anchor" href="#armstrong-公理" aria-hidden="true">#</a> Armstrong 公理</h3><div class="hint-container tip"><p class="hint-container-title">前置条件</p><p>设关系模式 <code>R&lt;U,F&gt;</code>, 其中 U 为属性集合, F 是 U 上的一组函数依赖, 则有以下的推论</p></div><ul><li>自反律: 若 <code>Y⊆X⊆U</code>, 则 <code>X-&gt;Y</code> 为 F 所蕴含</li><li>增广律: 若 <code>X-&gt;Y</code> 为 F 所蕴含, 且 <code>Z⊆U</code>, 则 <code>XZ-&gt;YZ</code> 为 F 所蕴含</li><li>传递律: 若 <code>X-&gt;Y</code>, <code>Y-&gt;Z</code> 为 F 所蕴含, 则 <code>X-&gt;Z</code> 为 F 所蕴含</li><li>合并规则: 若 <code>X-&gt;Y</code>, <code>X-&gt;Z</code>, 则 <code>X-&gt;YZ</code> 为 F 所蕴含</li><li>伪传递规则: 若 <code>X-&gt;Y</code>, <code>WY-&gt;Z</code>, 则 <code>XW-&gt;Z</code> 为 F 所蕴含</li><li>分解规则: 若 <code>X-&gt;Y</code>, <code>Z⊆Y</code>, 则 <code>X-&gt;Z</code> 为 F 所蕴含</li></ul><h3 id="数据库设计" tabindex="-1"><a class="header-anchor" href="#数据库设计" aria-hidden="true">#</a> 数据库设计</h3><ul><li>在数据库设计的需求分析阶段应该完成包括<code>需求规格说明书、数据字典和数据流图</code>在内的文档.</li><li>数据库设计的概念设计阶段的主要任务是<code>设计概念模型</code>, 包括<code>E-R 图、E-R 图的转换</code>等.</li><li>数据库设计的逻辑设计阶段的主要任务是<code>设计逻辑模型</code>, 包括<code>关系模式、关系模式的规范化</code>等.</li><li>数据库设计的物理设计阶段的主要任务是<code>设计物理模型</code>, 包括<code>存储结构、存取路径、存取方法</code>等.</li><li>数据库的安全机制中, 通过提供<code>存储过程</code>供第三方开发人员调用进行数据更新, 从而保证数据库的关系模式不被第三方获取</li></ul><h3 id="分布式数据库" tabindex="-1"><a class="header-anchor" href="#分布式数据库" aria-hidden="true">#</a> 分布式数据库</h3><ul><li>分布式数据库两个阶段提交协议中的两个阶段分别是<code>表决阶段</code>和<code>执行阶段</code></li><li>分布透明性包括: 分片透明性、位置透明性、复制透明性和局部数据模型透明性 <ul><li>分片透明性: 用户不知道数据分布在哪里</li><li>位置透明性: 用户不知道数据存储在哪里</li><li>复制透明性: 用户不知道数据是否被复制</li><li>局部数据模型透明性: 用户不知道数据的存储方式</li></ul></li></ul><h2 id="软件工程-1" tabindex="-1"><a class="header-anchor" href="#软件工程-1" aria-hidden="true">#</a> 软件工程</h2><h3 id="软件工程的三要素" tabindex="-1"><a class="header-anchor" href="#软件工程的三要素" aria-hidden="true">#</a> 软件工程的三要素</h3><ul><li>方法</li><li>工具</li><li>过程</li></ul><h3 id="面向对象的分析步骤" tabindex="-1"><a class="header-anchor" href="#面向对象的分析步骤" aria-hidden="true">#</a> 面向对象的分析步骤</h3><ol><li>利用用例及用例图来表示需求</li><li>你用包图及类图表示目标软件系统的总体框架结构</li></ol><h3 id="结构化设计的特征" tabindex="-1"><a class="header-anchor" href="#结构化设计的特征" aria-hidden="true">#</a> 结构化设计的特征</h3><ol><li>可修改性、可测试性、可移植性</li><li>模块化</li><li>高内聚低耦合</li></ol><h3 id="结构化方法分析模型" tabindex="-1"><a class="header-anchor" href="#结构化方法分析模型" aria-hidden="true">#</a> 结构化方法分析模型</h3><ul><li>数据模型（代表为 E-R 图）</li><li>功能模型（代表为 DFD 图）</li><li>行为模型（代表为状态转换图）</li></ul><h3 id="面向对象的分析模型" tabindex="-1"><a class="header-anchor" href="#面向对象的分析模型" aria-hidden="true">#</a> 面向对象的分析模型</h3><ul><li>顶层架构图</li><li>用例与用例图</li><li>领域概念模型</li></ul><h3 id="软件结构化设计的步骤" tabindex="-1"><a class="header-anchor" href="#软件结构化设计的步骤" aria-hidden="true">#</a> 软件结构化设计的步骤</h3><ol><li>架构设计</li><li>接口设计</li><li>数据设计</li><li>过程设计</li></ol><h3 id="软件开发生命周期" tabindex="-1"><a class="header-anchor" href="#软件开发生命周期" aria-hidden="true">#</a> 软件开发生命周期</h3><ul><li>按照传统的软件生命周期方法学, 可以将软件生命周期分为<code>软件定义、软件开发、软件运行与维护</code>三个阶段</li><li>软件定义包括可行性研究和详细需求分析过程, 任务是确定软件开发工程必须完成的目标. 具体可以分为问题定义、可行性研究、需求分析等</li><li>软件开发时期是软件的设计与实现, 可以分为概要(总体)设计、详细设计、编码、测试等</li></ul><h3 id="软件开发方法分类" tabindex="-1"><a class="header-anchor" href="#软件开发方法分类" aria-hidden="true">#</a> 软件开发方法分类</h3><h4 id="按照开发风范" tabindex="-1"><a class="header-anchor" href="#按照开发风范" aria-hidden="true">#</a> 按照开发风范</h4><ul><li><code>自顶向下</code>: 大问题分化成小问题, 逐一解决, 代表是结构化方法</li><li><code>自底向上</code>: 从具体的部件开始, 凭借设计者的技巧进行相互连接、修改和扩大, 代表是面向对象方法</li></ul><h4 id="按照性质" tabindex="-1"><a class="header-anchor" href="#按照性质" aria-hidden="true">#</a> 按照性质</h4><ul><li><code>形式化开发</code>: 数学推理开发, 代表有净室工程</li><li><code>非形式化开发</code>: 各种开发模型</li></ul><h4 id="适用范围" tabindex="-1"><a class="header-anchor" href="#适用范围" aria-hidden="true">#</a> 适用范围</h4><ul><li><code>整体性</code>: 软件开发全过程的方法</li><li><code>局部性</code>: 某个具体阶段的软件方法</li></ul><h3 id="构件化开发方法" tabindex="-1"><a class="header-anchor" href="#构件化开发方法" aria-hidden="true">#</a> 构件化开发方法</h3><p>(1) 关键字分类法<br> 根据领域分析的结果将应用领域的概念按照从抽象到具体的顺序逐次分解为树形或有向无回路图结构。<br> (2)刻面分类法<br> 利用 Facet(刻面)描述构件执行的功能、被操作的数据、构件应用的语境或任意其他特征。<br> (3)超文本方法<br> 基于全文检索技术，使得检索者在阅读文档过程中可以按照人类的联想思维方式任意跳转到包含相关概念或构件的文档。</p><h3 id="软件重用" tabindex="-1"><a class="header-anchor" href="#软件重用" aria-hidden="true">#</a> 软件重用</h3><ul><li>软件重用是指在两次或多次不同的软件开发过程中重复使用相同或相似软件元素的过程。</li><li>软件元素包括需求分析文档、设计过程、设计文档、程序代码、测试用例、领域知识等。</li><li>软件重用分垂直式重用与水平式重用，垂直式重用是指局限于某一垂直领域的重用，如只在电力系统中用到的构件;而水平式重用是指通用领域的重用，如标准函数库，任何软件都能用，所以是水平式重用。</li></ul><h3 id="逆向工程" tabindex="-1"><a class="header-anchor" href="#逆向工程" aria-hidden="true">#</a> 逆向工程</h3><p>逆向工程导出的信息可以分为如下 4 个抽象层次。<br> ① 实现级:包括程序的抽象语法树、符号表等信息。<br> ② 结构级:包括反映程序分量之间相互依赖关系的信息，例如调用图、结构图等。<br> ③ 功能级:包括反映程序段功能及程序段之间关系的信息。<br> ④ 领域级:包括反映程序分量或程序诸实体与应用领域概念之间对应关系的信息。</p><h3 id="软件过程模型" tabindex="-1"><a class="header-anchor" href="#软件过程模型" aria-hidden="true">#</a> 软件过程模型</h3><p>软件过程模型的基本概念:软件过程是制作软件产品的一组活动以及结果，这些活动主要由软件人员来完成，软件活动主要有:<br> (1)软件描述。必须定义软件功能以及使用的限制。<br> (2)软件开发。也就是软件的设计和实现，软件工程人员制作出能满足描述的软件。<br> (3)软件有效性验证。软件必须经过严格的验证，以保证能够满足客户的需求。<br> (4)软件进化。软件随着客户需求的变化不断地改进。</p><h3 id="软件开发模型" tabindex="-1"><a class="header-anchor" href="#软件开发模型" aria-hidden="true">#</a> 软件开发模型</h3><h4 id="螺旋模型" tabindex="-1"><a class="header-anchor" href="#螺旋模型" aria-hidden="true">#</a> 螺旋模型</h4><p>螺旋模型是在快速原型的基础上扩展而成的一种生存周期模型。这种模型将整个软件开发流程分成多个阶段，每个阶段都由 4 部分组成，它们是:<br> ①<code>目标设定</code>。为该项目进行需求分析，定义和确定这一个阶段的专门目标，指定对过程和产品的约束，并且制定详细的管理计划。<br> ②<code>风险分析</code>。对可选方案进行风险识别和详细分析，制定解决办法，采取有效的措施避免这些风险。<br> ③<code>开发和有效性验证</code>。风险评估后，可以为系统选择开发型，并且进行原型开发，即开发软件产品。<br> ④<code>评审</code>。对项目进行评审，以确定是否需要进入螺旋线的下一次回路，如果决定继续，就要制定下一阶段计划。</p><h4 id="瀑布模型" tabindex="-1"><a class="header-anchor" href="#瀑布模型" aria-hidden="true">#</a> 瀑布模型</h4><p>瀑布模型的特点是因果关系紧密相连，前一个阶段工作的结果是后一个阶段工作的输入。或者说，每一个阶段都是建立在前一个阶段的正确结果之上，前一个阶段的错误和疏漏会隐蔽地带入后一个阶段。</p><h4 id="原型模型" tabindex="-1"><a class="header-anchor" href="#原型模型" aria-hidden="true">#</a> 原型模型</h4><p>原型模型先是使用原型获取需求，需求获取到之后有可能抛弃丢原型，然后根据原型获得的需求进行目标软件的开发。</p><h4 id="rup-模型" tabindex="-1"><a class="header-anchor" href="#rup-模型" aria-hidden="true">#</a> RUP 模型</h4><p>RUP 中的软件过程在时间上被分解为 4 个顺序的阶段，分别是初始阶段、细化阶段、构建阶段和移交阶段。<br> ① 初始阶段的任务是为系统建立业务模型并确定项目的边界。<br> ② 细化阶段的任务是分析问题领域，建立完善的架构，淘汰项目中最高风险的元素。<br> ③ 构建阶段，要开发所有剩余的构件和应用程序功能，把这些构件集成为产品。移交阶段的重点是确保软件对最终用户是可用的。</p><p>RUP(Rational Unified Process)软件开发生命周期是一个二维的软件开发模型，RUP 的 9 个核心工作流有:<br> 1、业务建模: 理解待开发系统所在的机构及其商业运作，确保所有参与人员对待开发系统所在的机构有共同的认识，评估待开发系统对所在机构的影响。<br> 2、需求: 定义系统功能及用户界面，使客户知道系统的功能，使开发人员理解系统的需求，为项目预算及计划提供基础。<br> 3、分析与设计: 把需求分析的结果转化为分析与设计模型。<br> 4、实现: 把设计模型转换为实现结果，对开发的代码做单元测试，将不同实现人员开发的模块集成为可执行系统。<br> 5、测试: 检查各子系统的交互与集成，，验证所有需求是否均被正确实现，对发现的软件质量上的缺陷进行归档，对软件质量提出改进建议。<br> 6、部署: 打包、分发、安装软件，升级旧系统:培训用户及销售人员并提供技术支持。<br> 7、配置与变更管理: 跟踪并维护系统开发过程中产生的所有制品的完整性和一致性。<br> 8、项目管理: 为软件开发项目提供计划、人员分配、执行、监控等方面的指导，为风险管理提供框架。<br> 9、环境: 为软件开发机构提供软件开发环境，即提供过程管理和工具的支持。</p><h3 id="敏捷开发方法" tabindex="-1"><a class="header-anchor" href="#敏捷开发方法" aria-hidden="true">#</a> 敏捷开发方法</h3><p>(1)XP(Extreme Programming，极限编程)XP 是一种轻量、高效、低风险、柔性、可预测、科学且充满乐趣的软件开发方式，适用于小型或中型软件开发团队，并且客户的需求模糊或需求多变。<br> (2)水晶系列(Crystal)开发方法。水晶法认为每一个不同的项目都需要一套不同的策略、约定和方法论，认为人对软件质量有重要的作用，因此随着项目质量和开发人员素质的提高，项目和过程的质量也随之提高，通过更好地交流和经常性的交付，软件生产力得到提高。<br> (3)开放式源码的程序开发人员在地域上分布很广，这使得它和其他敏捷方法不同，因为一般的敏捷方法都强调项目组成员在同一地点工作。开放源码的一个突出特点就是查错排障(debug)的高度并行性，任何人发现了错误都可将改正源码的“补丁”文件发给维护者。然后由维护者将这些堂“补丁”或是新增的代码并入源码库。<br> (4)SCRUM。并列争求法使用迭代的方法，其中，把每 30 天一次的迭代称为一个冲刺，并按需求的优先级别来实现产品。多个自组织和自治的小组井行地递增实现产品。协调是通过简短的日常情况会议来进行，就像橄榄球中的“并列争球”。<br> (5)功用驱动开发方法(FDD)像其他方法一样，它致力于短时的迭代阶段和可见可用的功能。在 FDD 中，一个迭代周期一般是两周。在 FDD 中，编程开发人员分成两类:首席程序员和“类”程序员。首席程序员是最富有经验的开发人员，他们是项目的协调者、设计者和指导者，而“类”程序员则主要做源码编写。<br> (6)ASD(Adaptive Software Development)方法的核心是三个非线性的、重叠的开发阶段:猜测、合作与学习。<br> (7)开放统一过程开发方法(OpenUP)采用了迭代和增量的生命周期，为了避免过多的过程，开放统一过程开发方法遵循精益原则，只涉及最小集合的敏捷实践，更适合小型敏捷项目。</p><h2 id="软件架构评估" tabindex="-1"><a class="header-anchor" href="#软件架构评估" aria-hidden="true">#</a> 软件架构评估</h2><h3 id="架构风格" tabindex="-1"><a class="header-anchor" href="#架构风格" aria-hidden="true">#</a> 架构风格</h3><ul><li>Layered system (分层式系统)</li><li>Data flow (数据流)</li><li>Event system (事件系统)</li><li>Rule-based system (基于规则的系统)</li></ul><h3 id="体现结构风格" tabindex="-1"><a class="header-anchor" href="#体现结构风格" aria-hidden="true">#</a> 体现结构风格</h3><ul><li>C2 体系结构风格可以概括为: 通过连接件绑定在一起按照一组规则运作的并行构件网络.</li><li>管道过滤器风格的特点是: 每个构件都有一组输入和输出，构件读输入的数据流，经过内部处理，然后产生输出数据流。</li><li>典型的批处理应用基本流程是: 从数据库、文件等数据媒介读取大量记录用某种方式处理数据，以修改后的形式写回数据。</li><li>面向对象风格: 数据的表示和它们的相应操作被封装起来，对象的行为体现在其接受和请求的动作中。对象具有封装性，一个对象的改变不会影响其他对象。</li><li>独立构件风格: 事件的触发者并不知道哪些构件会被这些事件影响，相互保持独立。</li></ul><h3 id="质量属性" tabindex="-1"><a class="header-anchor" href="#质量属性" aria-hidden="true">#</a> 质量属性</h3><ul><li><code>性能</code>: 处理任务所需时间或者单位时间内的处理量</li><li><code>可靠性</code>: 正常运行的时间比例, 出现故障多久能启用系统</li><li><code>安全性</code>: 系统的向合法用户提供服务并且阻止非法用户的能力</li><li><code>可维护性</code>: 错误发生后进局部性修改, 对其他构件负面影响最小</li><li><code>可扩展性</code>: 使用新构件、改进或删除原有构件或特性</li><li><code>结构重组性</code>: 重新组织构件及构件关系、灵活配置构件</li><li><code>可移植性</code>: 多样的环境(硬件平台、语言、操作系统等)</li><li><code>易用性</code>: 在指定条件下使用时，软件产品被理解、学习、使用和吸引用户的能力</li></ul><h3 id="质量特性" tabindex="-1"><a class="header-anchor" href="#质量特性" aria-hidden="true">#</a> 质量特性</h3><ul><li><code>敏感点</code>: 为了实现某种特定的质量属性，一个或多个构件所具有的特性。 <ul><li>对查询请求处理时间的要求将影响系统的数据传输协议和处理过程的设计</li></ul></li><li><code>权衡点</code>: 指影响多个质量特性，并对多个质量特性来说都是敏感点的质量特性。 <ul><li>改变业务数据编码方式会对系统的性能和安全性产生影响</li></ul></li><li><code>风险</code>: 不以标准术语出现。某些做法有一些隐患可能导致一些问题。 <ul><li>对系统某业务逻辑的描述尚未达成共识，这可能导致部分业务功能模块的重复，影响系统的可修改性;</li></ul></li><li><code>非风险</code>: 某些做法是可行的、可接受的。 <ul><li>业务处理时间小于 30 毫秒，则将请求响应时间设定为 1 秒钟是可以接受的</li></ul></li></ul>',83),h=[r];function c(o,t){return d(),i("div",null,h)}const u=e(l,[["render",c],["__file","basic-knowledge.html.vue"]]);export{u as default};
