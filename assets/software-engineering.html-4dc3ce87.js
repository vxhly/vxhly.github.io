import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as l,e}from"./app-b32ebd48.js";const h={},d=e('<h2 id="瀑布模型" tabindex="-1"><a class="header-anchor" href="#瀑布模型" aria-hidden="true">#</a> 瀑布模型</h2><h3 id="特点" tabindex="-1"><a class="header-anchor" href="#特点" aria-hidden="true">#</a> 特点</h3><ul><li>严格区分阶段，每个阶段因果关系紧密相连</li><li>只适合需求明确的项目</li></ul><h3 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h3><ul><li>软件需求完整性、正确性难确定</li><li>严格串行化，很长时间才能看到结果</li><li>瀑布模型要求每个阶段一次性完全解决该阶段工作，这不现实。</li></ul><h3 id="阶段" tabindex="-1"><a class="header-anchor" href="#阶段" aria-hidden="true">#</a> 阶段</h3><ul><li>需求分析</li><li>软件设计</li><li>程序设计</li><li>编码实现</li><li>单元测试</li><li>集成测试</li><li>系统测试</li><li>运行维护</li></ul><h2 id="原型模型" tabindex="-1"><a class="header-anchor" href="#原型模型" aria-hidden="true">#</a> 原型模型</h2><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类" aria-hidden="true">#</a> 分类</h3><ul><li>抛弃型原型</li><li>演化型原型</li></ul><h3 id="阶段-1" tabindex="-1"><a class="header-anchor" href="#阶段-1" aria-hidden="true">#</a> 阶段</h3><ul><li>原型开发</li><li>目标软件开发</li></ul><h2 id="v-模型" tabindex="-1"><a class="header-anchor" href="#v-模型" aria-hidden="true">#</a> V 模型</h2><h3 id="特点-1" tabindex="-1"><a class="header-anchor" href="#特点-1" aria-hidden="true">#</a> 特点</h3><ul><li>测试贯穿于始终</li><li>测试分阶段，测试计划提前</li></ul><h3 id="阶段-2" tabindex="-1"><a class="header-anchor" href="#阶段-2" aria-hidden="true">#</a> 阶段</h3><ul><li>需求分析 =&gt; 验收测试</li><li>系统设计 =&gt; 系统测试</li><li>详细设计 =&gt; 集成测试</li><li>编码 =&gt; 单元测试</li></ul><h2 id="螺旋模型" tabindex="-1"><a class="header-anchor" href="#螺旋模型" aria-hidden="true">#</a> 螺旋模型</h2><h3 id="特点-2" tabindex="-1"><a class="header-anchor" href="#特点-2" aria-hidden="true">#</a> 特点</h3><ul><li>以快速原型为基础＋瀑布模型; 考虑了风险问题</li><li>风险分析: 评价方案、识别风险、消除风险</li><li>目标设定: 决定目标、方案和限制</li></ul><h2 id="构件组装模型" tabindex="-1"><a class="header-anchor" href="#构件组装模型" aria-hidden="true">#</a> 构件组装模型</h2><h3 id="特点-3" tabindex="-1"><a class="header-anchor" href="#特点-3" aria-hidden="true">#</a> 特点</h3><ul><li>易扩展、易重用、降低成本、安排任务更灵活。</li></ul><h3 id="缺点-1" tabindex="-1"><a class="header-anchor" href="#缺点-1" aria-hidden="true">#</a> 缺点</h3><ul><li>构件设计要求经验丰富的架构师、设计不好的构件难重用、强调重用可能牺牲其它指标（如性能）、第三方构件质量难控制。</li></ul><h3 id="阶段-3" tabindex="-1"><a class="header-anchor" href="#阶段-3" aria-hidden="true">#</a> 阶段</h3><ul><li>需求分析和定义</li><li>设计构件组装</li><li>建立构件库</li><li>构建应用软件</li><li>测试和发布</li></ul><h2 id="快速应用开发模型-rad" tabindex="-1"><a class="header-anchor" href="#快速应用开发模型-rad" aria-hidden="true">#</a> 快速应用开发模型(RAD)</h2><h3 id="特点-4" tabindex="-1"><a class="header-anchor" href="#特点-4" aria-hidden="true">#</a> 特点</h3><ul><li>业务建模</li><li>数据建模</li><li>过程建模</li><li>应用生成</li><li>测试与交付</li></ul><h2 id="统一过程" tabindex="-1"><a class="header-anchor" href="#统一过程" aria-hidden="true">#</a> 统一过程</h2><h3 id="阶段-4" tabindex="-1"><a class="header-anchor" href="#阶段-4" aria-hidden="true">#</a> 阶段</h3><ul><li>初始阶段</li><li>细化阶段</li><li>构建阶段</li><li>移交阶段</li></ul><h3 id="_9-个工作流" tabindex="-1"><a class="header-anchor" href="#_9-个工作流" aria-hidden="true">#</a> 9 个工作流</h3><ul><li>业务建模</li><li>需求</li><li>分析和设计</li><li>实现</li><li>测试</li><li>部署</li><li>配置和变更管理</li><li>项目管理</li><li>环境</li></ul><h2 id="敏捷方法" tabindex="-1"><a class="header-anchor" href="#敏捷方法" aria-hidden="true">#</a> 敏捷方法</h2><h3 id="特点-5" tabindex="-1"><a class="header-anchor" href="#特点-5" aria-hidden="true">#</a> 特点</h3><ul><li>适应性的</li><li>以人为本</li><li>增量迭代, 小步快跑</li><li>适合小型项目</li></ul><h3 id="敏捷宣言" tabindex="-1"><a class="header-anchor" href="#敏捷宣言" aria-hidden="true">#</a> 敏捷宣言</h3><ul><li>个体和互动胜过流程和工具</li><li>可用的软件胜过详尽的文档</li><li>客户合作胜过合同谈判</li><li>响应变化胜过遵循计划</li></ul><h3 id="scrum-3355" tabindex="-1"><a class="header-anchor" href="#scrum-3355" aria-hidden="true">#</a> Scrum 3355</h3><ul><li><p>3 个核心角色</p><ul><li>产品负责人</li><li>Scrum Master</li><li>开发团队</li></ul></li><li><p>3 个工件</p><ul><li>产品代办事项</li><li>Sprint 迭代代办清单</li><li>产品增量</li></ul></li><li><p>5 个关键事件</p><ul><li>Sprint 计划会议</li><li>每日站会</li><li>Sprint 评审会议</li><li>Sprint 回顾会议</li><li>产品回顾会议</li></ul></li><li><p>5 个价值观</p><ul><li>承诺</li><li>勇气</li><li>专注</li><li>尊重</li><li>开放</li></ul></li></ul><h3 id="极限编程-xp" tabindex="-1"><a class="header-anchor" href="#极限编程-xp" aria-hidden="true">#</a> 极限编程（XP）</h3><ul><li>价值观【交流、朴素、反馈、勇气】、近螺旋式的开发方法。</li></ul><h3 id="水晶方法" tabindex="-1"><a class="header-anchor" href="#水晶方法" aria-hidden="true">#</a> 水晶方法</h3><ul><li>提倡“机动性”的方法，拥有对不同类型项目非常有效的敏捷过程。</li></ul><h3 id="特征驱动开发方法-fdd" tabindex="-1"><a class="header-anchor" href="#特征驱动开发方法-fdd" aria-hidden="true">#</a> 特征驱动开发方法（FDD）</h3><ul><li>认为有效的软件开发需要 3 要素【人》过程、技术】。定义了 6 种关键的项目角色：<code>项目经理、首席架构设计师、开发经理、主程序员、程序员和领域专家</code>。</li></ul><h3 id="开放式源码" tabindex="-1"><a class="header-anchor" href="#开放式源码" aria-hidden="true">#</a> 开放式源码</h3><ul><li>程序开发人员在地域上分布很广【其他方法强调集中办公】。</li></ul><h3 id="asd-方法" tabindex="-1"><a class="header-anchor" href="#asd-方法" aria-hidden="true">#</a> ASD 方法</h3><ul><li>其核心是三个非线性的、重叠的开发阶段: <code>猜测、合作与学习</code>。</li></ul><h3 id="动态系统开发方法-dsdm" tabindex="-1"><a class="header-anchor" href="#动态系统开发方法-dsdm" aria-hidden="true">#</a> 动态系统开发方法(DSDM)</h3><ul><li>倡导以业务为核心。</li></ul><h2 id="逆向工程" tabindex="-1"><a class="header-anchor" href="#逆向工程" aria-hidden="true">#</a> 逆向工程</h2><ul><li><code>实现级</code>；包括程序的抽象语法树、符号表、过程的设计表示</li><li><code>结构级</code>；包括反映程序分量之间相互依赖关系的信息，例如调用图、结构图、程序和数据结构</li><li><code>功能级</code>；包括反映程序段功能及程序段之间关系的信息，例如数据和控制流模型</li><li><code>过程级</code>；包括反映程序分量或程序诸实体与应用领域概念之间对应关系的信息，例如实体关系模型</li></ul><h2 id="净室软件工程" tabindex="-1"><a class="header-anchor" href="#净室软件工程" aria-hidden="true">#</a> 净室软件工程</h2><h3 id="缺点-2" tabindex="-1"><a class="header-anchor" href="#缺点-2" aria-hidden="true">#</a> 缺点</h3><ul><li>太理论化，正确性验证的步骤比较困难且耗时。</li><li>开发小组不进行传统的模块测试，这是不现实的。</li><li>脱胎于传统软件工程，不可避免带有传统软件工程的一些弊端。</li></ul>',59),r=[d];function n(c,u){return a(),l("div",null,r)}const o=i(h,[["render",n],["__file","software-engineering.html.vue"]]);export{o as default};
