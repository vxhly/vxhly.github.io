import{_ as o,V as p,W as c,Z as i,X as s,Y as n,a0 as t,$ as a,G as l}from"./framework-ac7be777.js";const u="/assets/debug-console-1.png",r="/assets/debug-console-2.png",d="/assets/debug-console-3.png",k="/assets/debug-console-4.png",v="/assets/debug-console-5.png",b="/assets/debug-console-6.png",h="/assets/debug-console-7.png",m="/assets/debug-console-8.png",g="/assets/debug-console-9.png",f={},j=s("div",{class:"hint-container tip"},[s("p",{class:"hint-container-title"},"前言"),s("p",null,"一个简单而实用的控制台命令, 用来调试 JavaScript 代码的不合理性。")],-1),x=a(`<h2 id="console-log-object" tabindex="-1"><a class="header-anchor" href="#console-log-object" aria-hidden="true">#</a> console.log(object)</h2><p>一个取代 alert() 和 document.write() 的最佳途径。是前端开发人员使用频率最高的一条语句, 它向控制台输出一条消息。支持 C 语言 printf 式的格式化输出。当然, 也可以不使用格式化输出来达到同样的目的。</p><h3 id="简单的输出" tabindex="-1"><a class="header-anchor" href="#简单的输出" aria-hidden="true">#</a> 简单的输出</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> animal <span class="token operator">=</span> <span class="token string">&quot;tiger&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;The %s jumped over %d tall buildings&quot;</span><span class="token punctuation">,</span> animal<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;The&quot;</span><span class="token punctuation">,</span> animal<span class="token punctuation">,</span> <span class="token string">&quot;jumped over&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> <span class="token string">&quot;tall buildings&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+u+`" alt="console.log" tabindex="0" loading="lazy"><figcaption>console.log</figcaption></figure><p>console 对象可以使用 printf 风格的占位符。支持的占位符, 有字符（%s）、整数（%d 或%i）、浮点数（%f）和对象（%o）四种。</p><h3 id="有意思的-c" tabindex="-1"><a class="header-anchor" href="#有意思的-c" aria-hidden="true">#</a> 有意思的 %c</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;%c css88.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;font-size:20pt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
  <span class="token string">&quot;%c 前端开发 %c css88.com %c github&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;color:red&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;color:orange;font-weight:bold&quot;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;%c 阴影文字&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text-shadow: 3px 1px 1px grey&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
  <span class="token string">&quot;%c 彩色文字&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;background-image:-webkit-gradient( linear, left top, right top, color-stop(0, #f22), color-stop(0.15, #f2f), color-stop(0.3, #22f), color-stop(0.45, #2ff), color-stop(0.6, #2f2),color-stop(0.75, #2f2), color-stop(0.9, #ff2), color-stop(1, #f22) );color:transparent;-webkit-background-clip: text;font-size:5em;&quot;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+'" alt="console.log" tabindex="0" loading="lazy"><figcaption>console.log</figcaption></figure><p>以%c 开头, 后面的文字就打印的信息, 后面一个参数就是样式属性；可以尝试多个样式, 每碰到一个%c 开头就会应用对应的样式。</p><h2 id="不同性质的信息用不同的方法" tabindex="-1"><a class="header-anchor" href="#不同性质的信息用不同的方法" aria-hidden="true">#</a> 不同性质的信息用不同的方法</h2>',11),q={href:"http://console.info",target:"_blank",rel:"noopener noreferrer"},_=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;this is info&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;this is debug&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;this is warn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;this is error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+`" alt="console.log" tabindex="0" loading="lazy"><figcaption>console.log</figcaption></figure><h3 id="console-debug-object" tabindex="-1"><a class="header-anchor" href="#console-debug-object" aria-hidden="true">#</a> console.debug(object)</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>object<span class="token punctuation">[</span><span class="token punctuation">,</span> object<span class="token punctuation">,</span> …<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>向控制台输出一条信息, 它包括一个指向该行代码位置的超链接。</p>`,5),y={id:"console-info-object",tabindex:"-1"},w=s("a",{class:"header-anchor",href:"#console-info-object","aria-hidden":"true"},"#",-1),E={href:"http://console.info",target:"_blank",rel:"noopener noreferrer"},z=a(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>object<span class="token punctuation">[</span><span class="token punctuation">,</span> object<span class="token punctuation">,</span> …<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>向控制台输出一条信息, 该信息包含一个表示&quot;信息&quot;的图标, 和指向该行代码位置的超链接。</p><h3 id="console-warn-object" tabindex="-1"><a class="header-anchor" href="#console-warn-object" aria-hidden="true">#</a> console.warn(object)</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>object<span class="token punctuation">[</span><span class="token punctuation">,</span> object<span class="token punctuation">,</span> …<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),$={href:"http://console.info",target:"_blank",rel:"noopener noreferrer"},N=a(`<h3 id="console-error-object" tabindex="-1"><a class="header-anchor" href="#console-error-object" aria-hidden="true">#</a> console.error(object)</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>object<span class="token punctuation">[</span><span class="token punctuation">,</span> object<span class="token punctuation">,</span> …<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,2),T={href:"http://console.info",target:"_blank",rel:"noopener noreferrer"},V=a(`<h2 id="console-group-object" tabindex="-1"><a class="header-anchor" href="#console-group-object" aria-hidden="true">#</a> console.group(object)</h2><p>如果信息太多, 可以分组显示, 用到的方法是 console.group() 和 console.groupEnd()。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">&quot;第一组信息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;第一组第一条&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;第一组第二条&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">groupEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">&quot;第二组信息&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;第二组第一条&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;第二组第二条&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">groupEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+k+`" alt="分组显示信息" tabindex="0" loading="lazy"><figcaption>分组显示信息</figcaption></figure><p>console.groupCollapsed() 跟 console.group() 相同, 区别在于嵌套块默认是收起的。</p><h2 id="console-dir-object" tabindex="-1"><a class="header-anchor" href="#console-dir-object" aria-hidden="true">#</a> console.dir(object)</h2><p>console.dir() 可以显示一个对象所有的属性和方法（输出结果类似于 DOM 面板中的样式）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> dog <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
dog<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;大毛&quot;</span><span class="token punctuation">;</span>
dog<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&quot;黄色&quot;</span><span class="token punctuation">;</span>
dog<span class="token punctuation">.</span><span class="token function-variable function">bark</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;汪汪汪&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+v+`" alt="console.dir" tabindex="0" loading="lazy"><figcaption>console.dir</figcaption></figure><h2 id="console-dirxml-node" tabindex="-1"><a class="header-anchor" href="#console-dirxml-node" aria-hidden="true">#</a> console.dirxml(node)</h2><p>console.dirxml() 用来显示网页的某个节点（node）所包含的 html/xml 代码。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> footer <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;footer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">dirxml</span><span class="token punctuation">(</span>footer<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+b+`" alt="console.dirxml" tabindex="0" loading="lazy"><figcaption>console.dirxml</figcaption></figure><h2 id="console-assert-expression" tabindex="-1"><a class="header-anchor" href="#console-assert-expression" aria-hidden="true">#</a> console.assert(expression)</h2><p>断言, 测试一条表达式是否为真, 不为真时将抛出异常（断言失败）, 为真则不抛出异常（断言成功）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> year <span class="token operator">=</span> <span class="token number">2016</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>year <span class="token operator">==</span> <span class="token number">2015</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>
  j <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">assert</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+h+`" alt="console.assert" tabindex="0" loading="lazy"><figcaption>console.assert</figcaption></figure><h1 id="console-trace" tabindex="-1"><a class="header-anchor" href="#console-trace" aria-hidden="true">#</a> console.trace()</h1><p>console.trace() 输出 JavaScript 执行时的堆栈追踪。</p><p>比如, 有一个加法器函数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我想知道这个函数是如何被调用的, 在其中加入 <code>console.trace()</code> 方法就可以了。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假定这个函数的调用代码如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token function">add3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">add3</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">add2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">add1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">add1</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行后, 会显示 <code>add()</code> 的调用轨迹, 从上到下依次为 <code>add()</code> 、 <code>add1()</code> 、 <code>add2()</code> 、 <code>add3()</code> 。</p><figure><img src="`+m+`" alt="console.trace" tabindex="0" loading="lazy"><figcaption>console.trace</figcaption></figure><h2 id="console-time-name" tabindex="-1"><a class="header-anchor" href="#console-time-name" aria-hidden="true">#</a> console.time(name)</h2><p>console.time() 和 console.timeEnd(), 用来显示代码的运行时间。当调用 console.timeEnd(name); 并传递相同的 name 为参数时, 计时停止, 并输出执行两条语句之间代码所消耗的时间（毫秒）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token string">&quot;time&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">timeEnd</span><span class="token punctuation">(</span><span class="token string">&quot;time&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+g+'" alt="console.time" tabindex="0" loading="lazy"><figcaption>console.time</figcaption></figure><p>注: console.time(slugName) – console.timeEnd(slugName) 记录某一个 javascript 程序的执行时间, 可用于优化循环语句</p><h2 id="console-clear" tabindex="-1"><a class="header-anchor" href="#console-clear" aria-hidden="true">#</a> console.clear()</h2><p>清空控制台</p><h2 id="其他命令" tabindex="-1"><a class="header-anchor" href="#其他命令" aria-hidden="true">#</a> 其他命令</h2><p>控制台除了可以运行常规的 javascript 代码, 还内置了相当数量的命令行可以辅助我们的调试工作,</p><h3 id="id" tabindex="-1"><a class="header-anchor" href="#id" aria-hidden="true">#</a> $(id)</h3><p>返回一个给定 id 的元素。无需引用 jQuery, 不可与 jQuery 的方法混用。</p><h3 id="selector" tabindex="-1"><a class="header-anchor" href="#selector" aria-hidden="true">#</a> $$(selector)</h3><p>返回给定的 css 选择器匹配到的一组元素。</p><h3 id="x-xpath" tabindex="-1"><a class="header-anchor" href="#x-xpath" aria-hidden="true">#</a> $x(xpath)</h3><p>返回给定的 XPath 表达式匹配到的一组元素。</p><h3 id="_0" tabindex="-1"><a class="header-anchor" href="#_0" aria-hidden="true">#</a> $0</h3><p>返回在 HTML 面板中选中的元素。</p><h3 id="_1" tabindex="-1"><a class="header-anchor" href="#_1" aria-hidden="true">#</a> $1</h3><p>返回上一次在 HTML 面板中选中的元素。</p><h3 id="n-index" tabindex="-1"><a class="header-anchor" href="#n-index" aria-hidden="true">#</a> $n(index)</h3><p>返回访问最近 5 个被选中过的元素, index 的范围: 0 – 4。</p><h3 id="dir-object" tabindex="-1"><a class="header-anchor" href="#dir-object" aria-hidden="true">#</a> dir(object)</h3><p>同 console.dir(object)。</p><h3 id="dirxml-node" tabindex="-1"><a class="header-anchor" href="#dirxml-node" aria-hidden="true">#</a> dirxml(node)</h3><p>同 console.dirxml(node)。</p><h3 id="clear" tabindex="-1"><a class="header-anchor" href="#clear" aria-hidden="true">#</a> clear()</h3><p>同 console.clear()。</p><h3 id="inspect-object-tabname" tabindex="-1"><a class="header-anchor" href="#inspect-object-tabname" aria-hidden="true">#</a> inspect(object[, tabName])()</h3><p>在合适的（或一个指定的） tab 中检视一个对象。</p><h3 id="keys-object" tabindex="-1"><a class="header-anchor" href="#keys-object" aria-hidden="true">#</a> keys(object)</h3><p>返回一个对象的所有属性的键。</p><h3 id="values-object" tabindex="-1"><a class="header-anchor" href="#values-object" aria-hidden="true">#</a> values(object)</h3><p>返回一个对象的所有属性的值。</p><h3 id="debug-fn" tabindex="-1"><a class="header-anchor" href="#debug-fn" aria-hidden="true">#</a> debug(fn)</h3><p>在函数第一行添加一个断点, 使用 undebug(fn) 移除断点。</p><h3 id="monitor-fn" tabindex="-1"><a class="header-anchor" href="#monitor-fn" aria-hidden="true">#</a> monitor(fn)</h3><p>开启一个函数的调用日志, 使用 unmonitor(fn) 关闭该功能。非常有用的一个命令, 但是它似乎并没有很好地工作。</p><h3 id="monitorevents-object-types" tabindex="-1"><a class="header-anchor" href="#monitorevents-object-types" aria-hidden="true">#</a> monitorEvents(object[, types])</h3><p>开启一个元素的某个事件（或所有事件）被触发时的日志记录。用例如下:</p><h3 id="monitorevents-0-click" tabindex="-1"><a class="header-anchor" href="#monitorevents-0-click" aria-hidden="true">#</a> monitorEvents($0, [&#39;click&#39;])</h3><p>上面的命令行被执行后, 将开启当前在 HTML 面板中被选中元素的 click 事件监控, 一旦这个元素的 click 事件被触发, 事件对象将会在控制台输出。如果不指定第二个参数, 将对所有事件进行记录。</p>',68);function C(L,B){const e=l("ExternalLinkIcon");return p(),c("div",null,[j,i(" more "),x,s("p",null,[n("根据信息的不同性质, console 对象还有 4 种显示信息的方法, 分别是一般信息 "),s("a",q,[n("console.info"),t(e)]),n("()、除错信息 console.debug()、警告提示 console.warn()、错误提示 console.error()。")]),_,s("h3",y,[w,n(),s("a",E,[n("console.info"),t(e)]),n("(object)")]),z,s("p",null,[n("同 "),s("a",$,[n("console.info"),t(e)]),n("()。区别是图标与样式不同。")]),N,s("p",null,[n("同 "),s("a",T,[n("console.info"),t(e)]),n("()。区别是图标与样式不同。error 实际上和 throw new Error() 产生的效果相同, 使用该语句时会向浏览器抛出一个 JavaScript 异常。")]),V])}const S=o(f,[["render",C],["__file","some-tips-for-console.html.vue"]]);export{S as default};
